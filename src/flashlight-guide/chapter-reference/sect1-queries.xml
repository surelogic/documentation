<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect1 id="query-reference">
  <title>Queries</title>
  <para>
    <qandaset defaultlabel="none" >
      <qandaentry>
	<question>
	  <para>
	    How often is a lock held when this field is accessed?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists how often each lock was held when this particular field was
	    accessed, as well as what proportion of the total number of field
	    accesses that represents.  If the same lock is held on every access,
	    we have an assurance that no race condition was observed for this
	    field during this run of the program.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    How often is a lock held when this field is accessed after object construction?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists how often each lock was held when this particular field was
	    accessed after the object was fully constructed.  If the same lock
	    is held on every access, we have an assurance that no race condition
	    was observed for this field.  This is generally the more useful form
	    of this query, as a safely published field usually doesn't need to
	    have the same lock held during object construction as is held when
	    it is accessed.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    How often is a lock held when this object is indirectly accessed?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists how often each lock was held when a particular object was
	    indirectly accessed, as well as what proportion of the total number
	    of accesses that represents.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What are the improperly published instances of this non-static field?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists the shared objects containing a given field that are
	    improperly published.  Improperly published objects are accessed by
	    more than one thread while the object is under construction.  This
	    generally happens when a constructor passes its
	    <varname>this</varname> reference to another object during
	    construction.  The number of reads/writes and the size of the lock
	    set is also shown.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What are the individual instances of this non-static field?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists the shared objects containing a given field.  The number of
	    reads/writes and the size of the lock set is also shown.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What are the lock events for this lock graph edge?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the lock events that contribute to a particular edge of
	    the lock cycle, and where they occur in the program.  Clicking on a
	    lock event will open the line that acquired it in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields (non-static) are shared?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all the non-static fields accessed by more than one thread.
	    Provides some summary information about the number of reads and
	    writes of each field, as well as how many shared objects are created
	    that contain this field.  Clicking on a field will open its
	    declaration in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields (non-static) have a lock set?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all the non-static fields accessed by more than one thread in
	    the program that have a lock set.  A lock set guarantees that the
	    field's data can not be invalidated by a race condition.  Provides
	    some summary information about the number of reads and writes of
	    each field, as well as how many shared objects are created that
	    contain this field.  Clicking on a field will open its declaration
	    in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields (non-static) have an empty lock set?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all the non-static fields accessed by more than one thread in
	    the program with an empty lock set.  An empty lock set means that
	    Flashlight's lock set analysis could not find a common lock held
	    each time this field is accessed.  Provides some summary information
	    about the number of reads and writes of each field, as well as how
	    many shared objects are created that contain this field.  Clicking
	    on a field will open its declaration in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields (non-static, non-final) are shared?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all the non-static, non-final fields accessed by more than one
	    thread.  Provides some summary information about the number of reads
	    and writes of each field, as well as how many shared objects are
	    created that contain this field.  Clicking on a field will open its
	    declaration in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields (static) are shared?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the static fields in the program accessed by more than
	    one thread, and the number of reads and writes made by each thread.
	    Clicking on a field will open its declaration in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields (static) have a lock set?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the static fields in the program accessed by more than
	    one thread that have a lock set, and the number of reads and writes
	    made by each thread.  A lock set guarantees that the field's data
	    cannot be invalidated by a race condition.  Clicking on a field will
	    open its declaration in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields (static) have an empty lock set?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the static fields in the program accessed by more than
	    one thread that have an empty lock set, and the number of reads and
	    writes made by each thread.  An empty lock set means that
	    Flashlight's lock set analysis could not find a common lock held
	    each time this field is accessed.  Clicking on a field will open its
	    declaration in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields (static, non-final) are shared?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the static, non-final fields in the program accessed by
	    more than one thread, and the number of reads and writes made by
	    each thread.  Clicking on a field will open its declarations in the
	    code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields are accessed by multiple threads during object construction?
	  </para>
	</question>
	<answer>
	  <para>
	    Fields that are accessed by more than one thread before their object
	    has finished construction run the risk of being seen in an
	    uninitialized state.  This query displays any fields that were
	    observed to be accessed by two or more threads before construction
	    ended.  Clicking on a field will open its declaration in the code
	    view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What fields are protected by this lock, and how often?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the fields that were accessed while this lock was held
	    and how often each was accessed with or without the lock being held.
	    Clicking on a field will open its declaration in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What kinds of objects are indirectly accessed by more than one thread?
	  </para>
	</question>
	<answer>
	  <para>
	    Shows all of the classes with objects that are indirectly accessed
	    by more than one thread, as well as how many threads call them and
	    how many accesses are actually made.  Flashlight can generate
	    indirect access events about an object whenever it is invoked with
	    or passed as a parameter to a particular method.  By default, it
	    does this for the collections and array manipulation methods in
	    <package>java.util</package> and
	    <classname>java.lang.System</classname>. For more information about
	    indirect accesses, see <xref linkend="flashlight-method-files" />.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What locks are contended for the longest time?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the locks in the program, in descending order of the
	    average amount of time a lock blocks a thread each time it is
	    acquired.  Locks with a high average block time usually indicate
	    high contention in part of your program, and may be a source of
	    slowdown.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What locks could potentially cause deadlock?
	  </para>
	</question>
	<answer>
	  <para>
      	    Deadlocks can occur when two different threads in a program acquire
      	    a set of locks in different order.  Flashlight tries to detect
      	    potential deadlocks by constructing a directed graph where each edge
      	    points to an acquired lock from a lock already held.  This query
      	    shows all of the potential cycles in that graph.	    
	  </para>
	  <para>
	    For example, imagine that a program has locks 1, 2, and 3.  In
	    method <function>foo</function>, lock 1 is acquired, then 2, then 3.
	    In method <function>bar</function>, lock 3 is acquired, then 1, then
	    2.  If <function>foo</function> and <function>bar</function> are
	    called at the same time, foo may end up holding lock 1 and 2 while
	    bar holds lock 3.  Running this query will cause the above example
	    to show up as a cycle.  The figure below is an example of this type
	    of deadlock.
	  </para>
	  <figure id="query-deadlock-example">
	    <title>Example of a potential deadlock</title>
	    <mediaobject><imageobject><imagedata fileref="images/query-deadlock-example.png" /></imageobject></mediaobject>
	  </figure>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What instances of this class are indirectly accessed by more than one thread?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists the objects in this class called by more than one thread, and
	    gives a breakdown of the accesses made by each thread.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What is the lock trace for this lock event?
	  </para>
	</question>
	<answer>
	  <para>
	    Generates a trace of the lock acquisitions that were made leading up
	    to this lock event, from most to least recent.  Clicking on each
	    entry will open up the line that acquired that lock in the code
	    view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What is the stack trace for this access?
	  </para>
	</question>
	<answer>
	  <para>
	    Generates a stack trace of the method calls leading up to this field
	    access or method call, from most to least recent.  Clicking on each
	    line will open the method call in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What is the stack trace for this lock acquisition?
	  </para>
	</question>
	<answer>
	  <para>
	  Generates a stack trace of the method calls leading up to this lock
	  acquisition, from most to least recent.  Clicking on each line will
	  open the method call in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    What threads read and write this field?
	  </para>
	</question>
	<answer>
	  <para>
	    Shows the number of reads and writes each thread that accesses this
	    field makes.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    When and by what threads was this field accessed?
	  </para>
	</question>
	<answer>
	  <para>
	    Shows each field access and what thread it happened in, ordered by
	    the time it occurred.  Accesses marked as being 'Under Construction'
	    happened while the object was being initialized.  Clicking on an
	    access will open the relevant line in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    When and by what threads was this object indirectly accessed?
	  </para>
	</question>
	<answer>
	  <para>
	    Shows each call to this object and what thread it happened in,
	    ordered by the time it occurred.  Clicking on an access will open
	    the relevant line in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    When do we acquire a lock here?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists each time and by what thread the program acquires a lock at
	    this line in the code.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    Where are fields accessed during this particular lock acquisition?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the places in the program where a field is held during
	    this and only this time the lock is acquired.  Clicking on a line
	    will open it in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    Where are fields accessed while this lock is held?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the places in the program where a field is accessed
	    while this lock is held.  Clicking on a line will open it in the
	    code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    Where does a thread hold a lock and acquire another?
	  </para>
	</question>
	<answer>
	  <para>
	    Provides an overview of all the locking interaction in the program.
	    Lists every line of code where a lock is acquired while already
	    holding at least one lock.  Next to each line is listed the most
	    locks the program ever holds at this point.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    Where is this field accessed by the program?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the places in the program that access this field at
	    some point in time.  Clicking on a line will open up the field
	    access in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    Where is this field accessed while this lock is held?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the places in the program that access this field while
	    the given lock is being held.  Clicking on a line will open up the
	    field access in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    Where is this field accessed while this lock is not held?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the places in the program that access this field while
	    a given lock is not held.  Clicking on a line will open up the field
	    access in the code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    Where is this lock acquired by the program?
	  </para>
	</question>
	<answer>
	  <para>
	    Lists all of the places in the program that acquire this lock at
	    some point in time, and how this lock was acquired (either as an
	    intrinsic lock with <code>synchronized</code>, or as a
	    <package>java.util.concurrent</package>
	    <classname>ReadWriteLock</classname> or
	    <classname>Lock</classname>). Clicking on a line will open it in the
	    code view.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry>
	<question>
	  <para>
	    Which threads and what code contend for this lock?
	  </para>
	</question>
	<answer>
	  <para>
	    Shows all of the locations and threads that contend for this lock,
	    organized first by code location and then by thread.  Some entries
	    in this query may appear to be duplicates, but actually have
	    different stack traces.  For each entry, the amount of time that the
	    thread blocks and the number of times the lock is acquired is
	    listed.
	  </para>
	</answer>
      </qandaentry>
    </qandaset>
  </para>
</sect1>
