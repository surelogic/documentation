<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<book lang="en-US">

<title>Flashlight User Guide</title>
<subtitle>How to use and configure the Flashlight Eclipse client</subtitle>
<bookinfo>
  <copyright>
    <year>2008</year>
    <holder>SureLogic Inc.</holder>
  </copyright>
  <legalnotice>
    <para>The authors and publishers have taken care in the
    preparation of this documentation, but make no expressed or
    implied warranty of any kind and assume no responsibility for
    errors and omissions. No liability is assumed for incidental or
    consequential damages in connection with or arising out of the use
    of the information or programs herein.</para>
  </legalnotice>
  <pubdate>Version 1.0&mdash;November 2008</pubdate>
</bookinfo>

<chapter id="preface">
  <title>Preface</title>
  <section>
    <title>Audience</title>
    <para>This document is intended for Java developers who want to
    use the Flashlight tool within the Eclipse Java IDE. We assume
    that the reader understands both the Java programming language and
    the use of Eclipse for Java development.</para>
  </section>
  <section>
    <title>Contact information</title>
    <para>For technical support or other questions, please
    contact:</para>
    <para><email>support@surelogic.com</email></para>
    <para>5808 Forbes Avenue, Pittsburgh, PA 15217-1602</para>
  </section>
</chapter>

<chapter id="getting-started">
  <title>Getting started</title>
  <section>
    <title>Introduction</title>

    <para><emphasis>What is Flashlight?</emphasis> Flashlight is a
    dynamic analysis tool that helps you to better understand the
    concurrency within your Java software. It is similar to a profiler
    in the sense that it collects data from a program execution and
    presents information about that run to the tool user. Flashlight
    casts light on issues related to performance, concurrency, and
    code safety. The Flashlight dynamic analysis tool is designed so
    that even one run can reveal information regarding a relatively
    much larger universe of runs, and thus enable developers to
    address potential issues earlier. The tool is also designed to
    afford developers and evaluators a visibility that enables them to
    develop models to support "more complete" analyses such as sound
    static analysis, such as SureLogic's JSure tool.</para>

    <para>At a more technical level, Flashlight is designed to scale
    to very large amounts of collected instrumentation data. It
    accomplishes this through a unique pipeline/buffering approach
    that rapidly moves data out of the instrumented program's process
    heap and into secondary storage. It is designed to interact
    cleanly with garbage collection and object finalization.</para>

    <para>Flashlight use imposes an overhead cost, in terms of time
    and memory, on your program.  Flashlight is a much more invasive
    analysis than a typical Java profiler.  Roughly, an instrumented
    program will require two to three times the memory it normally
    uses and will run from 20 times to 80 times slower than it
    normally runs.  A dual- or quad-core CPU is recommend to speed the
    instrumented program.  Flashlight uses a large amount of disk
    space to store the data it collects, thus 50 to 100 Gigabytes of
    free disk space are recommended.</para>

    <para>The tool also has a highly effective query capability,
    wherein the database is queried using a hierarchy of queries that
    enable the results of one query to be used as a basis for "drill
    in" using sub-queries.</para>

  </section>

  <section>
    <title>Quick start: How to instrument your code and query
    Flashlight</title>

    <para>This section assumes that you have installed Flashlight. If
    you see a <guimenu>Flashlight</guimenu> menu item on your Eclipse
    main menu then you can assume Flashlight has been properly
    installed.</para>

    <para>You need to install a license to use Flashlight.  If you do
    not have a license file visit <ulink
    url="http://www.surelogic.com">http://www.surelogic.com</ulink> to
    obtain one.  To install the license select <guimenuitem>Manage
    SureLogic Licenses</guimenuitem> from the
    <guimenu>Flashlight</guimenu> menu as shown in <xref
    linkend="fig-quick-start-license-menu" /></para>

    <figure id="fig-quick-start-license-menu">
      <title>The menu option to install a license for Flashlight.</title>
      <mediaobject>
	<imageobject role="html">
	  <imagedata fileref="images/quick-start-license-menu.png" />
	</imageobject>
      </mediaobject>
    </figure>

    <para> This will cause the <guilabel>Manage SureLogic
    Licenses</guilabel> to appear as shown in <xref
    linkend="fig-quick-start-license-dialog-empty" /> Highlight the
    Flashlight row and select the <guibutton>Install
    License</guibutton> button to install your license file.</para>

    <figure id="fig-quick-start-license-dialog-empty">
      <title>The SureLogic license management dialog.</title>
      <mediaobject>
	<imageobject role="html">
	  <imagedata fileref="images/quick-start-license-dialog-empty.png" />
	</imageobject>
      </mediaobject>
    </figure>

    <para>Flashlight will not disrupt your Eclipse installation if a
    license for it is not installed, however, it will not allow you to
    use Flashlight functionality.  We will assume from this point on
    that you have installed your license.</para>

    <para>Flashlight is a dynamic analysis tool which means that you
    have to run your program to use it.  Flashlight instruments your
    program when it starts up and uses that instrumentation to collect
    data about your program.  Data is collected to a file located in
    <filename>~/.flashlight-data</filename>.</para>

  </section>

  <section>
    <title>Tutorials</title>

    <para>This section contains a series of Flashlight tutorials.  It is
    recommended that you go through these tutorials in order.  It is
    also recommended that these tutorials be performed "hands-on" at
    your computer.  You may want to create a new Eclipse workspace
    for these tutorials.</para>

    <section id="sec-tutorial-client">
      <title>Using the Flashlight Eclipse client</title>

      <para>This tutorial assumes that you have installed
      Flashlight. If you see a <guimenu>Flashlight</guimenu> menu item
      on your Eclipse main menu than you can assume it has been
      installed properly.</para>

      <para>First download the <application>PlanetBaron</application>
      project from www.surelogic.com at <ulink
      url="http://www.surelogic.com/static/flashlight/PlanetBaron.zip">
      http://www.surelogic.com/static/flashlight/PlanetBaron.zip</ulink>
      to your disk. Unzip this archive into your workspace and it will
      create a <filename>PlanetBaron</filename> directory. Next import
      this project into your Eclipse workspace using
      <guimenuitem>File</guimenuitem> |
      <guimenuitem>Import...</guimenuitem> from the Eclipse main menu
      and then choosing <emphasis>Existing Projects into
      Workspace</emphasis> for the import wizard. Follow the import
      steps of wizard until the <application>SmallWorld</application>
      project is imported and built.</para>

      <para>PlanetBaron is a network-based real-time strategy game.
      It contains three programs. First, there is a server program
      that manages game state. Second, there is a client user
      interface program that allows players to interact with the
      game. Finally, there is a program, called the chat-test client,
      that allows direct interaction with the server. The chat-test
      client is used to shutdown a running server.</para>

      <para>Flashlight is a dynamic analysis tool. To get any useful
      results from Flashlight we have to collect data while a program
      is running. For this tutorial we will collect data about running
      PlanetBaron programs. Therefore we now describe how to run and
      play a PlanetBaron game. After we understand a bit about how to
      run this game we will return to using Flashlight on it.</para>

      <para>Let's run a PlanetBaron game. Select
      <filename>Server.java</filename> in the
      <varname>edu.afit.planetbaron.server</varname>
      package. Right-click and select <guimenuitem>Run
      As</guimenuitem> and then <guimenuitem>Java
      Application</guimenuitem>. You should see following output in
      the console which indicates that the server has started
      successfully:</para>

      <programlisting>
	[INFO "server-main"] PlanetBaron game server listening for clients on port 8693 and playing on a 15x15 map
      </programlisting>

      <para>Now we need to add some players. Select
      <filename>PlayerUI.java</filename> in the
      <varname>edu.afit.planetbaron.client</varname> package.
      Right-click and select <guimenuitem>Run As</guimenuitem> and
      then <guimenuitem>Java Application</guimenuitem>. You will see a
      Swing application start that has a blank grid. In the lower
      right-hand-corner enter a player name, 
      <userinput>Laurel</userinput>, and press
      <guibutton>Connect</guibutton>.</para>

      <para>The screen will change to contain several planets and one
      ship with "Laurel" as its label. By moving your mouse around the
      grid you can direct your ship. Place your mouse over a planet
      and left-click. This action will cause your ship to move slowly
      to that planet. When your ship arrives you will become the owner
      of that planet. This is called "taking ownership" of a planet.
      Go ahead an take ownership of a planet. Note that while your
      ship is moving you are not allowed to change its destination.
      Once it arrives at the destination you selected you can then
      select a subsequent destination.</para>

      <para>Now, go back to Eclipse and start a second instance of
      <filename>PlayerUI.java</filename>. In the lower
      right-hand-corner enter a player name,
      <userinput>Hardy</userinput>, and press
      <guibutton>Connect</guibutton>.</para>

      <para>The game supports as many players as you choose to connect
      to the server.  Notice that the planets that Laurel owns are red
      in the Hardy PlayerUI while they are white in the Laurel
      PlayerUI.  Moving back and forth between the two PlayerUIs move
      the ships to play the game.  Note that the idea of the game is
      to own as many planets as you can. A game screenshot is shown in
      <xref linkend="fig-tutorial-planetbaron-playerui" /></para>

      <figure id="fig-tutorial-planetbaron-playerui">
	<title>The PlanetBaron PlayerUI for Laurel.</title>
	<mediaobject>
	  <imageobject role="html">
	    <imagedata fileref="images/tutorial-planetbaron-playerui.png" />
	  </imageobject>
	</mediaobject>
      </figure>

      <para>To finish the game press <guibutton>Disconnect</guibutton>
      in both PlayerUI instances and then terminate the programs by
      using the windowing system <guibutton>X</guibutton>. This action
      ends both player user interfaces but the server is still
      running.  To terminate the server we need to use the chat-test
      client program.</para>

      <para>Select <filename>ChatTestClient.java</filename> in the
      <varname>edu.afit.planetbaron.client</varname> package.
      Right-click and select <guimenuitem>Run As</guimenuitem> and
      then <guimenuitem>Java Application</guimenuitem>. You will see a
      Swing application start. This program allows you to directly
      control the game server. We want to use it to shutdown the game
      server. To do this press <guibutton>Connect</guibutton> to
      connect to the game server and enter
      <userinput>shutdown</userinput> as the command. You're screen
      should now look like the one shown in <xref
      linkend="fig-tutorial-planetbaron-chattestclient" /></para>

      <figure id="fig-tutorial-planetbaron-chattestclient">
	<title>Using the ChatTestClient to shutdown the game server.</title>
	<mediaobject>
	  <imageobject role="html">
	    <imagedata fileref="images/tutorial-planetbaron-chattestclient.png" />
	  </imageobject>
	</mediaobject>
      </figure>

      <para>Press <guibutton>Send</guibutton> to shutdown the
      server. A dialog will appear stating that the server has
      disconnected from the ChatTestClient that you may dismiss. You
      can now terminate the ChatTestClient using the windowing system
      <guibutton>X</guibutton>. Back in the Eclipse console for the
      server you should see the following message:</para>

      <programlisting>
	[INFO "server-main"] PlanetBaron game server shutdown complete
      </programlisting>

      <para>We are now ready to use Flashlight to help us understand
      the concurrency in the PlanetBaron game. Let's start with the
      ChatTestClient. To run the ChatTestClient with Flashlight
      instrumentation we select it from the Flashlight launch tab in
      the Eclipse toolbar as shown in <xref
      linkend="fig-tutorial-planetbaron-running-chattestclient" /></para>

      <figure id="fig-tutorial-planetbaron-running-chattestclient">
	<title>Running ChatTestClient with Flashlight
	instrumentation.</title>
	<mediaobject>
	  <imageobject role="html">
	    <imagedata fileref="images/tutorial-planetbaron-running-chattestclient.png" />
	  </imageobject>
	</mediaobject>
      </figure>

      <para>The ChatTestClient window will appear on your
      screen. Select the <guibutton>Connect</guibutton> to try an
      connect to a game server. This will fail and the application
      will show a dialog to you which you may dismiss. The reason it
      fails is that we did not start a game server. At this point we
      have exercised the ChatTestClient enough to see some Flashlight
      results. Go ahead and use the windowing system
      <guibutton>X</guibutton> to terminate the program. At this point
      Eclipse, which knows that this launch was instrumented, will
      prompt you to switch to the Flashlight perspective as shown in
      <xref
      linkend="fig-tutorial-planetbaron-perspective-switch-dialog"
      /></para>

      <figure id="fig-tutorial-planetbaron-perspective-switch-dialog">
	<title>Prompting the user to switch to the Flashlight
	perspective.</title>
	<mediaobject>
	  <imageobject role="html">
	    <imagedata fileref="images/tutorial-planetbaron-perspective-switch-dialog.png" />
	  </imageobject>
	</mediaobject>
      </figure>

      <para>Press <guibutton>Yes</guibutton> and the Flashight will
      appear as shown in <xref
      linkend="fig-tutorial-planetbaron-perspective-empty" /></para>

      <figure id="fig-tutorial-planetbaron-perspective-empty">
	<title>The Flashlight perspective.</title>
	<mediaobject>
	  <imageobject role="html">
	    <imagedata fileref="images/tutorial-planetbaron-perspective-empty.png" />
	  </imageobject>
	</mediaobject>
      </figure>

      <para>The Flashlight perspective is used to manage and query
      data collected from instrumented programs.</para>

    </section>
  </section>
</chapter>

<chapter id="reference">
  <title>Reference</title>
  <section>
    <title>The Flashlight menu</title>
    <para>The Flashlight menu appears as an item on the Eclipse
    workspace main menu.</para>
  </section>
  <section>
    <title>The Flashlight perspective</title>
    <para>The Flashlight perspective organizes the Eclipse workbench
    to show views which will help you to interact with tool
    findings.</para>
  </section>
</chapter>

<chapter>
  <title>Release notes</title>
  <para>For each release of Flashlight there are new and noteworthy
    features to try out, and known limitations to avoid or
    workaround. These are presented in the sections below for each
    released version of Flashlight.</para>
  <section>
    <title>Flashlight version 1.0</title>
    <para>This section describes the 1.0 release of Flashlight.</para>
    <section>
      <title>New and Noteworthy</title>
      <para>This section describes new and noteworthy features in this
      version of Flashlight.</para>
    </section>
    <section>
      <title>Known Problems</title>
      <para>This section describes known bugs and limitations in this
      version of Flashlight.</para>
    </section>
  </section>
</chapter>

</book>