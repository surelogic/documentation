<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect2 id="assuring-single-threaded">
  <title>Assuring Constructors:
  <classname>@SingleThreaded</classname></title>

  <para>The class <classname>ConstructorExample</classname> below
  demonstrates assurance issues with object constructors. Specifically,
  each <classname>@SingleThreaded</classname> annotation appears
  directly under the <guilabel>Concurrency</guilabel> top-level heading,
  and field initializers and their initialization expressions are
  assured once <emphasis>for each</emphasis> constructor in the class.
  This section discusses the single-threaded constructors; the next,
  <xref linkend="assuring-field-init"/> discusses field initialization
  issues.</para>

  <programlisting linenumbering="numbered" startinglinenumber="8"><emphasis>@RegionLock("L2 is this protects Instance")</emphasis>
public class ConstructorExample {
  private int f = 100;
  
  private int g = f + 10;
  
  private int h;
  
  private final Aux aux = new Aux();
  
  private final int bad = aux.doStuff();
  
  public ConstructorExample(final int a) {
    // bad
    h = a;
  }

  <emphasis>@SingleThreaded</emphasis>
  <emphasis>@Borrowed("this")</emphasis>
  // good constructor
  public ConstructorExample(final int a, final int b) {
    // good
    h = a;
    // good
    f += b;
  }
  
  <emphasis>@SingleThreaded</emphasis>
  // bad constructor
  public ConstructorExample() {
    h = 10;
  }
  
  <emphasis>@RegionLock("AuxLock is this protects Instance")</emphasis>
  static class Aux {
    private int x;
    
    <emphasis>@RequiresLock("AuxLock")</emphasis>
    public int doStuff() {
      return x; 
    }
  }
}</programlisting>
  
  <para>Class <classname>ConstructorExample</classname> has two
  constructors annotated with <classname>@SingleThreaded</classname>:
  <function>ConstructorExample(int, int)</function> at line 28, and
  <function>ConstructorExample()</function> at line 37. The annotation
  assures for the first, but not for the second:</para>
  
  <mediaobject>
    <imageobject condition="isHTML">
      <imagedata fileref="images/lock-assurance-04.png"/>
    </imageobject>
    <imageobject condition="isFO">
      <imagedata width="100%" scalefit="1" fileref="images/lock-assurance-04.png"/>
    </imageobject>
  </mediaobject>

  <sect3 id="singledThreaded-supported">
    <title>single-threaded constructor supported</title>

    <para>This result indicates that JSure is able to assure that the
    constructor has exclusive access to the object being constructed.
    This assurance is acheived in one of two ways:</para>

    <orderedlist>
      <listitem>
        <para>The constructor has a borrowed receiver.  That is, the
        constructor is also annotated with
        <classname>@Borrowed("this")</classname>.</para>
      </listitem>
      <listitem>
        <para>The constructor does not start any threads and only writes
        to the newly created object under construction. Specifically,
        the constructor is annotated with
        <classname>@Starts("nothing")</classname> and its declared
        effects are contained in the effect <code>"writes
        this:Instance"</code>.</para>
      </listitem>
    </orderedlist>

    <para>JSure attempts to assure the annotation using both techniques,
    and the results of this are shown under the <guilabel>precondition
    choice(s)</guilabel> subheading. For constructor
    <function>ConstructorExample(int, int)</function> only the first
    case applies, an we see the <guilabel>by borrowed
    receiver</guilabel> subheading. Under that heading are the results
    elaborating the assurance that the receiver is unaliased. Any
    evidence about using the second option would appear under the
    subheading <guilabel>by effects</guilabel>.</para>
  </sect3>
 
  <sect3 id="singleThreaded-escaping">
    <title>single-threaded constructor has possibly escaping
    receiver</title>

    <para>This result indicates that JSure is unable to assure that the
    object being constructed is accessed by the thread that is
    constructing it only. That is, the receiver may escape the
    constructing thread and not be accessed by a single thread. In our
    example, the constructor <function>ConstructorExample()</function>
    fails to assure because we do not provide any design intent that can
    be used to back up the claims of single-threadedness.</para>
  </sect3>
</sect2>
