<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../lib/docbook-xml-4.5/docbookx.dtd">

<book id="jsure-examples" lang="en-US"
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>JSure User Guide</title>
  <subtitle>How to use and configure the JSure Eclipse client</subtitle>
  <bookinfo>
    <copyright>
      <year>2011</year>
      <holder>SureLogic, Inc.</holder>
    </copyright>
    <legalnotice>
      <para>The authors and publishers have taken care in the
      preparation of this documentation, but make no expressed or
      implied warranty of any kind and assume no responsibility for
      errors and omissions. No liability is assumed for incidental or
      consequential damages in connection with or arising out of the use
      of the information or programs herein.</para>
    </legalnotice>
    <pubdate>Version 4.0.0&mdash;August 2011</pubdate>
  </bookinfo>

  <preface id="preface">
    <title>Preface</title>
    <sect1>
      <title>Audience</title>
      <para>This document is intended for Java developers who want to
      use the JSure tool within the Eclipse Java IDE. We assume
      that the reader understands both the Java programming language and
      the use of Eclipse for Java development.</para>
    </sect1>
    <sect1>
      <title>Contact information</title>
      <para>For technical support or other questions, please
      contact:</para>
      <para><email>support@surelogic.com</email></para>
      <para>5808 Forbes Avenue, Pittsburgh, PA 15217-1602</para>
    </sect1>
  </preface>

  <xi:include href="chapter-getting-started/chapter.xml"/>

  <xi:include href="chapter-understanding-assurance-output/chapter.xml"/>

  <xi:include href="chapter-reference/chapter.xml"/>

  <chapter>
    <title>Release notes</title>
    <para>For each release of JSure there are new and noteworthy
    features to try out, and known limitations to avoid or
    workaround. These are presented in the sections below for each
    released version of JSure.</para>

    <section id="sec-jsure-release-4-0-0">
      <title>JSure version 4.0.0</title>
      <para>This section describes the 4.0.0 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>New approach to scanning annotated code</emphasis>
	    &mdash; TBD</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Improved analysis performance</emphasis> &mdash; 
	    TBD.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Query based user interface</emphasis> &mdash; 
            TBD.</para>
	  </listitem>

        </orderedlist>
      </section>
    </section>

    <section id="sec-jsure-release-3-1-1">
      <title>JSure version 3.1.1</title>
      <para>This section describes the 3.1.1 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>Problem with single-threaded constructors and
	    <package>java.util.concurrent.locks</package> fixed</emphasis>
	    &mdash; The <link linkend="known-issue-single-threaded">known issue</link>
	    described in the 3.1.0 release notes has been fixed.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Improved performance</emphasis> &mdash; 
            Key internal data structures have been optimized for the common case.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Avoidance of unnecessary re-analysis</emphasis> &mdash; 
            Uninteresting files no longer trigger (lengthy) re-analysis.</para>
	  </listitem>

        </orderedlist>
      </section>
    </section>

    <section id="sec-jsure-release-3-1-0">
      <title>JSure version 3.1.0</title>
      <para>This section describes the 3.1.0 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>Tips and problem reports are tracked by
	    SureLogic</emphasis> &mdash; When you submit a tip for
	    improvement or a problem report to SureLogic it is tracked
	    via an automatically created Bugzilla issue report at
	    <ulink
		url="http://www.surelogic.com/bugzilla/index.cgi">surelogic.com</ulink>. If
	    you include your email address in the tip or problem
	    report you will be notified when changes to the status of
	    the Bugzilla issue are made by SureLogic engineers. The
	    public Bugzilla may also be accessed via a browser at
	    <ulink
		url="http://www.surelogic.com/bugzilla/index.cgi">surelogic.com</ulink>.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>The "Tip for Improvement" and "Problem
	    Report" dialogs are no longer modal</emphasis> &mdash;
	    This allows the user to cut and paste information from
	    Eclipse that they want to send to SureLogic into the
	    dialog.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>New Iconography Quick Reference
	    card</emphasis> &mdash; To help the user understand the
	    iconography of the <guilabel>Verification
	    Status</guilabel> view a non-model dialog has been added
	    that is a quick reference to the icons and what they
	    indicate to the user. The dialog is opened via a toolbar
	    button on the <guilabel>Verification Status</guilabel>
	    view as shown in <xref
	    linkend="fig-release-notes-310-icon-quick-ref"/>.</para>

	    <figure id="fig-release-notes-310-icon-quick-ref">
	      <title>The Iconography Quick Reference dialog.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-icon-quick-ref.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>JSure icon changes</emphasis> &mdash; The
	    JSure icon used for the <guilabel>Verification
	    Status</guilabel> view looked
	    like it indicated that the view contained a "red-dot" (an
	    assumption or vouch). The icon now uses blue instead of
	    read to avoid this confusion. The inconsistent
	    verification result decorator (a little red X) has been
	    changed to a small version of the inconsistent analysis
	    result icon. These two new icons are shown in <xref
	    linkend="fig-release-notes-310-new-jsure-icon"/>.</para>

	    <figure id="fig-release-notes-310-new-jsure-icon">
	      <title>The two new JSure icons used by the Verification Status view.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-new-jsure-icon.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>New promises library</emphasis> &mdash;
	    The promises Jar has been updated in Maven to 3.1.0. If
	    you are using JSure in the IDE, when you install 3.1.0
	    select <guimenuitem>Add/Update Promises
	    Library...</guimenuitem> from the JSure menu to update
	    your Java project's Jar file. The annotation changes are
	    discussed below.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Initial support for concurrent analysis
	    (an analysis performance improvement)</emphasis> To help
	    speed uniqueness assurance (i.e., verification of @Unique
	    and @Borrowed annotations) you can use multiple threads
	    under Java 6 (i.e., Eclipse must be running under a Java 6
	    VM). This defaults to the number of processors in your
	    computer but can be changed under the JSure Eclipse
	    preferences as shown in <xref
	    linkend="fig-release-notes-310-concurrent-analysis"/>.</para>

	    <figure id="fig-release-notes-310-concurrent-analysis">
	      <title>Preferences to set the number of processors used by JSure analysis.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-concurrent-analysis.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>Copy-Paste of verification
	    results</emphasis> &mdash; You can now copy with ^C
	    (Windows) or by right-clicking on a verification
	    result. The text can then be pasted into another
	    application.</para>

	    <figure id="fig-release-notes-310-copy-paste">
	      <title>Copying the text of a verification result to the clipboard.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-copy-paste.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>Simpler constructor annotation to support
	    locking models</emphasis> &mdash; The annotations required
	    on constructors to support locking models have been
	    simplified in JSure version 3.1.0. First, the
	    @SingleThreaded annotation has been deprecated, it is no
	    longer required.  If this annotation is in your code it is
	    ignored by the tool. Second, the annotation
	    @Unique("return") on a constructor is now defined to be
	    equivalent @Borrowed("this"). For example, a typical
	    constructor for a class with a lock policy in JSure 3.0.0
	    looked like
<programlisting>
  @SingleThreaded
  @Borrowed("this")
  public Aircraft(long x, long y) {
    ...
  }
</programlisting>
In 3.1.0 you can omit the @SingleThreaded annotation
<programlisting>
  @Borrowed("this")
  public Aircraft(long x, long y) {
    ...
  }
</programlisting>
In addition, the annotation @Unique("return") can, but does not have to, replace @Borrowed("this")
<programlisting>
  @Unique("return")
  public Aircraft(long x, long y) {
    ...
  }
</programlisting>
Programmers often think of the constructor "returning" a new object so
we have allowed this annotation. @Unique("return") has exactly the
same semantics for a constructor as @Borrowed("this") and they can be
used interchangeably. It is programmer preference which annotation
makes the most intuitive sense.
	    </para>
	    <para>It is recommend, but not required, that all
	    @SingleThreaded annotations be removed from the code. It
	    is also recommended to consider the use of
	    @Unique("return") on constructors.</para>
	    
            <note id="known-issue-single-threaded">
              <title>Known Issue</title>
              <para>There is a known assurance issue with the new approach 
              to single-threaded constructors when a class uses 
              <package>java.util.concurrent</package> locks.  The issue
              occurs when 
                <itemizedlist>
                  <listitem>
                    <para>A class contains an instance initializer block or 
                    field declaration with an initializer</para>
                  </listitem>
                  <listitem>
                    <para>Has more than one constructor declaration</para>
                  </listitem>
                  <listitem>
                    <para>Some constructors can be proven to be single-threaded,
                    but some cannot be</para>
                  </listitem>
                </itemizedlist>
              In this case, some of the assurance 
              results for field accesses that occur in the instance initalizer
              block or field initializer may be reported to be unassured, when
              in fact they actually are assured.
              </para>
            </note>
	    
	  </listitem>

	  <listitem>
	    <para><emphasis>Support for Java 1.4 code</emphasis>
	    &mdash; JSure annotations can now be placed in Java 1.4
	    source code that does not have language support for
	    annotations via the @annotate Javadoc tag. For example,
<programlisting>
/**
 * BoundedFIFO serves as the bounded first-in-first-out buffer
 * heavily used by the {@link org.apache.log4j.AsyncAppender}.
 *
 * @author Ceki G&uuml;lc&uuml;
 * @since version 0.9.1
 *
 * @annotate RegionLock("BufLock is this protects Instance")
 * @annotate Promise("@RequiresLock(BufLock) for *(**)")
 */
public class BoundedFIFO {
  /**
   * @annotate Unique
   * @annotate Aggregate
   */
  LoggingEvent[] buf;
...
}
</programlisting>
Basically, the "@" in the Java 5 annotation is replaced with
"@annotate" and the rest of the syntax is unchanged. The details are
covered in the Javadoc for each annotation. If your source is Java 5
or above this feature is turned off by default, but can be enabled
using the preference setting shown in <xref
	    linkend="fig-release-notes-310-java-1-4-support"/>.</para>

	    <figure id="fig-release-notes-310-java-1-4-support">
	      <title>Preferences to enable the use of @annotate in Javadoc.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-java-1-4-support.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>Turn off JSure analysis for a set of
	    specified directories</emphasis> &mdash; If your project
	    includes source directories for test code, you can setup
	    your project to ignore those directories by adding a
	    "jsure.properties" file with the following contents to the
	    project root:</para>
<programlisting>
# A comma-separated list of source paths (edit for your project)
ModuleDecl.Test=src/java/test/*,src/test/*

# -- Do not change the text below --
# Load only interfaces, not method bodies
Module.asClass=Test
# Load on demand from other classes
Module.asNeeded=Test
# Load everything else as usual
Module.defaults=asSource
</programlisting>
	  </listitem>
	  <listitem>
	    <para><emphasis>Improved JSure analysis job progress status reporting</emphasis> &mdash;
	    Progress updates have been added to longer-running analyses to provide better feedback
	    as to what files JSure is examining.</para>
	  </listitem>

	</orderedlist>
      </section>
    </section>

    <section id="sec-jsure-release-3-0-0">
      <title>JSure version 3.0.0</title>
      <para>This section describes the 3.0.0 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>A more straightforward aggregation
	    syntax</emphasis> &mdash; The syntax of aggregation is
	    improved. Many programmers have found found
<programlisting>
@RegionLock("CLock is this protects Instance")
class C {
  @Unique
  @Aggregate("Instance into Instance")
  private final Set&lt;String&gt; cSet = new HashSet&lt;String&gt;();
  &hellip;
}
</programlisting>
to be confusing and too academic-looking. This syntax is still
accepted by JSure (for backwards compatibility), however, it can be
simplified to
<programlisting>
@RegionLock("CLock is this protects Instance")
class C {
  @Unique
  @Aggregate
  private final Set&lt;String&gt; cSet = new HashSet&lt;String&gt;();
  &hellip;
}
</programlisting>
when dealing the <code>Instance</code> region (indicating all the
declared fields in the object). If the region is named then you can
use
<programlisting>
@Region("private CRegion")
@RegionLock("CLock is this protects CRegion")
class C {
  @Unique
  @AggregateInRegion("CRegion")
  private final Set&lt;String&gt; cSet = new HashSet&lt;String&gt;();
 
  @InRegion("CRegion")
  private int counter;
  &hellip;
}
</programlisting>
             which is similar to the <code>@InRegion</code>
             annotation (as seen above for the counter field).</para>
	  </listitem>
	  <listitem>
	    <para><emphasis>Goetz/Perlis annotation support</emphasis>
	    &mdash; We now support three of the four Goetz/Perlis
	    annotations: <code>@ThreadSafe</code>,
	    <code>@NotThreadSafe</code>, and
	    <code>@Immutable</code>. (We have some work to do with
	    <code>@GuardedBy</code>, but that annotation is really an
	    impoverished version of <code>@RegionLock</code>.)
	    Primarily these are for code documentation purposes. The
	    <code>@SelfProtected</code> annotation is replaced by
	    <code>@ThreadSafe</code>, therefore, if any
	    <code>@SelfProtected</code> annotations are in the code
	    they will not compile with the new JAR and will need to be
	    changed to <code>@ThreadSafe</code>. We decided to make
	    this, sadly incompatible, change to better support
	    standard annotations. It is our intention to fully support
	    all the standard Goetz/Perlis annotations in JSure.</para>

	    <para>The <code>@Immutable</code> annotation is not
	    verified in this release but an analysis will be added to
	    support verification of this assertion in a future release
	    of JSure.</para>
	  </listitem>
	  <listitem><para><emphasis>@MapFields replaced by
	  @InRegion</emphasis> &mdash; Another incompatible change is
	  the replacement of the <code>@MapFields</code> annotation
	  and its associated plural <code>@MapsFields</code> with
	  <code>@InRegion</code> and <code>@InRegions</code>,
	  respectively. This annotation was out of date (older
	  annotations talked about mapping fields into a region) and
	  we wanted to updated it and make it consistent with the
	  scheme used to allow multiple annotations on a class.</para>
	  <para>For example, one would change the below annotations
<programlisting>
/**
 * FSEditLog maintains a log of the namespace modifications.
 */
@Region("LogState")
@RegionLock("LogLock is this protects LogState")
@MapFields("editStreams, fsimage into LogState")
public class FSEditLog { ... }
</programlisting>
to
<programlisting>
/**
 * FSEditLog maintains a log of the namespace modifications.
 */
@Region("LogState")
@RegionLock("LogLock is this protects LogState")
@InRegion("editStreams, fsimage into LogState")
public class FSEditLog { ... }
</programlisting>
</para>
	  </listitem>
	  <listitem><para><emphasis>Programmer vouch capability added
	  to JSure</emphasis> &mdash; Vouches for any any inconsistent
	  analysis result within the scope of code that the annotation
	  appears on. This means that any inconsistent result will be
	  changed to a consistent result. Its use is for documentation
	  and to quiet overly conservative analysis results. This
	  annotation is trusted, i.e., it is not verified by
	  analysis.</para>

	  <para>The annotation requires a brief programmer explanation
	  for the vouch being made.</para>

	  <para>For example, an <code>init</code> method is used to
	  set set state, perhaps due to an API restriction about using
	  constructors, then <code>CentralControl</code> instances are
	  safely published. A <code>@Vouch</code> annotation is used
	  to explain that the <code>init</code> method needs to be an
	  exception to the lock policy.
<programlisting>
 @Region("private ControlRegion")
 @InRegion("f_id into ControlRegion")
 @RegionLock("ControlLock is lock protects ControlRegion")
 public class CentralControl {
 
   private final Object lock = new Object();
   private String f_id;
 
   @Vouch("Instances are thread confined until after init(String) is called.")
   public void init(String id) {
     f_id = id;
   }
 
   public String getId() {
     synchronized (lock) {
       return f_id;
     }
   }
 
   public void setId(String value) {
     synchronized (lock) {
       f_id = value;
     }
   }
 }
</programlisting>
	  Notice that the current implementation vouches for all
	  inconsistent analysis results within the type or method or
	  constructor that the annotation appears on. A more targeted
	  capability will be introduced in a future version of
	  JSure.</para>
	  </listitem>
	  <listitem>
	    <para><emphasis>Main menu item to add the JSure
	    annotations to a project</emphasis> &mdash; It is now
	    possible to add or update the JSure annotations library to
	    a project from the Eclipse main menu as shown in <xref
	    linkend="fig-release-notes-300-add-jar"/>
	    <figure id="fig-release-notes-300-add-jar">
	      <title>Main menu item to add the JSure annotations to a project</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-300-add-jar.png"/></imageobject>
	      </mediaobject>
	    </figure>
	    It is a good idea to run this menu choice after you
	    install a new version of JSure to ensure the annotation
	    library is up to date. If there is not an update the tool
	    will tell you you are up-to-date.
	    </para>
	  </listitem>
	  <listitem>
	    <para><emphasis>JSure annotations submitted to the Maven
	    Central Repository</emphasis> &mdash; SureLogic has
	    submitted the updated promise syntax (as described above)
	    to the Maven central repository and is awaiting them to
	    perform the upload request. The JIRA is <ulink
	    url="http://jira.codehaus.org/browse/MAVENUPLOAD-2654">http://jira.codehaus.org/browse/MAVENUPLOAD-2654</ulink>.
	    The maven site for JSure is <ulink
	    url="http://surelogic.com/promises/index.html">http://surelogic.com/promises/index.html</ulink>
	    with the associated Javadoc at <ulink
	    url="http://surelogic.com/promises/apidocs/index.html">http://surelogic.com/promises/apidocs/index.html</ulink>. This
	    inclusion in the Maven Central Repository is a step toward
	    making the JSure annotations a Java standard for
	    documenting and verifying concurrency design intent.
</para>
	  </listitem>
	</orderedlist>
      </section>

      <section>
	<title>Known Problems</title>
	<para>This section describes known bugs and limitations in this
	version of JSure.</para>
	<orderedlist>
	  <listitem><para><emphasis>Small <wordasword>S</wordasword>
	  in the project icon lower right corner does not go away when
	  JSure is disabled</emphasis> &mdash; JSure can only assure
	  the contents of one project at a time. The icon of the
	  project being assured is marked with a small
	  <wordasword>S</wordasword> in the lower right corner:
	  <guiicon><inlinegraphic
	  fileref="images/jsure-nature.png"/></guiicon>. The
	  <wordasword>J</wordasword> above the
	  <wordasword>S</wordasword> are intended to remind you that
	  this is the project JSure is analyzing. Sometimes when you
	  disable JSure verification the small
	  <wordasword>S</wordasword> does not go away immediatly. This
	  is a refresh bug in Eclipse. To make it go away simply
	  refresh the project (with F5) or restart Eclipse.</para>
	  </listitem>
	  <listitem><para><emphasis>Incremental analysis sometimes
	  fails</emphasis> &mdash; In rare cases the incremental
	  analysis, i.e., the results update when you save, fails. A
	  workaround is to restart Eclipse or perform a
	  <menuchoice><guimenuitem>Project</guimenuitem><guimenuitem>Clean...</guimenuitem></menuchoice>
	  of the project being verified. If this problem occurs please
	  notify SureLogic.</para>
	  </listitem>
	  <listitem><para><emphasis>Analysis can sometimes be
	  slow</emphasis> &mdash; If JSure verification is slow on
	  your computer, please notify SureLogic. It is suggested that
	  you only turn on JSure when you are using it. Another
	  workaround is to disable the automatic building of your code
	  in Eclipse by unchecking
	  <menuchoice><guimenuitem>Project</guimenuitem><guimenuitem>Build
	  Automatically</guimenuitem></menuchoice> in Eclipse. This
	  lets you select
	  <menuchoice><guimenuitem>Project</guimenuitem><guimenuitem>Build
	  Project</guimenuitem></menuchoice> to run the Java compiler
	  and JSure only when you are ready to.</para>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section id="sec-jsure-release-2-3-0">
      <title>JSure version 2.3.0</title>
      <para>This section describes the 2.3.0 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>Verification results are now separated
	    from modeling problems</emphasis> &mdash; A new view,
	    called the <guilabel>Modeling Problems</guilabel> view,
	    has been added to JSure. Previously any annotations that
	    were not well-formed (i.e., they had syntax errors or
	    other problems) were reported as modeling problems in the
	    <guilabel>Verification Status</guilabel> view. This was
	    confusing to the user because these results, which are
	    very important, could easily be missed when mixed in with
	    the analysis results shown in this view. A screenshot
	    showing this new view noting a typo in a
	    <emphasis>@InRegion</emphasis> annotation is shown in
	    <xref
	    linkend="fig-release-notes-230-modeling-problems"/>. The
	    referenced region name should be "PrivateState" not
	    "PrivateeState".</para>
	    <figure id="fig-release-notes-230-modeling-problems">
	      <title>The new Modeling Problems view</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-230-modeling-problems.png"/></imageobject>
	      </mediaobject>
	    </figure>
	    <para>The new view, by default, appears when the code has
	    any modeling problems. Therefore, the view can be
	    dismissed to save screen space and it will come back when
	    needed. This behavior can be changed as shown in  <xref
	    linkend="fig-release-notes-230-modeling-problems-pref"/>.</para>
	    <figure id="fig-release-notes-230-modeling-problems-pref">
	      <title>Preference for the new Modeling Problems view</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-230-modeling-problems-pref.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>
	  <listitem>
	    <para><emphasis>Quickly create tutorial projects</emphasis> &mdash;
	    You can now create the SmallWorld and ShowOff tutorial projects from
	    the Findings Quick Search menu.</para>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </chapter>
</book>
