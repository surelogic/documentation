<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<chapter id="vouches">
  <title>Programmer Vouches</title>
  
  <para>It is possible for a programmer to vouch for any inconsistent
  analysis result within a scope of code. This is done with the
  <code>@Vouch</code> annotation. The scope of this annotation matches
  the scope of the declaration where the annotation appears. This means
  that any inconsistent result within that scope will be changed to a
  consistent result. Its use is for documentation and to quiet overly
  conservative analysis results.</para>

  <para>Use of the<code>@Vouch</code> annotation is trusted: it is not
  verified by analysis. The annotation requires a brief programmer
  explanation for the vouch being made.</para>

  <para>In the example code below an <methodname>init</methodname>
  method is used to set state, perhaps due to an API restriction about
  using constructors, and then <classname>CentralControl</classname>
  instances are safely published. A <code>@Vouch</code> annotation is
  used to explain that the init method needs to be an exception to the
  lock policy.</para>

  <programlisting>
@Region("private ControlRegion")
@RegionLock("ControlLock is lock protects ControlRegion")
public class CentralControl {
 
  private final Object lock = new Object();

  @InRegion("ControlRegion")
  private String f_id;
 
  @Vouch("Instances are thread confined until after init(String) is called.")
  public void init(String id) {
    f_id = id;
  }
 
  public String getId() {
    synchronized (lock) {
      return f_id;
    }
  }
 
  public void setId(String value) {
    synchronized (lock) {
      f_id = value;
    }
  }
}
  </programlisting>

  <para>In the example code below a <code>@Vouch</code> annotation is
  used to explain that the <classname>SmokeTest</classname> class is
  test code that is intended to have inconsistent verification
  results.</para>

  <programlisting>
@Vouch("Test code that is intentionally inconsistent with models")
public class SmokeTest extends ... {
  ...
}
  </programlisting>
</chapter>
