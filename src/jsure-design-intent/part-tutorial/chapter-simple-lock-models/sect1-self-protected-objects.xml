<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">
   
<sect1 id="self-protected-objects">
  <title>Thread-Safe and Immutable Objects</title>
      
  <para>Region aggregation, described above, is one technique that can
  be used to deal with the fact that fields
  <emphasis>reference</emphasis> objects.  But it is not always possible
  to use region aggregation to simplify reasoning about protected state
  because a field may be aliased.  In such cases, the tool may produce
  warnings that a reference of the form <code>e.f.g</code>, where
  <structfield>f</structfield> is field protected by a lock, is a
  “possibly unsafe reference to protected shared state.”  The message is
  meant to remind the programmer that although the field
  <structfield>f</structfield> is protected by a lock, this lock does
  not also protect the field <structfield>g</structfield> of the
  referenced object. (If field <structfield>f</structfield> is of class
  <classname>C</classname> and class <classname>C</classname> declares
  that <structfield>g</structfield> is protected by a lock then this
  warning is not produced: the tool instead attempts to assure that the
  appropriate lock for <structfield>g</structfield> is held.)  There are
  situations where invoking a method via <code>e.f.m()</code> will also
  produce the above warning.</para>
      
  <para>Region aggregation and lock declaration (as described above) can
  be used to suppress these warnings.  In general, we can suppress this
  warning for a field <structfield>f</structfield> that references
  objects of class <classname>C</classname> by annotating class
  <classname>C</classname> with <classname>@ThreadSafe</classname>. This
  annotation declares that no sequences of accesses (reads and writes to
  public fields, calls to public methods) may put an object of the
  annotated class into an invalid state, regardless of the interleaving
  of those actions by the runtime, and without requiring any additional
  synchronization or coordination on the part of the caller.  If a class
  is thread safe because its instances are immutable objects, the more
  specific annotation <code>@Immutable</code> is preferred.</para>
       
  <note>
    <para>In earlier versions of JSure the <code>@ThreadSafe</code> and
    <code>@Immutable</code> annotations were not assured by analysis. 
    This is no longer the case.  Both annotations are assured by
    restricting how the fields of the class are declared and annotated. 
    Please see the JavaDoc for the annotations for more details.</para>
  </note>
      
  <para>As an example, let us consider the simple rational numbers class
  below:

    <programlisting>
public class Rational {
  private final int numerator;
  private final int denominator;

  public Rational(int n, int d) { 
    numerator = n; 
    denominator = d; 
  }

  public int getNumerator() { return n; }
  public int getDenominator() { return d; } 
}
    </programlisting>
      
  Suppose we have a client class that has a lock-protected reference to
  a <classname>Rational</classname> object:
      
    <programlisting>
@RegionLock("Lock is this protects Instance")
public class C {
  &hellip;
  private Rational r;

  public synchronized doStuff() {
    int n = r.getNumerator();
    &hellip;
  }
}
    </programlisting>
  </para>
      
  <para>JSure is going to generate a warning attached to call
  <code>r.getNumerator()</code> that <computeroutput>Receiver r may be a
  shared unprotected object</computeroutput>.  That is, we may be doing
  something unsafe: accessing the state of the rational object in
  multiple threads without protection.  But in this case, we know that
  <classname>Rational</classname> objects are immutable, and thus thread
  safe, so we can both suppress this warning and use analysis to ensure
  that instances of the class remain immutable by annotating the
  <classname>Rational</classname> class:
      
    <programlisting>
<emphasis>@Immutable</emphasis>
public class Rational {
  &hellip;
}
    </programlisting>
  </para>
</sect1>
