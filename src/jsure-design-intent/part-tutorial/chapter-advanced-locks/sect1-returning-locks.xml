<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">
      
<sect1 id="returning-locks">
  <title>Returning Locks</title>
        
  <para>A method may be declared to return a particular lock using the
  <classname>@ReturnsLock</classname> annotation.  This allows an
  implementation to provide access to a lock object without revealing
  how that lock is “implemented.”  That is, the identity of the field
  that refers to the lock is kept hidden by the implementation, although
  the lock object is made accessible to clients.  The
  <classname>@ReturnsLock</classname> annotation is fully checked: it is
  checked that the method actually returns the object representing the
  lock it says it returns.  The following code fragment shows an example
  use of the <classname>@ReturnsLock</classname> annotation.</para>
        
  <programlisting>
@RegionLock("DataLock is lock protects DataRegion")
@Region("protected DataRegion")
public class C {
  // NOTE: field is private
  private final Object lock = new Object();

  <emphasis>@ReturnsLock("DataLock")</emphasis>
  protected Object getDataLock() {
    return lock;
  }
  &hellip;
  public void doSomething() {
    synchronized (<emphasis>getDataLock()</emphasis>) {
      // Access DataRegion
    }
  }
}
  </programlisting>
  
  <para>An example of this sort of thing in production code is the
  method <function>getTreeLock()</function> in the JDK class
  <classname>java.awt.Container</classname>.</para>
</sect1>
