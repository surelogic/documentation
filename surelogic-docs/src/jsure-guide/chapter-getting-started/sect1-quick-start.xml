<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../lib/docbook-xml-4.5/docbookx.dtd">

<sect1 id="quick-start">
  <title>Quick start</title>

  <para>This section will quickly get you started with JSure. It
  describes how to install JSure into your Eclipse, how to install a
  license file that allows you to use JSure.  It also describes how to 
  enable JSure assurance of a Java project, and how to examine the
  assurance results.</para>

  <sect2>
    <title>Installing Your License</title>

    <para>This section assumes that you have installed JSure. If you
    see a <guimenu>JSure</guimenu> menu item on your Eclipse main menu
    then you can assume JSure has been installed properly.</para>

    <para>You need to install a license to use JSure.  If you do not
    have a license file that was sent to you by SureLogic visit <ulink
    url="http://www.surelogic.com">http://www.surelogic.com</ulink> to
    obtain one.  To install the license select <guimenuitem>Manage
    SureLogic Licenses</guimenuitem> from the <guimenu>JSure</guimenu>
    menu as shown in <xref linkend="fig-quick-start-license-menu"/>
    </para>

    <figure id="fig-quick-start-license-menu">
      <title>The menu option to install a license for JSure</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/quick-start-license-menu.png" />
        </imageobject>
      </mediaobject>
    </figure>

	  <para>This will cause the <guilabel>Manage SureLogic
	  Licenses</guilabel> window to appear as shown in <xref
	  linkend="fig-quick-start-license-dialog-empty" />. Select
	  the <guibutton>Install from File</guibutton> button to
	  install your license if you saved it as a file on your
	  disk. Select the <guibutton>Install from
	  Clipboard</guibutton> button to install your license if you
	  copied it from an email message.</para>

    <figure id="fig-quick-start-license-dialog-empty">
      <title>The SureLogic license management dialog</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/quick-start-license-dialog-empty.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>JSure will not disrupt your Eclipse installation if a
    license for it is not installed, however, it will not allow you to
    use JSure functionality.  We will assume from this point on that
    you have installed your license.  For more information, see <xref
    linkend="sec-license-management" /></para>
  </sect2>
  
  <sect2 id="sec-quick-start-annotations">
    <title>Annotating and Assuring Your Code</title>
    
    <para>For the impatient, this section provides a
    &ldquo;bare-bones&rdquo; description of how to prepare a Java
    project for assurance by JSure.</para>
    
    <para>JSure compares Java code with models of programmer design
    intent expressed using a set of Java annotation types. The tool
    verifies model-code consistency. To use JSure with your code, your
    project must be able to reference the SureLogic annotation types
    declared in package <package>com.surelogic</package>.  The
    SureLogic annotation types are bundled together in
    <filename>promises-4.0.1.jar</filename>. This file must be on the
    build path of your project for the annotations be to used.  As
    described below, the simplest way to add this JAR file to the
    project and its build path is to allow JSure to do it for
    you.</para>

    <para>To manually add/update the JAR file select
    <menuchoice><guimenuitem>JSure</guimenuitem><guimenuitem>Add/Update
    Promises Library in Project...</guimenuitem></menuchoice> from the Eclipse main
    menu as shown below.

    <mediaobject>
      <imageobject>
	<imagedata fileref="images/quick-start-add-jar.png" />
      </imageobject>
    </mediaobject>

    This action will prompt you through the process of adding or
    updating the JAR to your project's classpath. It does not scan
    that project (as described below).</para>

    <para>You could also save the JSure JAR file to your disk and
    manually setup your project's classpath.  To do this you would
    select
    <menuchoice><guimenuitem>JSure</guimenuitem><guimenuitem>Save
    Promises Library As...</guimenuitem></menuchoice> from the Eclipse
    main menu. This command will prompt you where to save the JAR file
    to your disk.
    </para>
    
    <sect3>
      <title>Scanning Your Projects with JSure</title>
      
      <para>JSure can assure any number of projects at the same
      time time. Analysis by the tool is performed on a copy of your
      code in the background so that your work is not disrupted
      through the use of JSure.</para>

      <para>To scan one or more of your projects with JSure select
      <menuchoice><guimenuitem>JSure</guimenuitem><guimenuitem>Verify
      Project</guimenuitem></menuchoice> from the Eclipse main menu as
      shown below. Using the menu can become tedious in real tool use so
      this command is associated with the keyboard shortcut
      <keysym>Ctrl</keysym>+<keysym>Alt</keysym>+<keysym>Shift</keysym>+<keysym>V</keysym>. This
      keyboard shortcut is worth remembering to make JSure easier to
      use.

      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/quick-start-verify-menu.png" />
	</imageobject>
      </mediaobject>

      This action will open the dialog shown below.

      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/quick-start-verify-dialog.png" />
	</imageobject>
      </mediaobject>

      This dialog allows
      you to select which projects are to be analyzed by JSure</para>
      
      <para>When a project is scanned, JSure does not check to see if
      <filename>promises-4.0.1.jar</filename> is on the
      project&rsquo;s build path. Therefore make sure you add it to
      the project's you want to verify (Unless you are using Java 1.4
      in which case annotations are added as Javadoc).</para>
      
      </sect3>
      
      <sect3>
      <title>Excluding Your Test Code From a Scan</title>
      
      <para>It is possible to exclude test code from a JSure scan
      by creating a <filename>surelogic-tools.properties</filename> file at the root of each project
      that contains test code.
      
      <mediaobject>
				<imageobject>
					<imagedata fileref="images/surelogic-tools-timingframework.png" />
				</imageobject>
	  </mediaobject>
      
      For example, the screenshot above shows the use of the <filename>surelogic-tools.properties</filename>
	  to exclude the <filename>test</filename> source folder of <application>timingframework-core</application> Java project. 
      For more information on how to setup a <filename>surelogic-tools.properties</filename> file
      see <xref linkend="sec-surelogic-tool-properties-file"/>.</para>
      
    </sect3>
        
    <sect3>
      <title>Viewing Assurance Results</title>
      
      <para>JSure scans run in the background on a copy of your
      code. Therefore you may safely continue your work while a JSure
      scan is running. When a scan is completed the results are
      displayed in the <guilabel>Verification Status</guilabel> and
      <guilabel>JSure Quick Search</guilabel> views.  The easiest way
      to open this view is to switch to the <guilabel>Code
      Verification</guilabel> perspective.  The first time a scan is
      completed on any project in the workspace JSure prompts you
      about switching to the <guilabel>Code Verification</guilabel>
      perspective:
      
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/perspective-switch.png" />
          </imageobject>
        </mediaobject>

      Choosing <guibutton>Yes</guibutton> will immediately switch
      Eclipse to the perspective.  Choosing <guibutton>No</guibutton>
      will leave the current Eclipse window in whatever perspective it
      is currently in.  If you check <guibutton>Remember my
      decision</guibutton> and press <guibutton>Yes</guibutton> then
      whenever you focus verification on a project, Eclipse will
      switch to the perspective without asking you first.</para>

      <para>You can also switch to the <guilabel>Code Verification</guilabel>
      perspective by selecting <menuchoice><guimenu>JSure</guimenu>
      <guimenuitem>Open Code Verification Perspective</guimenuitem></menuchoice>.  
      See <xref linkend="fig-open-code-verification"/>.</para>
      
      <figure id="fig-open-code-verification">
        <title>Opening the Code Verification Perspective</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/open-code-verification.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The code verification perspective defaults to showing the
      views shown in <xref
      linkend="fig-code-verification-perspective"/>.</para>

      <figure id="fig-code-verification-perspective">
        <title>The Code Verification Perspective</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/code-verification-perspective.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The <guilabel>JSure Scans</guilabel> view lists all the
      scans you have run on your code. This view lets you select which
      scan to examine. Checking a scan updates all the other views
      with that scan's data. You can check a different at any
      time. This view also lets you delete older scans by selecting
      them and choosing
      <menuchoice><guimenu>Delete</guimenu></menuchoice> from the
      view's context menu.</para>

      <para>The <guilabel>Modeling Problems</guilabel> view which
      tells you if any of the annotations in your code do not make
      sense to JSure. This view lists each bad annotation so that the
      programmer can fix them. If the icon for a report in the view is <inlinegraphic fileref="images/annotation_error_proposed.gif"/>
      (note the + to the upper-right) then JSure "thinks" it can resolve the modeling problem with an automatic edit. Select the
      problem and select <menuchoice><guimenu>Annotate
      Code To Fix...</guimenu></menuchoice> from the view's context
      menu and the tool will automatically fix the modeling problem.</para>

      <para>The <guilabel>Verification Status</guilabel> view is
      divided into sections to show the results of assuring different
      classes of design intent, such as effects, and concurrency, as
      well as showing less specific suggestions and warnings.</para>

      <para>The icons shown in the <guilabel>Verification
      Status</guilabel> view have meaning. The table below is a quick
      reference about what each icon and decorator indicates to the
      tool user. This table can be brought up as a dialog in JSure by
      pressing the
      <inlinegraphic fileref="images/jsure_quick_ref_icon.gif"/>
      toolbar button in the <guilabel>Verification Status</guilabel>
      view.</para>

      <informaltable frame='none'>
	<tgroup cols='2' align='left'>
	<colspec colwidth='1in' align='center'/>
	  <thead>
	    <row>
	      <entry>Image</entry>
	      <entry>Semantics</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><inlinegraphic fileref="images/annotation.gif"/></entry>
	      <entry>An annotation or promise about the code</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/plus.gif"/></entry>
	      <entry>Consistent analysis result</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/red_x.gif"/></entry>
	      <entry>Inconsistent analysis result</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/timeout_x.gif"/></entry>
	      <entry>Inconsistent analysis result due to a user-specified execution timeout</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/plus_vouch.gif"/></entry>
	      <entry>Inconsistent analysis result vouched for by the programmer using @Vouch</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/consistent_decr.gif"/></entry>
	      <entry>Consistent verification judgment decorator</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/inconsistent_decr.gif"/></entry>
	      <entry>Inconsistent verification judgment decorator</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/trusted_decr.gif"/></entry>
	      <entry>Trusted promise decorator &ndash; the annotation is not checked by analysis</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/reddot_decr.gif"/></entry>
	      <entry>Red dot &ndash; an @Vouch or trusted promise is used in the verification proof</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/virtual_decr.gif"/></entry>
	      <entry>Virtual promise decorator &ndash; created by @Promise</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/info.gif"/></entry>
	      <entry>Informational message &ndash; a possible next modeling step</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/warning.gif"/></entry>
	      <entry>Warning message &ndash; a possible next modeling step</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/annotation_error.gif"/></entry>
	      <entry>Modeling problem &ndash; check the syntax of your annotations</entry>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable>

      <para>The <guilabel>Proposed Promises</guilabel> view lists
      annotations, also called <emphasis>promises</emphasis> about
      your code, that the tool has inferred you may want to add to your
      code. The tool uses your existing annotations and the
      verification results to generate this list of proposals. The
      tool will automatically add these to the code if you select the
      proposal and select <menuchoice><guimenu>Annotate
      Code...</guimenu></menuchoice> from the view's context
      menu. The view presents its proposals in either a tree, showing
      the proposal in the contex of the Java declaration it will annotate,
      or a simple table. The proposals listed in this view can save time in modeling,
      however, you should double
      check that the proposed promise represents actual design intent
      about your code.</para>
      
      <para>The <guilabel>Library Annotation Explorer</guilabel> view shows
      all the annotations made on library code, binary code in Jar files, via special JSure XML files that indirectly
      annotate this code.
      You can examine these annotations and use them to open the library annotation editor (an editor
      provided by JSure) to add/modify annotations on Jar files.</para>

      <para>The <guilabel>JSure Quick Search</guilabel> view allows
      you to query the scan results in an ad hoc manner. You can setup
      a series of filters on the results to focus on the particular
      scan results that are of immediate interest. Selecting a result
      highlights that result in the <guilabel>Verification
      Status</guilabel> view. Double-clicking on a result brings up
      the code location of that result in your code.</para>

      <informaltable frame='all'>
	<tgroup cols='2' align='left'>
	<colspec colwidth='4cm' align='left'/>
	  <thead>
	    <row>
	      <entry>Filter</entry>
	      <entry>Semantics</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><inlinegraphic fileref="images/analysis_result.gif"/> Analysis Result</entry>
	      <entry>Allows you to filter the results by the type of
	      analysis result reported by the tool's verifying
	      analyses. An analysis result is a finding reported by
	      one of the JSure tool's verifying analyses. These
	      results form the basis used to prove that an annotation
	      is consistent, i.e., a verification judgment about a
	      promise. This filter could be used to quickly find all
	      inconsistent analysis results so that you can work to
	      eliminate them.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/annotation.gif"/> Annotation</entry>
	      <entry>Allows you to filter the results by
	      annotation. This filter could be used to quickly find
	      all <classname>@RegionLock</classname> annotations in
	      your code.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/class.gif"/> Java Class</entry>
	      <entry>Allows you to filter the results to a particular set of Java classes.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/package.gif"/> Java Package</entry>
	      <entry>Allows you to filter the results to a particular set of Java packages.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/project.gif"/> Project</entry>
	      <entry>Allows you to filter the results to a particular set of Eclipse projects.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/verification_result.gif"/> Verification Judgment</entry>
	      <entry>Allows you to filter the results by the
	      verification judgment on an annotation. This filter
	      could be used to find all consistent promises or find
	      promises with a "red-dot" (contingent verification
	      judgments).</entry>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable>

      <para>The <guilabel>JSure Quick Search</guilabel> view is very
      flexible and allows you to chain many filters together before
      you <menuchoice><guimenu>Show</guimenu></menuchoice> a list of
      results. You can also save queries that you find useful via the
      toolbar at the bottom of the view.</para>

      <para>The <guilabel>JSure Historical Source</guilabel> view is
      shown to the right of the Java editor at the bottom of the
      perspective. This view shows you what your source code looked
      like when JSure scanned your code. Because the scan you are
      examining may have been run at any time in the past, your may
      have changed since that time. This view helps you understand the
      tool results by showing the code as it was when the scan was
      run.</para>
    </sect3>
  </sect2> 
</sect1>
