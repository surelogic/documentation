<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../lib/docbook-xml-4.5/docbookx.dtd">

<chapter id="reference"
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Reference</title>
  <section>
    <title>The JSure Menu</title>
    
    <para>The <guimenu>JSure</guimenu> menu, see <xref linkend="fig-jsure-menu"/>, appears
    as an item on the Eclipse workspace main menu. This menu provides
    direct access to common JSure commands.</para>

    <figure id="fig-jsure-menu">
      <title>The JSure menu</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/jsure-menu.png"/></imageobject>
      </mediaobject>
    </figure>
    
    <para>The commands on the <guimenu>JSure</guimenu> main menu are
    
      <itemizedlist>
        <listitem>
          <formalpara>
            <title><guimenuitem><inlinegraphic fileref="images/jsure_verify.gif"/> Verify</guimenuitem></title>
            <para>This command allows the user to choose which project
            should be assured by JSure. It is also available by pressing the
            <inlinegraphic fileref="images/jsure_verify.gif"/> icon on the Eclipse 
            toolbar. A dialog is opened to allow the
            user to select which projects to analyze, as seen in <xref
            linkend="fig-verify-project-dialog"/>. This dialog remembers your prior selection and includes
            projects selected in the <guilabel>Package Explorer</guilabel>.</para>
          </formalpara>
          
          <figure id="fig-verify-project-dialog">
            <title><guimenuitem>The Verify dialog box</guimenuitem></title>
            <mediaobject>
              <imageobject><imagedata fileref="images/verify-project-dialog.png"/></imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <formalpara>
            <title><guimenuitem><inlinegraphic fileref="images/jar.gif"/> Add/Update Promises Library</guimenuitem></title>
            <para>This command lets the user add or update the
            promises library for a project. The dialog shown in <xref
            linkend="fig-add-update-promises-library-window"/> is opened to
            allow the user to select the set of projects to update.
            For each selected project, this command copies the <code>promises-</code><emphasis>version</emphasis><code>.jar</code>
            into the root of the project and adds the JAR to the project's classpath.</para>
          </formalpara>

	      <figure id="fig-add-update-promises-library-window">
            <title><guimenuitem>The Add/Update Promises Library dialog box</guimenuitem></title>
            <mediaobject>
              <imageobject><imagedata fileref="images/add-update-promises-library-dialog.png"/></imageobject>
            </mediaobject>
          </figure>
        </listitem>
        
         <listitem>
          <formalpara>
            <title><guimenuitem><inlinegraphic fileref="images/open_xml_type.gif"/> Open Library Annotations&hellip;</guimenuitem></title>
            <para>This command, similar to the Eclipse Java <guilabel>Open Type</guilabel> search, allows the
            tool user to open any type in the JSure library annotation editor. 
            A dialog, shown in
            <xref linkend="fig-save-promises-library-as-dialog"/>, is opened to let the user to
            search for the type that they want to open in the library annotation editor. This command is
            most useful for opening types that have no annotations and, therefore, are not listed in
            the <guilabel>Library Annotation Explorer</guilabel> view.</para>
          </formalpara>
          
          <figure id="fig-open-library-annotations-dialog">
            <title><guimenuitem>The Open Library Annotations search dialog</guimenuitem></title>
            <mediaobject>
              <imageobject><imagedata fileref="images/open-library-annotations-dialog.png"/></imageobject>
            </mediaobject>
          </figure>
        </listitem>
        
        <listitem>
          <formalpara>
            <title><guimenuitem><inlinegraphic fileref="images/jsure_logo.gif"/> Open Code Verification Perspective</guimenuitem></title>
            <para>This menu choice opens the <guilabel>Code
            Verification</guilabel> perspective. This perspective is
            useful for examining the JSure assurance results;
            see <xref linkend="sec-code-verification-perspective"/>. This
            perspective may also be opened via the normal Eclipse menus
            and toolbars for perspectives.</para>
          </formalpara>
        </listitem>
        
         <listitem>
          <formalpara>
            <title><guimenuitem><inlinegraphic fileref="images/file_drum.gif"/> Import Ant/Maven Scan&hellip;</guimenuitem></title>
            <para>This command lets the user load a JSure scan made with the Ant task (in the future Maven).
            For more information on using Ant please see <xref linkend="sec-ant-task"/>.
            The dialog shown in <xref
            linkend="fig-load-external-scan-dialog"/> is opened to
            allow the user to select the scan Zip file to load into the Eclipse workspace.</para>
          </formalpara>

        <figure id="fig-load-external-scan-dialog">
            <title><guimenuitem>The Import JSure Ant/Maven Scan dialog box</guimenuitem></title>
            <mediaobject>
              <imageobject><imagedata fileref="images/load-external-scan-dialog.png"/></imageobject>
            </mediaobject>
          </figure>
        </listitem>

        <listitem>
          <formalpara>
            <title><guimenuitem><inlinegraphic fileref="images/jar_saveas.gif"/> Save Promises Library As&hellip;</guimenuitem></title>
            <para>This command copies the <code>promises-</code><emphasis>version</emphasis><code>.jar</code> to the disk. A dialog, shown in
            <xref linkend="fig-save-promises-library-as-dialog"/>, is opened to let the user to
            specify the directory the JAR file should be placed within. This command is useful if you need, for any reason,
            to manually add the JSure annotation JAR file to a codebase.</para>
          </formalpara>
          
           <figure id="fig-save-promises-library-as-dialog">
            <title><guimenuitem>The Save Promises Library dialog box</guimenuitem></title>
            <mediaobject>
              <imageobject><imagedata fileref="images/save-promises-library-as-dialog.png"/></imageobject>
            </mediaobject>
          </figure>
        </listitem>
        
        <listitem>
          <formalpara>
            <title><guimenuitem><inlinegraphic fileref="images/file_saveas.gif"/> Save Documentation As&hellip;</guimenuitem></title>
            <para>This command copies the <code>jsure-html-docs.zip</code> to the disk. A dialog, shown in
            <xref linkend="fig-save-html-docs-as-dialog"/>, is opened to let the user to
            specify the directory the Zip file should be placed within. This command is useful if you want to
            open the JSure documentation in your web browser. This file contains HTML versions of all the
            JSure documentation also in your Eclipse help system. Many tool users prefer using a browser
            for JSure documentation rather than the build-in Eclipse help system (each of search, and so on).</para>
          </formalpara>
          
           <figure id="fig-save-html-docs-as-dialog">
            <title><guimenuitem>The Save Documentation dialog box</guimenuitem></title>
            <mediaobject>
              <imageobject><imagedata fileref="images/save-html-docs-as-dialog.png"/></imageobject>
            </mediaobject>
          </figure>
        </listitem>
        
        
        <listitem>
          <formalpara>
            <title><guimenuitem><inlinegraphic fileref="images/import.gif"/> Install Tutorial Projects</guimenuitem></title> <para>This
            command opens a dialog to allow the user to import one or more tutorial projects into
            their workspace and open the JSure help to the step by
            step tutorials.  For more information please see <xref
            linkend="tutorials"/>.</para>
          </formalpara>
        </listitem>
  
        <listitem>
          <formalpara>
            <title><guimenuitem>Send Tip for Improvement</guimenuitem></title>
            <para>This command opens a dialog to allow entry of a
            suggestion by the user to improve the JSure tool. For more
            information please see <xref
            linkend="sec-bugs-and-tips"/>.</para>
          </formalpara>
        </listitem>
  
        <listitem>
          <formalpara>
            <title><guimenuitem>Send Problem Report</guimenuitem></title>
            <para>This command opens a dialog to allow entry of a problem
            report by the user about the JSure tool. For more information
            please see <xref linkend="sec-bugs-and-tips"/>.</para>
          </formalpara>
        </listitem>
        
        <listitem>
          <formalpara>
            <title><guimenuitem>Send Library Annotation Changes</guimenuitem></title>
            <para>This command opens a dialog to allow you to send any changes to
            library annotations you have made to SureLogic. The dialog allows you
            to preview and edit what is being sent to SureLogic. This menu item is
            the best way to propose changes to the shipped set of Java standard library
            annotations. If you do not have an Internet connection you can print the message
            and fax it to SureLogic or save the message as a file and email it.</para>
          </formalpara>
        </listitem>
  
        <listitem>
          <formalpara>
            <title><guimenuitem><inlinegraphic fileref="images/sl.gif"/> Manage SureLogic Licenses</guimenuitem></title>
            <para>This command opens the SureLogic license management
            dialog. This dialog allows the user to install, view, and
            uninstall licenses for JSure and other SureLogic tools. For
            more information see <xref linkend="sec-license-management"
            />.</para>
          </formalpara>
        </listitem>          
      </itemizedlist>
    </para>
  </section>

  <section id="sec-code-verification-perspective">
    <title>The Code Verification perspective</title>
    
    <para>The <guilabel>Code Verification</guilabel>
	perspective organizes the Eclipse
	workbench to show views which will help you to interact with
	tool findings.</para>

	<mediaobject>
		<imageobject>
			<imagedata fileref="images/code-verification-perspective.png" />
		</imageobject>
	</mediaobject>
	
	<para>Each of the views shown in the screenshot above is discussed in the following sections. These views include
		<itemizedlist>
		  <listitem>
		    <para>The <guilabel>JSure Scans</guilabel> view described in <xref linkend="jsure-scans-view" /></para>
		  </listitem>
		  <listitem>
		    <para>The <guilabel>Modeling Problems</guilabel> view described in <xref linkend="modeling-problems-view" /></para>
		  </listitem>
		  <listitem>
		    <para>The <guilabel>Verification Status</guilabel> view described in <xref linkend="verification-status-view" /></para>
		  </listitem>
		  <listitem>
		    <para>The <guilabel>Verification Explorer</guilabel> view described in <xref linkend="verification-explorer-view" /></para>
		  </listitem>
		  <listitem>
		    <para>The <guilabel>Analysis-Enabled Metrics</guilabel> view described in <xref linkend="analysis-enabled-metrics-view" /></para>
		  </listitem>
		  <listitem>
		    <para>The <guilabel>Proposed Annotation</guilabel> view described in <xref linkend="proposed-annotation-view" /></para>
		  </listitem>
		  <listitem>
		    <para>The <guilabel>Library Annotation Explorer</guilabel> view described in <xref linkend="library-annotation-explorer-view" /></para>
		  </listitem>
		  <listitem>
		    <para>The <guilabel>XML Library Annotation</guilabel> editor described in <xref linkend="xml-library-annotation-editor" /></para>
		  </listitem>
		  <listitem>
		    <para>The <guilabel>JSure Quick Search</guilabel> view described in <xref linkend="jsure-quick-search-view" /></para>
		  </listitem>
		  <listitem>
		    <para>The <guilabel>JSure Historical Source</guilabel> view described in <xref linkend="jsure-historical-source-view" /></para>
		  </listitem>
		</itemizedlist>
	</para>
    
    <section>
      <title>Switching to the Perspective</title>
      
      <para>The <guilabel>Code Verification</guilabel> perspective can be enabled
      in several ways:
        <itemizedlist>
          <listitem>
            <para>By selecting <menuchoice><guimenu>JSure</guimenu>
            <guimenuitem>Open Code Verification
            Perspective</guimenuitem></menuchoice>.
            <mediaobject>
                <imageobject>
                  <imagedata fileref="images/open-code-verification.png" />
                </imageobject>
              </mediaobject>
            </para>
          </listitem>
          
          <listitem>
            <para>By choosing to switch to the perspective when focusing
            verification on a project:
              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/perspective-switch.png" />
                </imageobject>
              </mediaobject>
            </para>
          </listitem>
          
          <listitem>
            <para>By selecting <menuchoice><guimenu>Window</guimenu>
            <guisubmenu>Open Perspective</guisubmenu>
            <guimenuitem>Other&hellip;</guimenuitem></menuchoice>, and
            then choosing <guilabel>Code Verification</guilabel> from
            the <guilabel>Open Perspective</guilabel> dialog box.  Or by
            using any other standard Eclipse mechanism to switch
            perspectives, such as clicking the the perspective&rsquo;s
            icon (<guiicon><inlinegraphic
            fileref="images/jsure_logo.gif"/></guiicon>) in the shortcut
            bar.</para>
          </listitem>          
        </itemizedlist>
      </para>
    </section>

	<section id="jsure-scans-view">
		<title>The JSure Scans view</title>

		<para>The <guilabel>JSure Scans</guilabel> view, as shown in <xref
      linkend="fig-jsure-scans-view"/>, lists the scans performed by the tool. One and only scan in this
      view can be checked. The checked scan is called the <emphasis>scan of focus</emphasis>. Results
      from the scan of focus are displayed in all the other JSure views.</para>
		
	<figure id="fig-jsure-scans-view">
        <title>The <guilabel>JSure Scans</guilabel> view</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/jsure-scans-view.png"/></imageobject>
        </mediaobject>
      </figure>

	<para>
		Each row in the table represents a scan. The table displays has the
		following columns:
		<itemizedlist>
			<listitem>
			<formalpara><title>Time</title><para>The time the scan occurred.</para></formalpara>
			</listitem>
			<listitem>
			<formalpara><title>Size</title><para>The size of the scan data on your disk.</para></formalpara>
			</listitem>
			<listitem>
			<formalpara><title>Projects Examined</title><para>A comma separated list of the projects that were scanned.</para></formalpara>
			</listitem>
			<listitem>
			<formalpara><title>Exclusion Specification (surelogic-tools.properties)</title><para>The exclusions for source folders and packages
			from the <filename>surelogic-tools.properties</filename> file located at the project's root. This file is optional and
			its format is described in <xref linkend="sec-surelogic-tool-properties-file"/>. Several of these files will be combined if multiple projects are scanned.</para></formalpara>
			</listitem>
		</itemizedlist>

	</para>
      
       <para>The view&rsquo;s toolbar has three command icons:
        <itemizedlist>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/refresh.gif"/></guiicon></title>
              <para>This button scans the disk and refreshes the list of JSure scans. This can be
              useful if an Ant scan was added to the JSure scan directory.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/jsure_re_verify.gif"/></guiicon></title>
              <para>This button "re-verifies" selected (not the checked) scan. This
              allows you to easily start a new scan on a set of projects that you have previously scanned.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/red_x.gif"/></guiicon></title>
              <para>This button deletes the selected scans from the disk.</para>
            </formalpara>            
          </listitem>

        </itemizedlist>
      </para>
      
       <figure id="fig-jsure-scans-view-menu">
        <title>The <guilabel>JSure Scans</guilabel> view menu</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/jsure-scans-view-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>The view&rsquo;s menu has three commands; see <xref
      linkend="fig-jsure-scans-view-menu"/>. These commands match the toolbar commands described above.</para>
      
      <figure id="fig-jsure-scans-view-context-menu">
        <title>The <guilabel>JSure Scans</guilabel> context menu</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/jsure-scans-view-context-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
    <para>The view&rsquo;s context menu has three commands; see <xref
      linkend="fig-jsure-scans-view-context-menu"/>:
    <itemizedlist>
	<listitem>
	  <formalpara>
	    <title><guiicon>Select to View Results</guiicon></title>
	    <para>Selecting this menu item causes the selected scan to be checked and become the <emphasis>scan of focus</emphasis>.
	    This menu choice is only enabled when a single scan is selected and it is
	    not the scan of focus.</para>
	  </formalpara>
	</listitem>
    <listitem>
      <formalpara>
        <title><guiicon><inlinegraphic fileref="images/jsure_re_verify.gif"/> Re-Verify</guiicon></title>
        <para>This button "re-verifies" selected (not the checked) scan. This
        allows you to easily start a new scan on a set of projects that you have previously scanned.
        This menu choice is only enabled when a single scan is selected.</para>
      </formalpara>            
     </listitem>
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/red_x.gif"/> Delete</guiicon></title>
	    <para>Selecting this menu item deletes the selected scans from the disk.</para>
	  </formalpara>
	</listitem>
    </itemizedlist>
      </para>      
	</section>
	
	    <section id="modeling-problems-view">
      <title>The Modeling Problems view</title>

      <para>The <guilabel>Modeling Problems</guilabel> view, as shown in <xref
      linkend="fig-modeling-problems-view"/>, shows any annotations
      that are not well-formed. This means that they have syntax
      errors or other problems such as referencing models that are not
      defined or encapsulation/visibility issues.</para>
      
      <figure id="fig-modeling-problems-view">
        <title>The <guilabel>Modeling Problems</guilabel> view</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/modeling-problems-view.png"/></imageobject>
        </mediaobject>
      </figure>

	<para>The background of the <guilabel>Modeling Problems</guilabel> view changes to yellow if the
	selected scan has any modeling problems. This highlights the view to the tool user. The background
	is changed back to normal when no modeling problems exist in the selected scan.</para>
	
	<para>Double-clicking on a modeling problem will open the Java editor and
	the <guilabel>JSure Historical Source</guilabel> view to the problem annotation.
	This same action can be accomplished by selecting <guilabel>Open</guilabel> from the view context menu.
	If the problem is in a binary the XML Library Annotation Editor can be opened by
	selecting <guilabel>Open Library Annotation Editor</guilabel>
	from the view context menu. This choice is only available for modeling problems about binaries.</para>
	
	<para>If the icon for a reported modeling problem is <inlinegraphic fileref="images/annotation_error_proposed.gif"/>
      (note the + to the upper-right) then JSure "thinks" it can resolve the modeling problem
      with an automatic edit. Select one or more modeling problems and choose
      <menuchoice><guimenu>Annotate Code To Fix...</guimenu></menuchoice> from the view's
      context menu (or press <inlinegraphic fileref="images/annotation_proposed.gif"/> on the view's toolbar)
      and the tool will automatically fix the modeling problem as shown in <xref
      linkend="fig-modeling-problems-view-context-menu"/>. The edit is previewed before
      it is made to the code. Carefully examine the proposed edit to your code to ensure it reflects your design.</para>
      
      <figure id="fig-modeling-problems-view-context-menu">
        <title>The <guilabel>Modeling Problems</guilabel> view context menu</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/modeling-problems-view-context-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>Selecting a problem and choosing <menuchoice><guimenu>Copy</guimenu></menuchoice>
      from the view's context menu will copy the text of the problem to the clipboard so
      that it can be pasted into an email or any other program.</para>

       <para>The view&rsquo;s toolbar has six command icons:
        <itemizedlist>
        
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/></guiicon></title>
              <para>This button collapses all the nodes in the Java declaration tree.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/annotation_proposed.gif"/></guiicon></title>
              <para>This button automatically edits the code to try and resolve the selected modeling problems.
              The edit is previewed before it is made to the code. Not all modeling problems have
              automatic fixes. If the problem's icon is <inlinegraphic fileref="images/annotation_error_proposed.gif"/> it
              has an automatic fix. If the problem's icon is <inlinegraphic fileref="images/annotation_error.gif"/>
              it must be fixed manually.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/changelog.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not differences are highlighted in the view. If a
              problem has changed its background is painted in white.
              In addition, a trail of <inlinegraphic fileref="images/delta_decr.gif"/> images appear from the root of the
              tree to any problem that has changed.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/changelog_only.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not unchanged problems are displayed in this view. When this button is
              selected only problems with differences are displayed in the view. By default this is not selected.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/java_comp_unit.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not problems not about
              Java source code are displayed in this view. When this button is
              selected only problems about source code are displayed. By default this is not selected.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/filter.gif"/></guiicon></title>
              <para>This button opens the <guilabel>Uninteresting Package Filtering</guilabel> preference page. The filters defined by this
              preference filter modeling problems from this view. This can be used to filter out problems that you do not
              care to have reported, for example, about a library that you include in your codebase. For more information
              about this preference page see <xref linkend="prefs-uninteresting-package-filtering"/>.</para>
            </formalpara>            
          </listitem>

        </itemizedlist>
      </para>
      
       <figure id="fig-modeling-problems-view-menu">
        <title>The <guilabel>Modeling Problems</guilabel> view menu</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/modeling-problems-view-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
            <para>The view&rsquo;s menu has six commands; see <xref
      linkend="fig-jsure-scans-view-menu"/>:
      <itemizedlist>
      
      	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/> Collapse All</guiicon></title>
	    <para>Selecting this menu item collapses all the nodes in the Java declaration tree.</para>
	  </formalpara>            
	</listitem>
	
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/annotation_proposed.gif"/> Annotate Code To Fix...</guiicon></title>
	    <para>Selecting this menu item automatically edits the code to try and resolve the selected modeling problem.
	    The edit is previewed before it is made to the code. Not all modeling problems have
              automatic fixes. If the problem's icon is <inlinegraphic fileref="images/annotation_error_proposed.gif"/> it has an automatic fix. If
              the problem's icon is <inlinegraphic fileref="images/annotation_error.gif"/> it must be fixed manually.</para>
	  </formalpara>            
	</listitem>
	
		     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/changelog.gif"/> Highlight Differences</guiicon></title>
         <para>Toggling this menu item controls whether or not differences are highlighted in the view. If a
         problem has changed its background is painted in white.
         In addition, a trail of <inlinegraphic fileref="images/delta_decr.gif"/> images appear from the root of the
         tree to any problem that has changed.</para>
       </formalpara>            
     </listitem>

     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/changelog_only.gif"/> Show Only Differences</guiicon></title>
         <para>Toggling this menu item controls whether or not unchanged problems are displayed in this view. When this menu item is
         checked only problems with differences are displayed in the view. By default this is not selected.</para>
       </formalpara>            
     </listitem>

     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/java_comp_unit.gif"/> Show Only From Source</guiicon></title>
         <para>Toggling this button controls whether or not problems not about
              Java source code are displayed in this view. When this button is
              selected only problems about source code are displayed. By default this is not selected.</para>
       </formalpara>            
     </listitem>
     
	 <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/filter.gif"/> Modeling Problem Filtering...</guiicon></title>
              <para>Selecting this menu item opens the <guilabel>Uninteresting Package Filtering</guilabel>
              preference page. The filters defined by this
              preference filter modeling problems from this view. This can be used to filter out problems that you do not
              care to have reported, for example, about a library that you include in your codebase. For more information
              about this preference page see <xref linkend="prefs-uninteresting-package-filtering"/>.</para>
            </formalpara>            
          </listitem>
      </itemizedlist>
      </para> 
    </section>
    
    <section id="verification-status-view">
      <title>The Verification Status view</title>

      <para>The <guilabel>Verification Status</guilabel> view displays
      the JSure assurance results in a tree form; see <xref
      linkend="fig-status-view"/>.  The results are grouped by
      category, for example <guilabel>Effects</guilabel>,
      <guilabel>Concurrency</guilabel>,
      <guilabel>Uniqueness</guilabel>, and <guilabel>Thread
      effects</guilabel>. There is also a special category for
      warnings and informational results <guilabel>Suggestions and
      warnings</guilabel>. The iconography used in this view is summarized in <xref
      linkend="fig-iconography"/>.</para>
      
      <figure id="fig-status-view">
        <title>The <guilabel>Verification Status</guilabel> view</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/status-view.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>Clicking on a result in the <guilabel>Verification Status</guilabel> view highlights
      the code associated with that result in the Java editor and the <guilabel>JSure Historical Source</guilabel> view.
      This view also notes the differences between the current scan and the previous scan (in its far right column).</para>
      
      <para>The view&rsquo;s toolbar has seven command icons:
        <itemizedlist>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/></guiicon></title>
              <para>This button collapses all the nodes in the result trees.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/jsure_quick_ref_icon.gif"/></guiicon></title>
              <para>This button displays a quick reference card to the
              user about what the iconography used in the
              <guilabel>Verification Status</guilabel> view
              means.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/jsure_model_problems_exist.gif"/></guiicon></title>
              <para>This button gives an indication in the
              <guilabel>Verification Status</guilabel> view
              that modeling problems exist in the project. It is intended to be helpful when the user is using non-JSure
              perspectives, such as the Java perspective, where it can be difficult to know if any modeling problems
              exist in scanned projects if only this view is opened. The icon is disabled if no modeling problems
              exist&mdash;as shown in the screenshot above.
              It is bright yellow when modeling problems do exist&dash;as shown at the start of this paragraph.</para>
            </formalpara>    
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/java_sort.gif"/></guiicon></title>
              <para>Toggling this on sorts leaf nodes of the tree by project name, package name, type name, and line number.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/alpha_sort.gif"/></guiicon></title>
              <para>Toggling this button on sorts leaf nodes of the tree alphabetically by their message.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/changelog.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not differences are highlighted in the view. If a
              result has changed its background is painted in light yellow (as shown in the image above).
              In addition, a trail of <inlinegraphic fileref="images/delta_decr.gif"/> images appear from the root of the
              tree to any result that has changed.</para>
            </formalpara>            
          </listitem>
          
         <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/changelog_only.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not unchanged results are displayed in this view. When this button is
              selected only results with differences are displayed in the view. By default this is not selected.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/suggestions_warnings.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not information and warning hints are 
              displayed in the view.</para>
            </formalpara>            
          </listitem>

        </itemizedlist>
      </para>

      <figure id="fig-status-view-menu">
        <title>The <guilabel>Verification Status</guilabel> view menu</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/status-view-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>The view&rsquo;s menu has six commands; see <xref
      linkend="fig-status-view-menu"/>:
      <itemizedlist>
	<listitem>
	  
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/> Collapse All</guiicon></title>
	    <para>Selecting this menu item collapses all the nodes in the result trees.</para>
	  </formalpara>            
	</listitem>
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/jsure_quick_ref_icon.gif"/> Show Iconography Quick Reference Card</guiicon></title>
	    <para>Selecting this menu item displays a quick reference
	    card to the user about what the iconography used in the
	    <guilabel>Verification Status</guilabel> view
	    means.</para>
	  </formalpara>
	</listitem>
	<listitem>
         <formalpara>
           <title><guiicon><inlinegraphic fileref="images/java_sort.gif"/> Sort Contents By Java Location</guiicon></title>
           <para>Selecting this menu item sorts leaf nodes of the tree by project name, package name, type name, and line number.</para>
         </formalpara>            
       </listitem>

       <listitem>
         <formalpara>
           <title><guiicon><inlinegraphic fileref="images/alpha_sort.gif"/> Sort Contents Alphabetically</guiicon></title>
           <para>Selecting this menu item sorts leaf nodes of the tree alphabetically by their message.</para>
         </formalpara>            
       </listitem>
       
       <listitem>
         <formalpara>
           <title><guiicon><inlinegraphic fileref="images/changelog.gif"/> Highlight Differences</guiicon></title>
           <para>Toggling this menu item controls whether or not differences are highlighted in the view. If a
           result has changed its background is painted in light yellow (as shown in the image above).
           In addition, a trail of <inlinegraphic fileref="images/delta_decr.gif"/> images appear from the root of the
           tree to any result that has changed.</para>
         </formalpara>            
       </listitem>
       
       <listitem>
         <formalpara>
           <title><guiicon><inlinegraphic fileref="images/changelog_only.gif"/> Show Only Differences</guiicon></title>
           <para>Toggling this menu item controls whether or not unchanged results are displayed in this view. When this menu item is
           checked only results with differences are displayed in the view. By default this is not selected.</para>
         </formalpara>            
       </listitem>
       
		<listitem>
		  <formalpara>
		    <title><guiicon><inlinegraphic fileref="images/suggestions_warnings.gif"/> Show Information/Warning Hints</guiicon></title>
		    <para>Toggling this menu item controls whether or not information and warning hints are 
		    displayed in the view.</para>
		  </formalpara>
		</listitem>
      </itemizedlist>
      </para>      
    </section>
    
	<section id="verification-explorer-view">
	    <title>The Verification Explorer view</title>
	    
	    <para>The <guilabel>Verification Explorer</guilabel>
			view, as shown in <xref linkend="fig-verification-explorer-view" />, shows all annotations
			that the current scan found in the source code or in XML about libraries and frameworks.
			It can also show analysis results. The major difference between this view and the <guilabel>Verification Status</guilabel>
			view is that this view shows results in the context of the code, while the <guilabel>Verification Status</guilabel>
			displays results by their verification proof context.
			The view contents change when the selected scan changes. This view is useful to determine
			if an annotation existed and was recognized by the tool during a particular scan.
			The iconography used in this view is summarized in <xref linkend="fig-iconography"/>.
		</para>

		<figure id="fig-verification-explorer-view">
			<title>The <guilabel>Verification Explorer</guilabel> view</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/verification-explorer-view.png" />
				</imageobject>
			</mediaobject>
		</figure>
		
		 <para>The view&rsquo;s toolbar has nine command icons:
        <itemizedlist>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/></guiicon></title>
              <para>This button collapses all the nodes in the Java declaration tree.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/jsure_quick_ref_icon.gif"/></guiicon></title>
              <para>This button displays a quick reference card to the
              user about what the iconography used in the
              <guilabel>Verification Explorer</guilabel> view
              means.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/jsure_model_problems_exist.gif"/></guiicon></title>
              <para>This button gives an indication in the
              <guilabel>Verification Explorer</guilabel> view
              that modeling problems exist in the project. It is intended to be helpful when the user is using non-JSure
              perspectives, such as the Java perspective, where it can be difficult to know if any modeling problems
              exist in scanned projects if only this view is opened. The icon is disabled if no modeling problems
              exist&mdash;as shown in the screenshot above.
              It is bright yellow when modeling problems do exist&dash;as shown at the start of this paragraph.</para>
            </formalpara>    
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/changelog.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not differences are highlighted in the view. If a
              result has changed its background is painted in light yellow (as shown in the image above). If a
              result is obsolete its background is painted in light red.
              In addition, a trail of <inlinegraphic fileref="images/delta_decr.gif"/> images appear from the root of the
              tree to any result that has changed.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/changelog_only.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not unchanged results are displayed in this view. When this button is
              selected only results with differences are displayed in the view. By default this is not selected.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/changelog_old_scan_only.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not obsolete results only in the prior scan are displayed. When this button is
              selected obsolete results from the last scan are displayed in the view. By default this is not selected.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/java_comp_unit.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not results not directly or indirectly derived from
              Java source code are displayed in this view. When this button is
              selected only results directly or indirectly related to source code are displayed. By default this is selected.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/analysis_result.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not analysis results are displayed in this view. When this button is
              selected analysis results, as well as annotations, are displayed. By default this is not selected.</para>
            </formalpara>            
          </listitem>
        
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/suggestions_warnings.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not information and warning hints are 
              displayed in the view.</para>
            </formalpara>            
          </listitem>
        </itemizedlist>
      </para>

      <figure id="fig-verification-explorer-menu">
        <title>The <guilabel>Verification Explorer</guilabel> view menu</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/verification-explorer-view-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>The view&rsquo;s menu has eight commands; see <xref
      linkend="fig-verification-explorer-menu"/>:
      <itemizedlist>
	<listitem>
	  
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/> Collapse All</guiicon></title>
	    <para>Selecting this menu item collapses all the nodes in the Java declaration tree.</para>
	  </formalpara>            
	</listitem>
	
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/jsure_quick_ref_icon.gif"/> Show Iconography Quick Reference Card</guiicon></title>
	    <para>Selecting this menu item displays a quick reference
	    card to the user about what the iconography used in the
	    <guilabel>Verification Explorer</guilabel> view
	    means.</para>
	  </formalpara>
	</listitem>

     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/changelog.gif"/> Highlight Differences</guiicon></title>
         <para>Toggling this menu item controls whether or not differences are highlighted in the view. If a
         result has changed its background is painted in light yellow (as shown in the image above). If a
         result is obsolete its background is painted in light red.
         In addition, a trail of <inlinegraphic fileref="images/delta_decr.gif"/> images appear from the root of the
         tree to any result that has changed.</para>
       </formalpara>            
     </listitem>

     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/changelog_only.gif"/> Show Only Differences</guiicon></title>
         <para>Toggling this menu item controls whether or not unchanged results are displayed in this view. When this menu item is
         checked only results with differences are displayed in the view. By default this is not selected.</para>
       </formalpara>            
     </listitem>

     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/changelog_old_scan_only.gif"/> Show Obsolete Results</guiicon></title>
         <para>Toggling this menu item controls whether or not obsolete results only in the prior scan are displayed. When this menu item is
         checked obsolete results from the last scan are displayed in the view. By default this is not selected.</para>
       </formalpara>            
     </listitem>
     
     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/java_comp_unit.gif"/> Show Only Results Derived From Source</guiicon></title>
         <para>Toggling this menu item controls whether or not results not directly or indirectly derived from
         Java source code are displayed in this view. When this menu item is
         checked only results directly or indirectly related to source code are displayed. By default this is selected.</para>
       </formalpara>            
     </listitem>
     
     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/analysis_result.gif"/> Show Analysis Results</guiicon></title>
         <para>Toggling this menu item controls whether or not analysis results are displayed in this view. When this menu item is
         checked analysis results, as well as annotations, are displayed. By default this is not selected.</para>
       </formalpara>            
     </listitem>

	
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/suggestions_warnings.gif"/> Show Information/Warning Hints</guiicon></title>
	    <para>Toggling this menu item controls whether or not information and warning hints are 
	    displayed in the view.</para>
	  </formalpara>
	</listitem>
	
      </itemizedlist>
      </para>
	    
	</section>
	
	
	<section id="analysis-enabled-metrics-view">
	    <title>The Analysis-Enabled Metrics view</title>
	    
	    <para>The <guilabel>Analysis-Enabled Metrics</guilabel>
			view, as shown in <xref linkend="fig-analysis-enabled-metrics-view" />, shows metrics collected
			during each scan of a codebase. These metrics can help answer questions about how much has been
			done to the codebase, how large it is, the scan performance, and so on.
		</para>
		
		<para>Most tabs are interactive and show aggregate, scan-level, information as well as detailed counts on individual files.
		In particular, a threshold slider allows metric values above or below a threshold to be highlighted in the view. Only rows with
		data are highlighted&mdash;summary rows are not, however, a
		trail of <inlinegraphic fileref="images/asterisk.gif"/> decorators to the lower left of the row's image leads
		to highlighted rows in any tree-table displayed
		by this view.</para>

		<figure id="fig-analysis-enabled-metrics-view">
			<title>The <guilabel>Analysis-Enabled Metrics</guilabel> view</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/analysis-enabled-metrics-view.png" />
				</imageobject>
			</mediaobject>
		</figure>
		
		 <para>The view&rsquo;s toolbar has three command icons:
        <itemizedlist>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/></guiicon></title>
              <para>This button collapses all the nodes in the metric tab being displayed.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/alpha_sort.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not the nodes in the metric
                  tab being shown are sorted in alphabetical order.
                  When it is not pressed in tabs are sorted by the magnitude of the metric being
                  displayed in the tab.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/filter.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not nodes in the metric tab being
              shown are filtered by a threshold. Typically, nodes are highlighted if they
              exceed the metric threshold, but this toggle allows only those that exceed the threshold to be shown.</para>
            </formalpara>    
          </listitem>
          
        </itemizedlist>
      </para>
      
            <figure id="fig-analysis-enabled-metrics-menu">
        <title>The <guilabel>Analysis-Enabled Metrics</guilabel> view menu</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/analysis-enabled-metrics-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>The view&rsquo;s menu has three commands; see <xref
      linkend="fig-analysis-enabled-metrics-menu"/>:
      <itemizedlist>
	<listitem>
	  
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/> Collapse All</guiicon></title>
	    <para>Selecting this menu item collapses all the nodes in the Java declaration tree.</para>
	  </formalpara>            
	</listitem>
	
    <listitem>
         <formalpara>
           <title><guiicon><inlinegraphic fileref="images/alpha_sort.gif"/> Sort Contents Alphabetically</guiicon></title>
           <para>Toggling this menu item controls whether or not the nodes in the metric
               tab being shown are sorted in alphabetical order.
               When it is unchecked tabs are sorted by the magnitude of the metric being
               displayed in the tab.</para>
         </formalpara>            
       </listitem>
       
       <listitem>
         <formalpara>
           <title><guiicon><inlinegraphic fileref="images/filter.gif"/> Filter By Metric Threshold</guiicon></title>
           <para>Toggling this menu item controls whether or not nodes in the metric tab being
           shown are filtered by a threshold. Typically, nodes are highlighted if they
           exceed the metric threshold, but this toggle allows only those that exceed the threshold to be shown.</para>
         </formalpara>    
       </listitem>
      </itemizedlist>
      </para>
      
	</section>

	<section id="proposed-annotation-view">
		<title>The Proposed Annotation view</title>

		<para>The <guilabel>Proposed Annotation</guilabel> view, as shown in <xref
      linkend="fig-proposed-annotation-view"/>, shows any annotations
      that have been proposed by the analysis for inclusion in the program's source code. The
      proposed annotations are inferred from other annotations in the code.</para>
		
	  <figure id="fig-proposed-annotation-view">
        <title>The <guilabel>Proposed Annotation</guilabel> view</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/proposed-annotation-view.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>To add a proposed annotation to the code select one or more <inlinegraphic fileref="images/annotation_proposed.gif"/>
      proposals in the view and select <guilabel>Annotate Code&hellip;</guilabel>
      as shown in <xref
      linkend="fig-proposed-annotation-context-menu"/>. The edit is previewed before it is made to the code. You can
      also select one or more Java declaration elements, including projects, to include all proposals within that declaration element.
      Proposals on binary code (the standard library, JAR files, or class files) do not (yet) edit XML files, however, in some
      cases <code>@Assume</code> annotations about binaries will be included as part of an edit to your source code.</para>
      
      <figure id="fig-proposed-annotation-context-menu">
        <title>The <guilabel>Proposed Annotation</guilabel> view context menu adding two proposals to the code</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/proposed-annotation-context-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
            <para>The view&rsquo;s toolbar has six command icons:
        <itemizedlist>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/></guiicon></title>
              <para>This button collapses all the nodes in the Java declaration tree.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/annotation_proposed.gif"/></guiicon></title>
              <para>This button automatically annotates all the selected proposals into the code.
              The edit is previewed before it is made to the code.</para>
            </formalpara>            
          </listitem>
          
          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/changelog.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not differences are highlighted in the view. If a
              proposal has changed its background is painted in light yellow.
              In addition, a trail of <inlinegraphic fileref="images/delta_decr.gif"/> images appear from the root of the
              tree to any proposal that has changed.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/changelog_only.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not unchanged proposals are displayed in this view. When this button is
              selected only proposals with differences are displayed in the view. By default this is not selected.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/java_comp_unit.gif"/></guiicon></title>
              <para>Toggling this button controls whether or not proposals not for
              Java source code are displayed in this view. When this button is
              selected only proposals to source code are displayed. By default this is not selected.</para>
            </formalpara>            
          </listitem>
         
           <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/annotation_abductive.gif"/></guiicon></title>
              <para>Toggling this button filters the proposals shown in this view. When pressed the view
              only displays proposals inferred from other annotations or proposals that resolve a modeling problem.
              For example, proposals for <code>@RegionEffects</code> annotations from unannotated code are filtered out. When
              unpressed all proposals from the scan are shown in the view.</para>
            </formalpara>            
          </listitem>


        </itemizedlist>
      </para>

      <figure id="fig-proposed-promises-menu">
        <title>The <guilabel>Proposed Annotation</guilabel> view menu</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/proposed-annotation-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>The view&rsquo;s menu has six commands; see <xref
      linkend="fig-proposed-promises-menu"/>:
      <itemizedlist>
      
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/> Collapse All</guiicon></title>
	    <para>Selecting this menu item collapses all the nodes in the Java declaration tree.</para>
	  </formalpara>            
	</listitem>
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/annotation_proposed.gif"/> Annotate Code...</guiicon></title>
	    <para>Selecting this menu item automatically annotates all the selected proposals into the code.
              The edit is previewed before it is made to the code.</para>
	  </formalpara>
	</listitem>
	
	     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/changelog.gif"/> Highlight Differences</guiicon></title>
         <para>Toggling this menu item controls whether or not differences are highlighted in the view. If a
         proposal has changed its background is painted in light yellow.
         In addition, a trail of <inlinegraphic fileref="images/delta_decr.gif"/> images appear from the root of the
         tree to any proposal that has changed.</para>
       </formalpara>            
     </listitem>

     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/changelog_only.gif"/> Show Only Differences</guiicon></title>
         <para>Toggling this menu item controls whether or not unchanged proposals are displayed in this view. When this menu item is
         checked only proposals with differences are displayed in the view. By default this is not selected.</para>
       </formalpara>            
     </listitem>

     <listitem>
       <formalpara>
         <title><guiicon><inlinegraphic fileref="images/java_comp_unit.gif"/> Show Only Proposals To Source</guiicon></title>
         <para>Toggling this button controls whether or not proposals not for
              Java source code are displayed in this view. When this button is
              selected only proposals to source code are displayed. By default this is not selected.</para>
       </formalpara>            
     </listitem>
	
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/annotation_abductive.gif"/> Show Only Proposals Inferred From Other Promises</guiicon></title>
	    <para>Toggling this menu item filters the proposals shown in this view. When pressed the view
              only displays proposals inferred from other annotations or proposals that resolve a modeling problem.
              For example, proposals for <code>@RegionEffects</code> annotations from unannotated code are filtered out. When
              unpressed all proposals from the scan are shown in the view.</para>
	  </formalpara>
	</listitem>
      </itemizedlist>
      </para>      
      
	</section>
	

	<section id="library-annotation-explorer-view">
		<title>The Library Annotation Explorer view</title>

		<para>
			The
			<guilabel>Library Annotation Explorer</guilabel>
			view, as shown in <xref linkend="fig-library-annotation-explorer-view" />, shows any annotations
			that have been made in an XML file about a binary library&mdash;typically represented as JAR files in Java.
		</para>

		<figure id="fig-library-annotation-explorer-view">
			<title>The <guilabel>Library Annotation Explorer</guilabel> view</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/library-annotation-explorer-view.png" />
				</imageobject>
			</mediaobject>
		</figure>

	<para>The
		view uses the '&gt;' symbol (similar to source code control systems in
		Eclipse) to track user changes/additions to the standard annotations
		that ship
		with JSure from SureLogic. It is possible to only show user modified
		annotations by pressing the
		<emphasis>Show only user-added/modified
			library annotations</emphasis>
		toolbar button:
		<inlinegraphic fileref="images/annotation_delta.gif" />. The view with this filter pressed is shown in
		<xref linkend="fig-library-annotation-explorer-view-changes-only" />.
	</para>

		<figure id="fig-library-annotation-explorer-view-changes-only">
			<title>The <guilabel>Library Annotation Explorer</guilabel> view showing only user-added/modified library annotations</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/library-annotation-explorer-view-changes-only.png" />
				</imageobject>
			</mediaobject>
		</figure>
		
		<para>Clicking on a type or an annotation in this view brings up the XML library annotation editor (described below). Any changes to library annotations are made in this editor&mdash;the
		<guilabel>Library Annotation Explorer</guilabel> view does not allow the user to perform edits.</para>
		
		<para>JSure tracks user library annotation differences across a series of tool releases and manage updates
		to the standard annotations shipped with each tool release. Users are notified if any of their annotations conflict with the
		standard library annotations. Warning symbols <inlinegraphic fileref="images/warning.gif" /> will appear in the <guilabel>Library Annotation Explorer</guilabel> view after a tool
		update if conflicts exist. Each warning can then be examined and fixed by the tool user.</para>
		
		            <para>The view&rsquo;s toolbar has three command icons:
        <itemizedlist>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/></guiicon></title>
              <para>This button collapses all the nodes in the Java declaration tree.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/annotation_delta.gif"/></guiicon></title>
              <para>Toggling this button controls if the view is filtered to shown only types that the
              user has added annotations to or modified baseline annotations. Baseline or
	          standard annotations are shipped with JSure from SureLogic. JSure explicitly tracks changes
	          to the baseline annotations.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/open_xml_type.gif"/></guiicon></title>
              <para>Selecting this button opens a search dialog, shown in
            <xref linkend="fig-save-promises-library-as-dialog"/>, to let the user
            search for the type that they want to open in the library annotation editor. This command is
            most useful for opening types that have no annotations and, therefore, are not listed in
            the <guilabel>Library Annotation Explorer</guilabel> view. This menu item is also on
            the JSure main menu.</para>
            </formalpara>            
          </listitem>
        </itemizedlist>
      </para>

      <figure id="fig-library-annotation-explorer-menu">
        <title>The <guilabel>Library Annotation Explorer</guilabel> view menu</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/library-annotation-explorer-menu.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>The view&rsquo;s menu has three commands; see <xref
      linkend="fig-library-annotation-explorer-menu"/>:
      <itemizedlist>
	<listitem>
	  
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/collapseall.gif"/> Collapse All</guiicon></title>
	    <para>Selecting this menu item collapses all the nodes in the Java declaration tree.</para>
	  </formalpara>            
	</listitem>
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/annotation_delta.gif"/> Show Only User-Added/Modified Library Annotations</guiicon></title>
	    <para>Toggling this menu item controls if the view is filtered to shown only types that the user has added
	    annotations to or modified baseline annotations. Baseline or
	    standard annotations are shipped with JSure from SureLogic. JSure explicitly tracks changes
	    to the baseline annotations.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title><guiicon><inlinegraphic fileref="images/open_xml_type.gif"/> Open Library Annotations...</guiicon></title>
	    <para>Selecting this menu item opens a search dialog, shown in
            <xref linkend="fig-save-promises-library-as-dialog"/>, to let the user
            search for the type that they want to open in the library annotation editor. This command is
            most useful for opening types that have no annotations and, therefore, are not listed in
            the <guilabel>Library Annotation Explorer</guilabel> view. This menu item is also on the JSure main menu.</para>
	  </formalpara>
	</listitem>
	
      </itemizedlist>
      </para>      
		

	</section>
	
	<section id="xml-library-annotation-editor">
		<title>The XML Library Annotation editor</title>
		
				<para>The <guilabel>XML Library Annotation</guilabel> editor, as shown in <xref
      linkend="fig-jsure-xml-editor-object"/>, allows the tool user to edit annotations about a binary
      library&mdash;typically represented as JAR files in Java.</para>
		
	  <figure id="fig-jsure-xml-editor-object">
        <title>The <guilabel>XML Library Annotation</guilabel> editor showing the annotations on java.lang.Object</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/jsure-xml-editor-object.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>The editor contains three tabs: <emphasis>Editor</emphasis>, <emphasis>Baseline</emphasis>, and <emphasis>Diffs</emphasis>.
      Each of these tab is described below.</para>
      
      <itemizedlist>
	      <listitem><para><emphasis>Editor</emphasis> &mdash; The <emphasis>Editor</emphasis> tab shows a tree of the declarations in the Java type. The
						user can select an element and right-click to add an annotation. The two other tabs do not
						allow editing (in this release&mdash;this may change in a future release). When annotations are added to an element the proper
						XML is automatically created by the editor (this is complex due to the "diff" approach used by JSure for library annotations as discussed below). The <emphasis>Baseline</emphasis>
						tab shows the XML file about this type that shipped with JSure from Surelogic. The <emphasis>Diffs</emphasis> tab
						shows any user changes to the annotations about this type.</para>
						
						<para>The user must type in portions of many annotations. If the syntax is obviously wrong the editor with make the text that the user typed red to highlight the problem.
						Edits can be saved, however, it is likely that saving "red" annotations will result in modeling errors being reported when the next JSure scan is run.</para>
						
						<para>To add an annotation bring up the context menu on any Java declaration and select <guilabel>Add Annotation...</guilabel>.
						Note that if you want to add an annotation to a method or constructor parameter you
						must expand the tree and select the parameter (a sub-item of the method or constructor).</para>
						<mediaobject>
          					<imageobject><imagedata fileref="images/jsure-xml-editor-add-annotation.png"/></imageobject>
        				</mediaobject>
        				<para>This will bring up a dialog, shown below, to allow you to select the annotation you want add to the declaration.</para>
        				<mediaobject>
          					<imageobject><imagedata fileref="images/jsure-xml-editor-add-annotation-dialog.png"/></imageobject>
        				</mediaobject>
        				
        				<para>To edit the attributes on an annotation bring up the context menu and select <guilabel>Edit Annotation...</guilabel> or
        				double-click on the annotation. This will bring up a dialog that allows you to edit all
        				attributes of the annotation. This dialog for a <code>@Unique</code>
        				annotation is shown below</para>
        				<mediaobject>
          					<imageobject><imagedata fileref="images/jsure-xml-editor-attributes-dialog.png"/></imageobject>
        				</mediaobject>
        				
						<para>A useful context menu item in the editor is <guilabel>Revert All Changes</guilabel>. This allows you to quickly undo any changes you have made
						to the standard baseline annotations that shipped with JSure.</para>
						<mediaobject>
          					<imageobject><imagedata fileref="images/jsure-xml-editor-revert-all-changes.png"/></imageobject>
        				</mediaobject>
        				
        				<para>It is possible to copy and paste annotations from one type to another. You can copy a single annotation, all annotations on a declaration, or all annotations on all
        				declarations within a type. The paste operation will not change an existing annotation, therefore it is
        				best to paste onto unannotated declarations. This feature is useful for copying a set of annotation from a
        				parent type to one of its subtypes.</para>
        				
        				<mediaobject>
          					<imageobject><imagedata fileref="images/jsure-xml-editor-copytype.png"/></imageobject>
        				</mediaobject>
        				
        				<para>By default, unannotated methods in the editor are marked with a small red-dot. This is helpful
        				to find a method that might have been skipped by a copy/paste or is new in a library release.
        				This marking can be turned off by unchecking <guilabel>Mark Unannotated Methods</guilabel> in the
        				context menu.</para>
        				
        				<mediaobject>
          					<imageobject><imagedata fileref="images/jsure-xml-editor-markunannotated.png"/></imageobject>
        				</mediaobject>
        				
        				<para>Two useful context menu items in the editor are <guilabel>Open</guilabel> and <guilabel>Open Type Hierarchy</guilabel>
        				which open the type in the Eclipse Java editor or the Eclipse Java Type Hierarchy view, respectively. These can help examine
        				the code you are annotating as well as its parent and child types.</para>
        				
        				<mediaobject>
          					<imageobject><imagedata fileref="images/jsure-xml-editor-opentype.png"/></imageobject>
        				</mediaobject>
        			
        				
						</listitem>
	      <listitem><para><emphasis>Baseline</emphasis> &mdash; The <emphasis>Baseline</emphasis> tab displays the XML that represents the standard library annotations
	      that shipped with JSure. This tab does not allow editing (in this release&mdash;this may change in a future release).</para>
	      				<mediaobject>
          					<imageobject><imagedata fileref="images/jsure-xml-editor-baseline.png"/></imageobject>
        				</mediaobject>
        				</listitem>
	      <listitem><para><emphasis>Diffs</emphasis> &mdash;  The <emphasis>Diffs</emphasis> tab displays the XML that represents the user's edits to the standard library annotations
	      that shipped with JSure. This tab does not allow editing (in this release&mdash;this may change in a future release).</para>
	      				<mediaobject>
          					<imageobject><imagedata fileref="images/jsure-xml-editor-diffs.png"/></imageobject>
        				</mediaobject>
        				</listitem>
      </itemizedlist>
	</section>
	
	<section id="jsure-quick-search-view">
		<title>The JSure Quick Search view</title>

		<para>The <guilabel>JSure Quick Search</guilabel> view, as shown in <xref
      linkend="fig-jsure-quick-search-view"/>, shows tool results to the tool user in a flexible, query-oriented, manner.</para>
		
	  <figure id="fig-jsure-quick-search-view">
        <title>The <guilabel>JSure Quick Search</guilabel> view</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/jsure-quick-search-view.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>The <guilabel>JSure Quick Search</guilabel> view allows
      you to query the scan results in an ad hoc manner. You can setup
      a series of filters on the results to focus on the particular
      scan results that are of immediate interest. Selecting a result
      highlights that result in the <guilabel>Verification
      Status</guilabel> view. Clicking on a result in the <guilabel>JSure Quick Search</guilabel> view highlights
      the code associated with that result in the Java editor and the <guilabel>JSure Historical Source</guilabel>.</para>

      <informaltable frame='all'>
	<tgroup cols='2' align='left'>
	<colspec colwidth='4cm' align='left'/>
	  <thead>
	    <row>
	      <entry>Filter</entry>
	      <entry>Semantics</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><inlinegraphic fileref="images/analysis_result.gif"/> Analysis Result</entry>
	      <entry>Allows you to filter the results by the type of
	      analysis result reported by the tool's verifying
	      analyses. An analysis result is a finding reported by
	      one of the JSure tool's verifying analyses. These
	      results form the basis used to prove that an annotation
	      is consistent, i.e., a verification judgment about a
	      promise. This filter could be used to quickly find all
	      inconsistent analysis results so that you can work to
	      eliminate them.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/annotation.gif"/> Annotation</entry>
	      <entry>Allows you to filter the results by
	      annotation. This filter could be used to quickly find
	      all <classname>@RegionLock</classname> annotations in
	      your code.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/package.gif"/> Java Package</entry>
	      <entry>Allows you to filter the results to a particular set of Java packages.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/class.gif"/> Java Type</entry>
	      <entry>Allows you to filter the results to a particular set of Java types.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/project.gif"/> Project</entry>
	      <entry>Allows you to filter the results to a particular set of Eclipse projects.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/choice.gif"/> Used By Proof</entry>
	      <entry>Allows you to filter the results to those used in a verification proof or those not used in a verification proof. Many proofs have
	      conjunction or OR choices that are made. This filter allows you to easily exclude those results not choosen.</entry>
	    </row>
	    <row>
	      <entry><inlinegraphic fileref="images/verification_result.gif"/> Verification Judgment</entry>
	      <entry>Allows you to filter the results by the
	      verification judgment on an annotation. This filter
	      could be used to find all consistent promises or find
	      promises with a "red-dot" (contingent verification
	      judgments).</entry>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable>

      <para>The <guilabel>JSure Quick Search</guilabel> view is very
      flexible and allows you to chain many filters together before
      you <menuchoice><guimenu>Show</guimenu></menuchoice> a list of
      results. You can also save queries that you find useful via the
      toolbar at the bottom of the view. As you construct a chain of many filters you
      may dismiss some of them by pressing the 
	  <inlinegraphic fileref="images/gray_x.gif"/> in the upper-right-hand
	  corner of the filter box. For example, in the screenshot above,
	  the <inlinegraphic fileref="images/gray_x.gif"/> is next to where
	  the tool lists the text <guilabel>2,094 Results</guilabel> in the
	  <guilabel>Project</guilabel> filter.</para>
      
            <para>The view&rsquo;s toolbar has three command icons at the bottom:
        <itemizedlist>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/sierra_investigate_dot.gif"/> Open Search</guiicon></title>
              <para>This button opens a dialog that lists all the saved searches. The user can select a search
              and it is loaded into the <guilabel>JSure Quick Search</guilabel> view. Note that the links to the
              right of the toolbar list as many searches as can fit. This toolbar ensures that a long list of
              searches can be saved.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/saveas_edit.gif"/> Save Search As</guiicon></title>
              <para>This button brings up a dialog that lets the user name the current search. The search currently
              being shown in the <guilabel>JSure Quick Search</guilabel> view is saved under the given name.</para>
            </formalpara>            
          </listitem>

          <listitem>
            <formalpara>
              <title><guiicon><inlinegraphic fileref="images/gray_x_dot.gif"/> Delete Search</guiicon></title>
              <para>This button brings up a dialog that lists all saved searches. The tool user is allowed to select
              one or more saved searches to delete.</para>
            </formalpara>            
          </listitem>

        </itemizedlist>
      </para>
	</section>
	
	<section id="jsure-historical-source-view">
		<title>The JSure Historical Source view</title>

		<para>The <guilabel>JSure Historical Source</guilabel> view, as shown in <xref
      linkend="fig-jsure-historical-source-view.png"/>, shows what the code looked like at the time that
       the scan was performed.</para>
		
	   <figure id="fig-jsure-historical-source-view.png">
        <title>The <guilabel>JSure Historical Source</guilabel> view</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/jsure-historical-source-view.png"/></imageobject>
        </mediaobject>
      </figure>
      
      <para>When a JSure scan is run all the source code is saved to that it can
      be shown to the user in this view. This helps the user understand if their code
      has changed since the JSure scan was performed. This new view is shown,
      in the <guilabel>Code Verification</guilabel> perspective, to the right of the
      Java editor at the bottom of the perspective.</para>
      
	</section>

  </section>

  <section id="sec-preferences">
    <title>JSure Preferences</title>
    
    <para>JSure adds four panes to the Eclipse Preferences window:
      <itemizedlist>
        <listitem>
          <para><menuchoice><guisubmenu>JSure</guisubmenu></menuchoice></para>
        </listitem>
        <listitem>
          <para><menuchoice><guisubmenu>JSure</guisubmenu> 
          <guimenuitem>Flashlight Generated Lock Models</guimenuitem></menuchoice></para>
        </listitem>
        <listitem>
          <para><menuchoice><guisubmenu>JSure</guisubmenu> 
          <guimenuitem>Uninteresting Package Filtering</guimenuitem></menuchoice></para>
        </listitem>
        <listitem>
          <para><menuchoice><guisubmenu>JSure</guisubmenu> 
          <guimenuitem>Verifying Analysis Selection</guimenuitem></menuchoice></para>
        </listitem>
      </itemizedlist>
    </para>
    
	<para>To open the Eclipse preferences select
      <emphasis>Window</emphasis> | <emphasis>Preferences...</emphasis>
      from the Eclipse main menu. JSure should be visible in the
      outline on the left of the dialog that appears. If you type
      <emphasis>JSure</emphasis> in the text box to the upper-left of
      the dialog then the outline will be filtered to only shown the
      JSure preference pages.</para>
    
    <section>
    <title>JSure</title>
     
    <figure id="fig-jsure-prefs-jsure">
      <title>The JSure preferences pane</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/jsure-prefs-jsure.png"/></imageobject>
      </mediaobject>
    </figure>
    
    <para>The <guilabel>JSure</guilabel> pane, see <xref linkend="fig-jsure-prefs-jsure"/>,
    allows you to control the tool's appearance and operation.</para>
    
    <para>The <guibutton>Data directory</guibutton> shows where the tool stores scans. This location
    is relative to your workspace and cannot be changed.</para>
    
    <para>The <guibutton>XML library annotation "diffs" directory</guibutton> shows where the changes and
    additions made to the standard library annotations are stored. This location can be changed,
    for example, to be placed under version control and shared by all members of a programming team.
    If this location is changed, Eclipse should be restarted. In addition, it is not recommended to have
    any library annotation editors opened because data could be lost. Files are not copied from the old
    location to the new location. Therefore, a manual copy of files is required if the old location had
    data that you want to continue to use.</para>
    
    <para>It has five options under the <guilabel>Appearance</guilabel> heading:
    <itemizedlist>
     <listitem>
	<formalpara>
	  <title><guibutton>Show 'balloon' notifications for scan start and completion</guibutton></title>

	  <para>If selected, pop-up notifications (also called balloon notifications) will be displayed
	  when a JSure scan is started and when it is competed.</para>
	</formalpara>
      </listitem>
    
      <listitem>
	<formalpara>
	  <title><guibutton>Prompt to change to the Code Verification
	  perspective on project focus</guibutton></title>

	  <para>If selected, whenever a project is selected to receive
	  the JSure focus, you will be prompted to change to the
	  <guilabel>Code Verification</guilabel> perspective if it is not
	  already the active perspective.</para>
	</formalpara>
      </listitem>

      <listitem>
	<formalpara>
	  <title><guibutton>If no prompt, automatically change to the
	  Code Verification perspective</guibutton></title>

	  <para>If selected, and JSure is not set to prompt for a perspective
	  change, JSure automatically changes to the <guilabel>Code
	  Verification</guilabel> perspective when a project receives
	  the JSure focus.</para>
	</formalpara>
      </listitem>

      <listitem>
	<formalpara>
	  <title><guibutton>Allow the user to select the set of projects to scan even when projects are selected (in the Package Explorer)</guibutton></title>

	  <para>If this is checked then the project selection dialog is always shown when a scan is started. If it is not checked it is only displayed
	  if no projects are selected in the <guilabel>Package Explorer</guilabel> view.</para>
	</formalpara>
      </listitem>
      
      <listitem>
	<formalpara>
	  <title><guibutton>Allow the user to select the set of projects to update the promises library even when projects are selected</guibutton></title>

	  <para>If this is checked then the project selection dialog is always shown when <guilabel>Add/Update Promises Library in Project</guilabel> is selected in the
	  <guilabel>JSure</guilabel> menu. If it is not checked it is only displayed
	  if no projects are selected in the <guilabel>Package Explorer</guilabel> view.</para>
	</formalpara>
      </listitem>
      
            <listitem>
	<formalpara>
	  <title><guibutton>Always save editors before verifying</guibutton></title>

	  <para>If this is checked then any edits are automatically saved. It it is not checked the user is
	  prompted to decided if they want to save edits before the scan is started.</para>
	</formalpara>
      </listitem>
      
   <listitem>
	<formalpara>
	  <title><guibutton>Tree views should save and restore expansion and selection (may be slow for larger scans)</guibutton></title>

	  <para>If this is checked then the expansion and selection state of tree viewers is saved and restored on Eclipse exit and
	  startup and when the scan is changed. Unchecking this may speed scan load performance. Note that expansion and selection restoration of
	  a view will aromatically timeout after roughly 3 seconds, so this preference is rarely needs to be unchecked.</para>
	</formalpara>
      </listitem>
    </itemizedlist>

    It has five options under the <guilabel>Verifying Scan Settings</guilabel> heading:

    <itemizedlist>
      <listitem>
	<formalpara>
	  <title><guibutton>Number of threads the analysis is allowed to use</guibutton></title>
	  <para>Portions of the JSure analysis are able to use
	  multiple threads to increase performance of the
	  analysis. This setting allows the user to control the number
	  of threads used by the JSure analysis. The default for this
	  setting is the number of cores detected on the user's
	  computer.</para>
	</formalpara>
      </listitem>
      
       <listitem>
	<formalpara>
	  <title><guibutton>Maximum VM memory allowed for scans</guibutton></title>
	  <para>Sets the maximum machine memory the external VM started for a JSure scan is allowed to use. In some cases, for very large codebases, the default
	  value may need to be raised.</para>
	</formalpara>
      </listitem>
      
             <listitem>
	<formalpara>
	  <title><guibutton>Warn when analysis execution time exceeds</guibutton></title>
	  <para>Reports a warning in the <guilabel>Verification Status</guilabel> view when the time to analyze
	  a method or constructor exceeds the value set in this preference.</para>
	</formalpara>
      </listitem>
      
             <listitem>
	<formalpara>
	  <title><guibutton>Enable timeout of analysis execution</guibutton></title>
	  <para>Enables timeouts (stopping) of an analysis that is taking too long. The time limit is defined by the value
	  of <guilabel>Timeout when analysis execution time exceeds</guilabel>.</para>
	</formalpara>
      </listitem>
      
             <listitem>
	<formalpara>
	  <title><guibutton>Timeout when analysis execution time exceeds</guibutton></title>
	  <para>Sets a time limit for analysis of a method or constructor. For this time to stop
	  the analysis <guilabel>Enable timeout of analysis execution</guilabel> must be checked.</para>
	</formalpara>
      </listitem>

    <listitem>
	<formalpara>
	  <title><guibutton>Compression may be used to reduce output size (may slow scan execution)</guibutton></title>
	  <para>To save space on your disk, JSure compresses the snapshot of the verification proof results output at the end of
	  each scan. This is enabled by default and should really not be changed unless suggested
	  by SureLogic technical support. Not checking this preference can result in enormous scan directories that take
	  long periods of time to load, the only benefit being only a small improvement in scan execution time.</para>
	</formalpara>
    </listitem>
      
    <listitem>
	<formalpara>
	  <title><guibutton>Analysis may propose promises not based on existing models (may slow scan execution and use significant memory)</guibutton></title>
	  <para>The verifying analysis can propose promises about all code in the system&mdash;regardless if any
	  annotations exist in your code. This feature may be useful to some users, but it can slow scan execution
	   and cause the Eclipse instance that is loading up the results of a scan to consume significant memory for
	   very large code bases. Today, turning on this feature will produce <code>@RegionEffects</code>
	   proposals on every method and constructor in your codebase.</para>
	</formalpara>
    </listitem>

    <listitem>
	<formalpara>
	  <title><guibutton>Load entire classpath into memory (used for testing library annotation consistency)</guibutton></title>
	  <para>To save memory and time, JSure only loads classes from JAR files into memory during a scan
	  if they are referenced, directly or indirectly, by code in the project. This selection directs JSure
	  to load the entire project classpath into memory. This is not recommended for normal tool use, however,
	  it is very helpful when annotating binary libraries with the <guibutton>Library Annotation Explorer</guibutton> and editor.
	  This is because it can help check that all subtypes of an annotated binary class are properly annotated.</para>
	</formalpara>
      </listitem>
      
    </itemizedlist>
    </para>
    
    <para>What can be done about a method that takes a long time to analyze? If possible,
    reduce the number of local variables in the method. This will speed analysis.
    Typically methods that are very large can be broken up into smaller methods or refactored to
    call a series of new methods extracted from the larger method. Doing this will also speed analysis.
    </para>
        
    <para>The pane also has a <guibutton>Manage SureLogic Licenses</guibutton> button 
    that brings up the dialog box for installing and removing licenses; see
    <xref linkend="sec-license-management"/>.</para>
    
    </section>

    <section>
    <title>Flashlight Generated Lock Models</title>
    
        <figure id="fig-jsure-prefs-flgen">
        <title>The Flashlight Generated Lock Models preferences pane</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/jsure-prefs-flgen.png"/></imageobject>
        </mediaobject>
        </figure>
        
        <para>The <guilabel>Model Naming</guilabel> pane,
        see <xref linkend="fig-jsure-prefs-flgen"/>,
        controls inferred models from the Surelogic
        <application>Flashlight</application> tool.</para>
            
    </section>
    
    <section id="prefs-uninteresting-package-filtering">
    <title>Uninteresting Package Filtering</title>
    
        <figure id="fig-jsure-prefs-filter">
        <title>The Uninteresting Package Filtering preferences pane</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/jsure-prefs-filter.png"/></imageobject>
        </mediaobject>
        </figure>
        
        <para>The <guilabel>Uninteresting Package Filtering</guilabel> pane,
        see <xref linkend="fig-jsure-prefs-filter"/>,
        controls what modeling problems and proposed promises are not shown to
        the tool user by defining a set of filters
        on the package and type names a result is within.</para>
        
        <para>If any of the filters match the resource that the modeling problem or proposed promise is
        within, then the problem or proposal. is not shown.
        The filters are defined using Java regular expressions.</para>
        
        <para>This preference pane has a set of reasonable defaults that cover the Java standard library.
        Filters can be added to avoid reports about code that you are not interested in, for example, modeling problems
        about a library included in your code that you do not maintain.</para>
    
    </section>
    
    <section>
    <title>Verifying Analysis Selection</title>
    
        <figure id="fig-jsure-prefs-analyses">
        <title>The Verifying Analysis Selection preferences pane</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/jsure-prefs-analyses.png"/></imageobject>
        </mediaobject>
        </figure>
    
    
    <para>The <guilabel>Verifying Analysis Selection</guilabel> pane allows you to choose
    which assurance analyses are actually executed by JSure.  Most of
    the time you do not need to change these settings unless directed by SureLogic technical support.</para>
    
    </section>
  </section>

	<section id="sec-surelogic-tool-properties-file">
		<title>SureLogic tool properties file</title>

		<para>It is possible to exclude particular Eclipse source folders
			or Java packages from a scan.
			This feature can be useful to
			exclude test or obsolete code from scans. It is also possible to treat particular Eclipse source folders
			or Java packages as if they were a library (a Jar).
		</para>
		<para>To do this you create a
			<filename>surelogic-tools.properties</filename>
	file at the root of an Eclipse Java project. Four properties are recognized
	
	<itemizedlist>
		<listitem>
			<formalpara>
				<title><guibutton>scan.exclude.source.folder</guibutton></title>
				<para>This property excludes one or more source folders of a project from scans.
				The source folder is referenced by its name relative to the root of the project. More than one
				source folder can be specified using a comma separated list.</para>
			</formalpara>
		</listitem>

		<listitem>
			<formalpara>
				<title><guibutton>scan.exclude.source.package</guibutton></title>
				<para>This property excludes the contents of one or more packages from scans. Packages may be
				listed explicitly using a comma separated list. A <code>*</code> can be used within a package name
				as a wildcard to match several packages.</para>
			</formalpara>
		</listitem>
		
		<listitem>
			<formalpara>
				<title><guibutton>scan.source.folder.as.bytecode</guibutton></title>
				<para>This property treats one or more source folders of a project as if all its code
				was binary, or bytecode (such as if it were within Jar).
				The source folder is referenced by its name relative to the root of the project. More than one
				source folder can be specified using a comma separated list.</para>
			</formalpara>
		</listitem>

		<listitem>
			<formalpara>
				<title><guibutton>scan.source.package.as.bytecode</guibutton></title>
				<para>This property treats the contents of one or more packages as if all its code
				was binary, or bytecode (such as if it were within Jar).
				Packages may be
				listed explicitly using a comma separated list. A <code>*</code> can be used within a package name
				as a wildcard to match several packages.</para>
			</formalpara>
		</listitem>
	</itemizedlist>
		</para>
		
		<para>The example shown in <xref linkend="fig-surelogic-tools-timingframework"/> excludes the <filename>test</filename>
		source folder of the <application>timingframework-core</application> project.</para>

		<figure id="fig-surelogic-tools-timingframework">
			<title>
				Use of the <filename>surelogic-tools.properties</filename>
				to exclude the <filename>test</filename> source	folder of the
				<application>timingframework-core</application> project
			</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/surelogic-tools-timingframework.png" />
				</imageobject>
			</mediaobject>
		</figure>
		
		<para>The example shown in <xref linkend="fig-surelogic-tools-timingframework-pkg"/> excludes any package in the
		<application>timingframework-swing</application> project that's name starts with <code>org.jdesktop.swing.animation.demos</code>.
		For this example that matches two packages: <code>org.jdesktop.swing.animation.demos</code>
		and <code>org.jdesktop.swing.animation.demos.splineeditor</code>.</para>
		
		<figure id="fig-surelogic-tools-timingframework-pkg">
			<title>
				Use of the <filename>surelogic-tools.properties</filename>
				to exclude packages from the
				<application>timingframework-swing</application> project
			</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/surelogic-tools-timingframework-pkg.png" />
				</imageobject>
			</mediaobject>
		</figure>
		
		<para>Some further examples of excluding code within an Eclipse Java project from a scan are shown in the table below.

	<informaltable frame='all'>
		<tgroup cols='2' align='left'>
			<thead>
				<row>
					<entry>Example</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						<guilabel>scan.exclude.source.folder=test</guilabel>
					</entry>
					<entry>
						Excludes a source folder named
						<code>test</code>
						located at the root of the project folder from scans.
					</entry>
				</row>
				<row>
					<entry>
						<guilabel>scan.exclude.source.folder=test1,test2,test3</guilabel>
					</entry>
					<entry>
						Excludes three source folders from scans:
						<code>test1</code>, <code>test2</code>, and<code>test3</code>.
					</entry>
				</row>
				<row>
					<entry>
						<guilabel>scan.exclude.source.package=com.surelogic.tests,com.surelogic.demos</guilabel>
					</entry>
					<entry>
						Excludes two packages from scans:
						<code>com.surelogic.tests</code> and <code>com.surelogic.demos</code>.
					</entry>
				</row>
				<row>
					<entry>
						<guilabel>scan.exclude.source.package=*test*</guilabel>
					</entry>
					<entry>
						Excludes any package from scans that contains
						<code>test</code>
						as part of its name.
					</entry>
				</row>
				<row>
					<entry>
						<guilabel>scan.exclude.source.package=*.test.*</guilabel>
					</entry>
					<entry>
						Excludes any package from scans that is a sub-package of a
						<code>test</code>
						package, but not the elements of the <code>test</code> package itself.
					</entry>
				</row>
				<row>
					<entry>
						<guilabel>scan.exclude.source.package=*test*,com.surelogic.demos</guilabel>
					</entry>
					<entry>
						Excludes any package from scans that contains
						<code>test</code>
						as part of its name as well as the <code>com.surelogic.demos</code> package.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</informaltable>
	</para>
	</section>
  
    <section id="sec-ant-task">
    <title>Using Ant</title>
    
    <para>The JSure Ant task can scan a project and produce JSure results. It is, by design
     intended to be similar to the javac Ant task. This task results in a Zip
     file that can be loaded into Eclipse using the <guilabel>Import Ant/Maven Scan...</guilabel>
     on the JSure menu. Once loaded into Eclipse the JSure scan results can be examined just like any other scan.</para>
     
     <para>The special attributes are given below, note that other javac task attributes work as well. The idea
     is for you to copy or "clone" your javac task and modify it just a bit (with the attributes below) to be a JSure scan task.</para>
     
     <para>Note that you must run this task in a Java 7 VM (it can analyze any code).</para>
     
    <section>
    <title>jsure-scan task</title>
  
    <para>This task scans code and produces a scan file
    on the disk. This task is, for convenience, very similar to
    the <ulink
    url="http://ant.apache.org/manual/CoreTasks/javac.html">javac</ulink>
    task. The new attributes are:</para>
       
    <informaltable frame='all'>
      <tgroup cols='3' align='left'>
        <thead>
          <row>
            <entry>Attribute</entry>
            <entry>Description</entry>
            <entry>Required</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>projectname</entry>
            <entry>
              This attribute sets the name of your project when the scan is loaded into Eclipse.
              This value is also used to name the resulting Zip file. <code>projectname="JSureTutorial_BoundedFIFO"</code>
            </entry>
            <entry>Yes</entry>
          </row>
          <row>
            <entry>jsureanthome</entry>
            <entry>
              This attribute sets set this to the location of the bits for the JSure Ant task (where you unzipped them). Typically
              you copy the pattern illustrated in the Ant script below and set this
              path as the property "jsure.ant.home" so that it can be used to specify
              the task classpath as well as the value of this attribute.
               e.g.,<code>&lt;property name="jsure.ant.home" location="C:\\Users\\Tim\\jsure-ant" /&gt;</code>
               <code>...</code>
               <code>jsureanthome="${jsure.ant.home}"</code>
            </entry>
            <entry>Yes</entry>
          </row>
          <row>
            <entry>jsurescandir</entry>
            <entry>
              This attribute sets a directory to create the scan Zip file
              within. If it is not set then output is written to the current directory.
              This may be useful if you want to gather results in a particular location
              on your disk.
             <code>jsurescandir="C:\\Users\\Tim\\myscans"</code>
            </entry>
            <entry>No, output defaults to the current directory.</entry>
          </row>
          <row>
            <entry>surelogictoolspropertiesfile</entry>
            <entry>
              This attribute sets the location of a
           <code>surelogic-tools.properties</code> file to be read to control the scan. This file
           can control aspects of the JSure scan (please see the JSure documentation).
           If this attribute is not set the tool looks for a <code>surelogic-tools.properties</code>
           file in the current directory and uses that if it is found.
           <code>surelogictoolspropertiesfile="C:\\Users\\Tim\\surelogic-tools.properties"</code>
            </entry>
            <entry>No, if not set the tool looks for a <code>surelogic-tools.properties</code> file in the current directory
            (a useful default if you place the Ant script and the properties file at the root of a Java project). 
            If found then that file is used, if not then no properties are used.</entry>
          </row>
          
        </tbody>
      </tgroup>
    </informaltable>
    
    </section>
  
  <para>For the JSureTutorial_BoundedFIFO project create a build.xml at the project root:</para>
  
  <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project name="JSureTutorial_BoundedFIFO" default="scan" basedir="."&gt;

  &lt;!-- (CHANGE) path to the unzipped the JSure Ant task --&gt;
  &lt;property name="jsure.ant.home" location="C:\\Users\\Tim\\jsure-ant" /&gt;

  &lt;!-- (COPY) JSure Ant task setup stuff --&gt;
  &lt;path id="jsure-ant.classpath"&gt;
    &lt;dirset  dir="${jsure.ant.home}" includes="lib/com.surelogic.*" /&gt;
    &lt;fileset dir="${jsure.ant.home}" includes="lib/**/*.jar" /&gt;
  &lt;/path&gt;
  &lt;taskdef name="jsure-scan" classname="com.surelogic.jsure.ant.JSureScan"&gt;
    &lt;classpath refid="jsure-ant.classpath" /&gt;
  &lt;/taskdef&gt;

  &lt;path id="tf.classpath"&gt;
    &lt;fileset dir="${basedir}" includes="**/*.jar" /&gt;
  &lt;/path&gt;

  &lt;target name="scan"&gt;
    &lt;javac srcdir="${basedir}/src"
           destdir="${basedir}/bin"
           source="1.7"
           includeantruntime="false">
       &lt;classpath refid="tf.classpath" /&gt;
    &lt;/javac&gt;

    &lt;jsure-scan srcdir="${basedir}/src"
                source="1.7"
                includeantruntime="false"
                jsureanthome="${jsure.ant.home}"
                projectname="JSureTutorial_BoundedFIFO"&gt;
       &lt;classpath refid="tf.classpath" /&gt;
    &lt;/jsure-scan&gt;
  &lt;/target&gt;
&lt;/project&gt;</programlisting>

  <para>To run a scan open a prompt to this directory and run "ant" or
  run as Ant task in your Eclipse. The output of the above Ant script on the JSureTutorial_BoundedFIFO project will look like</para>

<programlisting>Buildfile: C:\Users\Tim\Source\eclipse-work\meta-work\JSureTutorial_BoundedFIFO\build.xml
scan:
[jsure-scan] Project to scan w/JSure = JSureTutorial_BoundedFIFO
[jsure-scan] Scan output directory   = .
[jsure-scan] Scan JSureTutorial_Bounde-2015.05.18-at-12.37.55.231 examining 3 Java files
BUILD SUCCESSFUL
Total time: 8 seconds</programlisting>

  <para>Next you would load the <code>JSureTutorial_Bounde-2015.05.18-at-12.37.55.231.jsure-scan.zip</code> file into
  your Eclipse by choosing the
  <menuchoice><guimenuitem>JSure</guimenuitem><guimenuitem>Import Ant/Maven Scan...</guimenuitem></menuchoice> from the Eclipse main menu.
  The file is located at the root of the JSureTutorial_BoundedFIFO
  project on your disk (where the script was located).</para>
     
  </section>
  
  <section id="sec-maven-task">
    <title>Using Maven</title>
    <para>A Maven task for JSure is still under development. A workaround is to use Ant within Maven as discussed <ulink
    url="https://maven.apache.org/guides/mini/guide-using-ant.html">here</ulink> and
    <ulink url="https://maven.apache.org/plugins/maven-antrun-plugin/">here</ulink>.</para>
  </section>

  <section id="sec-license-management">
    <title>License management</title>

    <para>JSure is commercial software and a license is required to
    use it. Licenses are obtained from SureLogic and expire after some
    period of time. Lack of a license will prohibit you from scanning code with JSure.
    Selecting <guimenuitem>Manage SureLogic
    Licenses</guimenuitem> from the <guimenu>JSure</guimenu> menu
    brings up the license management form as seen in <xref
    linkend="fig-license-management" />. For JSure to operate properly
    either a <emphasis>JSure</emphasis> or <emphasis>All
    Tools</emphasis> license must be installed.</para>

    <figure id="fig-license-management">
      <title>The SureLogic license management dialog</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/quick-start-license-dialog-empty.png"/></imageobject>
      </mediaobject>
    </figure>

    <para>By default license installation requires internet access.
    SureLogic can, in special cases, provide licenses that do not
    require internet access. Further use of the product does not
    require internet access. If a manual uninstall is done, before
    license expiration, internet access is also required.  SureLogic
    tracks the number of times a particular license is installed and
    uninstalled. We stress that JSure does not, unlike other
    plug-ins such as MyEclipse, &ldquo;talk-back&rdquo; to SureLogic each time
    Eclipse is started.</para>

    <para>The installed license expires after a period of time
    (clearly visible to the user) and a new license has to
    be installed to continue to use JSure.</para>

    <para>Licenses can be installed more than once.  Thus, one
    license can be used for all of an organization or SureLogic can
    issue one per location or one per organizational entity.</para>

    <para>If the JSure Eclipse plug-in does not have a valid
    license it will not affect the Eclipse installation that JSure
    is installed into. The IDE will load and function normally, but
    when JSure functions are executed they will fail noting the
    lack of a license. Serviceability functions of the tool (e.g.,
    sending problem reports to SureLogic, installing and
    uninstalling licenses) function properly without a license.  The
    unlicensed JSure plug-in can be uninstalled or disabled within
    Eclipse.</para>

    <para>When you receive a license file from SureLogic it is
    installed via this dialog.  To install the license select the
    row in the license table that matches the type of license.  For
    example, if you have been sent a JSure license select the
    JSure row in the license table.  Next press the
    <guibutton>Install from File</guibutton> or <guibutton>Install from Clipboard</guibutton>
    button depending upon if you saved your license
    to a file or copied it from an email.  Once the license is loaded press <guibutton>Activate</guibutton>
    to activate it with SureLogic. The tool checks
    with SureLogic and reports that your license has been installed
    and returns showing information about the installed license. The
    license file is not examined by the tool after the installation
    is completed unless you install the file again (after an
    uninstall).</para>

    <para>To uninstall a license, select the row in the license
    table and press the <guibutton>Uninstall
    License</guibutton>. You will be asked if you are sure you want
    to uninstall the license.  If you confirm the uninstall then the
    license is removed.  This may take a minute as SureLogic is
    informed that your license has been uninstalled.</para>

    <para>When a license is nearing expiration the tool warns the
    user with the dialog shown in <xref
    linkend="fig-license-management-expiration-warning" /></para>

    <figure id="fig-license-management-expiration-warning">
      <title>Dialog warning that the installed JSure license is about to expire</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/license-management-expiration-warning.png"/></imageobject>
      </mediaobject>
    </figure>

    <para>When a license does expire it disappears from the dialog.
    The tool is considered unlicensed at that point. To fix this
    situation install a new license (it is not required to install a
    new version of JSure).</para>
  </section>

  <section id="sec-bugs-and-tips">
    <title>Bugs and tips</title>

    <para>JSure allows any user to send problem reports and suggestions
    to SureLogic from the main menu. Selecting
    <menuchoice><guimenu>JSure</guimenu> <guimenuitem>Send Tip for
    Improvement</guimenuitem></menuchoice> or
    <menuchoice><guimenu>JSure</guimenu> <guimenuitem>Send Problem
    Report</guimenuitem></menuchoice> allows a tip or problem report to
    be send to SureLogic directly within Eclipse as shown in <xref
    linkend="fig-bugs-and-tips-main-menu-service"/>. These menu choices
    bring up dialogs that allow the user to control exactly what
    information is sent to SureLogic.  In addition, the user can preview
    the exact text that will be sent over the Internet.</para>

    <figure id="fig-bugs-and-tips-main-menu-service">
      <title>Menu items to send bugs and tips to SureLogic</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/bugs-and-tips-main-menu-service.png"/></imageobject>
      </mediaobject>
    </figure>

    <para>The <guimenuitem>Send Tip for Improvement</guimenuitem>
    command opens a dialog to allow entry of a suggestion by the
    user to improve the JSure tool as seen in <xref
    linkend="fig-bugs-and-tips-menu-send-tip" />. The dialog allows the
    user to control exactly what information is sent to SureLogic.
    In addition, the user can preview and edit the exact text
    that will be sent. If you have no Internet connection you can
    print or save the text of your problem report (to fax or email).</para>

    <figure id="fig-bugs-and-tips-menu-send-tip">
      <title>Dialog allowing the user to enter a tip to improve JSure</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/bugs-and-tips-menu-send-tip.png"/></imageobject>
      </mediaobject>
    </figure>

    <para>The <guimenuitem>Send Problem Report</guimenuitem> command
    opens a dialog to allow entry of a problem report by the user
    about the JSure tool as seen in <xref
    linkend="fig-bugs-and-tips-menu-problem-report" /> The dialog
    allows the user to control exactly what information is sent to
    SureLogic.  In addition, the user can preview and edit the exact text
    that will be sent. If you have no Internet connection you can
    print or save the text of your problem report (to fax or email).</para>

    <figure id="fig-bugs-and-tips-menu-problem-report">
      <title>Dialog allowing the user to enter a problem report about JSure</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/bugs-and-tips-menu-problem-report.png"/></imageobject>
      </mediaobject>
    </figure>
    
        <para>The <guimenuitem>Send Library Annotation Changes</guimenuitem> command
    opens a dialog to allow the user to send any library annotation changes that they
    have made to SureLogic to be added into the standard set of annotations shipped with the
    JSure tool. The dialog that opens is seen in <xref
    linkend="fig-bugs-and-tips-menu-library-annotations" /> The dialog
    allows the user to control exactly what information is sent to
    SureLogic.  In addition, the user can preview and edit the exact text
    that will be sent. If you have no Internet connection you can
    print or save the text of your annotation changes (to fax or email).</para>

    <figure id="fig-bugs-and-tips-menu-library-annotations">
      <title>Dialog allowing the user to send library annotations to SureLogic</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/bugs-and-tips-menu-library-annotations.png"/></imageobject>
      </mediaobject>
    </figure>

    <para>Messages sent from these dialogs go over HTTP to
    SureLogic. If a proxy is used on your network then you may need
    to configure Eclipse to use it.  To do this open the
    Eclipse <guilabel>Preferences</guilabel> and examine the
    <guilabel>Network Connections</guilabel> under the
    <guilabel>General</guilabel> preferences.  This dialog allows
    you to configure Eclipse for your network.</para>

  </section>
</chapter>
