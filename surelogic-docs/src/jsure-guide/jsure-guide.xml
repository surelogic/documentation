<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../lib/docbook-xml-4.5/docbookx.dtd">

<book id="jsure-examples" lang="en-US"
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>JSure User Guide</title>
  <subtitle>How to use and configure the JSure Eclipse client</subtitle>
  <bookinfo>
    <copyright>
      <year>2012</year>
      <holder>SureLogic, Inc.</holder>
    </copyright>
    <legalnotice>
      <para>The authors and publishers have taken care in the
      preparation of this documentation, but make no expressed or
      implied warranty of any kind and assume no responsibility for
      errors and omissions. No liability is assumed for incidental or
      consequential damages in connection with or arising out of the use
      of the information or programs herein.</para>
    </legalnotice>
    <pubdate>Version 4.3.4&mdash;November 2012</pubdate>
  </bookinfo>

  <preface id="preface">
    <title>Preface</title>
    <sect1>
      <title>Audience</title>
      <para>This document is intended for Java developers who want to
      use the JSure tool within the Eclipse Java IDE. We assume
      that the reader understands both the Java programming language and
      the use of Eclipse for Java development.</para>
    </sect1>
    <sect1>
      <title>Contact information</title>
      <para>For technical support or other questions, please
      contact:</para>
      <para><email>support@surelogic.com</email></para>
      <para>5808 Forbes Avenue, Pittsburgh, PA 15217-1602</para>
    </sect1>
  </preface>

  <xi:include href="chapter-getting-started/chapter.xml"/>

  <!-- ************************************************************ /-->
  <!-- Out of date: Not sure what to replace this with right now. -->
  <!--xi:include href="chapter-understanding-assurance-output/chapter.xml"/-->
  <!-- ************************************************************ /-->

  <xi:include href="chapter-reference/chapter.xml"/>

  <chapter>
    <title>Release notes</title>
    <para>For each release of JSure there are new and noteworthy
    features to try out, and known limitations to avoid or
    workaround. These are presented in the sections below for each
    released version of JSure.</para>

	<section id="sec-jsure-release-4-3-4">
		<title>JSure version 4.3.4</title>
		<para>This section describes the 4.3.4 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>
			<orderedlist>
				<listitem>
					<para>
						<emphasis>Re-verify a scan in the JSure Scans view</emphasis>
						&mdash;
						It is now possible to start a new scan by selecting a previous scan in the
						JSure scans view. This avoids having to check that you have the correct set
						of projects selected when you start a new scan. You select a scan and press the
						<inlinegraphic fileref="images/jsure_re_verify.gif"/> icon on
						the view toolbar or choose <guilabel>Re-Verify</guilabel> on the context menu.
						The image below highlights these new commands in the <guilabel>JSure Scans</guilabel>
						view.
					</para>
					
					<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-434-re-verify.png" />
							</imageobject>
					</mediaobject>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Major scan file format changes</emphasis>
						&mdash;
						A large number of changes to the data file formats that
						communicate JSure scan results
						to the Eclipse tool user interface
						have been made. It is recommended to delete your old
						scans and
						reset the JSure perspective after upgrading to this tool release.
						Also please read
						<emphasis>Old scans may or may not work properly</emphasis> in the
						list of known problems below.
					</para>
				</listitem>
			</orderedlist>
		</section>

	<section>
		<title>Known Problems</title>
		<para>This section describes known limitations in this
			version of
			JSure.
		</para>
		<orderedlist>
			<listitem>
				<para>
					<emphasis>JSure views missing or Verify Project keyboard shortcut
						not working properly
					</emphasis>
					&mdash;
					Many of the JSure views have changed. You may get exceptions
					or missing
					views on Eclipse startup after installing this version of
					JSure. You should reset the JSure perspective to fix this problem.
				</para>
				<para>
					If problems persist, or your
					<guilabel>Verify Project</guilabel>
					keyboard shortcut is not working properly this is because
					Eclipse is
					caching information about the old JSure version. You need to
					delete
					the Eclipse cache file. In Eclipse 4.2 delete the file in your
					workspace called
					<guilabel>.metadata\.plugins\org.eclipse.e4.workbench\workbench.xmi
					</guilabel>
					. In earlier versions of Eclipse delete
					<guilabel>.metadata\.plugins\org.eclipse.workbench\workbench.xml
					</guilabel>.
					This removes all cache information about your Eclipse perspective
					layout, note that it doesn't touch your project setup or files&mdash;just
					user interface layout preferences such as where a view is placed.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>Old scans may or may not work properly</emphasis>
					&mdash;
					The changes to the data file formats that communicate JSure
					scan results to the Eclipse tool user interface
					are not as backwards compatible as we had hoped. Please do not upgrade to this
					release until you can clear out old scans.
					 It is suggested that you delete all old
					scans by removing <guilabel>.jsure-data</guilabel> from your workspace
					directory. Some older scans may load fine, but we have noted problems with
					the new scan-difference features and user interface improvements that
					this JSure release includes.
				</para>
			</listitem>

		</orderedlist>
	</section>
	</section>
    
            <section id="sec-jsure-release-4-3-3">
		<title>JSure version 4.3.3</title>
		<para>This section describes the 4.3.3 version of the JSure Eclipse	client.</para>
				
			<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.</para>
			<orderedlist>
			    <listitem>
					<para>
						<emphasis>An Eclipse toolbar icon to launch a JSure scan</emphasis>
						&mdash;
						The Eclipse toolbar has been augmented, as shown in the screenshot
						below, to include an icon that can launch a scan.</para>
						
					 	<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-433-toolbar.png" />
							</imageobject>
						</mediaobject>
						
					 	<para>This enhancement was tracked
						<ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=103">here</ulink>.</para>
				</listitem>		
				<listitem>
					<para>
						<emphasis>Indicator of modeling problems added to the Verification Status view</emphasis>
						&mdash;
						JSure now gives an indication of modeling problems in the <guilabel>Verification Status</guilabel> view via a toolbar icon.
						Several JSure users open the <guilabel>Verification Status</guilabel> view in non-JSure perspectives, such as the Java
						perspective, and previously it was difficult to know if any modeling problems exist in scanned projects
						if only this view is opened. Modeling problems are listed in the <guilabel>Modeling Problem</guilabel> view not in the <guilabel>Verification
						Status</guilabel> view&mdash;which only reports consistency results on valid models.</para>
						
					 	<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-433-indicator.png" />
							</imageobject>
						</mediaobject>
						
					 	<para>The image above shows the new indicator icon when modeling problems exist in the
					 	project (top) and when they donâ€™t (bottom).</para>
					 	
					 	<para>This enhancement was tracked
						<ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=104">here</ulink>.</para>
				</listitem>		
				<listitem>
					<para>
						<emphasis>Verification of @AnnotationBounds annotation</emphasis>
						&mdash;
						This annotation is used to add constraints to the formal type parameters of
						the annotated type. Essentially, it is a way to add
						<code>@Containable</code>, <code>@Immutable</code>, and
						<code>@ThreadSafe</code> annotations to the formal type parameters.
						Annotating a type formal this way establishes a bound on the type actual that
						may be passed to the type when the generic type is instantiated. For example,
						consider the generic class <code>C</code>

<programlisting>
&#64;AnnotationBounds(containable="T")
public class C&lt;T&gt; {
  &hellip;
}
</programlisting>

						The type formal <code>T</code> has the annotation bound
						<code>&#064;Containable</code>, meaning that it can only be instantiated with
						a type actual <emphasis>A</emphasis> such that the implementation of
						<emphasis>A</emphasis> is containable.</para>
						
						<para><emphasis>Why is this annotation needed? What motivates its inclusion in the set
						of constraints that JSure verifies?</emphasis> Collection classes pose a challenge for concurrency.  It is not enough
						for the collection implementation, such as <code>CopyOnWriteArrayList</code>, to be thread safe:
						the objects places in the collection must also be thread safe.  Because the collection may be
						manipulated by more than one thread, the contents of the collection may be manipulated by multiple
						threads as well.  Thus the safety of a "thread safe" collection really depends on the thread safety
						of the elements placed into it.  This leads to the requirement that a thread safe collection is
						thread safe only if the type of the elements places in the collection is thread safe.  Rather than
						treat collections specially, JSure uses a new annotation on type declarations, <code>@AnnotationBounds</code>, that is used to place
						annotations on the formal type parameters of the declared type.  This provides a generic
						technique for requiring that a type formal be passed an actual type
						that is <code>@Immutable</code>, <code>@Containable</code>, or <code>@ThreadSafe</code>.
						For example, JSure's libraries annotate <code>java.util.concurrent.CopyOnWriteArrayList</code> as follows:

<programlisting>
&#64;ThreadSafe
&#64;AnnotationBounds(threadSafe="E")
public class CopyOnWriteArrayList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable {
  &hellip;
}
</programlisting>

This effort is still very much a work in progress and this annotation should be for trial use only.
    </para>
				</listitem>				
			</orderedlist>
		</section>
		
		<section>
			<title>Known Problems</title>
			<para>This section describes known limitations in this
				version of JSure.</para>
			<orderedlist>
				<listitem>
					<para>
						<emphasis>Output from Unique+From analysis can be difficult to understand</emphasis>
						&mdash;
						The new <emphasis>unique+from</emphasis> analysis outputs cryptic messages in many cases and an update
						is under development to add "side-effecting"
						output to this analysis in the next release. This approach to output will improve user messages, especially for
						inconsistent results.</para>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Nullable annotations are not verified</emphasis>
						&mdash;
						This release contains annotations for constraining the use of null values in a Java program. These annotations include
						<code>@NonNull</code>, <code>@Nullable</code>, and <code>@Raw</code>. These are included for initial use in user code.
						This version of JSure, however, does not verify these annotations. This engineering is underway and full support is
						expected in a future release.</para>
				</listitem>
				
			</orderedlist>
		</section>
	</section>
    
        <section id="sec-jsure-release-4-3-2">
		<title>JSure version 4.3.2</title>
		<para>This section describes the 4.3.2 version of the JSure Eclipse
			client.
		</para>
		
		
			<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.</para>
			<orderedlist>
			    <listitem>
					<para>
						<emphasis>The location of XML "diff" library annotations can be changed</emphasis>
						&mdash;
						A new preference allows the directory where changes and additions to library
						annotations are stored to be changed</para>
						
					 	<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-432-xmlpromisespath.png" />
							</imageobject>
						</mediaobject>
						
					 	<para>This allows the library annotation files to be, for example, placed under
					 	    a source code control system and shared between all programmers in a team.
					 	    This change is not yet well integrated into the views and editors that support
					 	    library annotation. Therefore, it is recommended that you close all editors before,
					 	    and restart Eclipse after, changing this setting.</para>
				</listitem>				
			</orderedlist>
		</section>
		
		<section>
			<title>Known Problems</title>
			<para>The known problems are unchanged from JSure version 4.3.1.</para>
		</section>
	</section>
    
    
    <section id="sec-jsure-release-4-3-1">
		<title>JSure version 4.3.1</title>
		<para>This section describes the 4.3.1 version of the JSure Eclipse
			client.
		</para>
		
		
			<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.</para>
			<orderedlist>
			    <listitem>
					<para>
						<emphasis>The retention of all promises was changed to <code>RUNTIME</code></emphasis>
						&mdash;
						The SureLogic annotations now have a retention of <code>RUNTIME</code>. This allows (1) annotations
						to be read from binary libraries, and (2) the annotations to be accessed at runtime by Flashlight.</para>
				</listitem>
			    
				<listitem>
					<para>
						<emphasis>Fixed Unique+From analysis crash examining some <code>enum</code> constants</emphasis>
						&mdash;
						The new <emphasis>unique+from</emphasis> analysis could crash when examining some enum constants.
						This has been fixed in this release</para>
						
					<para>This problem in the previous release was tracked
						<ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=97">here</ulink>.</para>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Annotations are now read from within binary libraries</emphasis>
						&mdash;
						This release examines libraries on the classpath to see if they contain compiled promise annotations.
						The promises must be made as Java language annotations (not Javadoc) to be recognized by the tool.</para>
				</listitem>
				
			</orderedlist>
		</section>
		
		<section>
			<title>Known Problems</title>
			<para>The known problems are unchanged from JSure version 4.3.0 except for the fix
			    to the <emphasis>unique+from</emphasis> analysis noted above.</para>
		</section>
		
	</section>
    
    <section id="sec-jsure-release-4-3-0">
		<title>JSure version 4.3.0</title>
		<para>This section describes the 4.3.0 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.</para>
			<orderedlist>
				<listitem>
					<para>
						<emphasis>Unique+From analysis replaces old Uniqueness analysis</emphasis>
						&mdash;
						This release contains an initial release of the <emphasis>unique+from</emphasis> analysis that
						provides improved performance and precision compared to the old uniqueness analysis.
						In particular iterators are handled more precisely and checks are made to ensure
						that methods called within an iterator block do not read the collection&mdash;except, of course, through the iterator.
						The new analysis outputs cryptic messages in many cases and an update is under development to add "side-effecting"
						output to this analysis in the next release. This approach to output will improve user messages, especially for
						inconsistent results.</para>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Thousands of annotations made on the Java standard library</emphasis>
						&mdash;
						This release contains thousands of new annotations on the Java standard library. This work focused on <classname>java.lang</classname>,
						<classname>java.util</classname>, and <classname>java.util.concurrent</classname>. Work is ongoing to improve Java standard library annotation,
						but this release completes the collections framework and much of util.concurrent. We plan to continue this work over the next several release.
						</para>
						
					<para>We only used the JSure library annotation editor and tools to perform this annotation work,
					    which has improved the features supported by these tools (as discussed below). Also, the format of the
					    XML files stored on the disk was changed to make it much easier to inspect (these files can be viewed in the library
					    annotation editor). This can be useful when checking if a particular annotation exists.</para>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Library Annotation system improved</emphasis>
						&mdash;
						This release contains several minor updates to the library annotation system that make it more usable. First, the editor
						implements copy and paste on elements or whole types. This greatly aids annotation of class hierarchies where the
						tool mandates annotation consistency (or it reports modeling problems). An <guilabel>Annotation Explorer</guilabel>
						has been added to the tool. It changes during each scan and shows what annotations the tool saw on libraries and source code
						during a particular scan. It can be helpful to track down if a particular annotation ended up where the user wanted it to.
						</para>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Tool option added to check if library annotations are consistent</emphasis>
						&mdash;
						One issue when working on library annotations is to ensure that annotations are consistent across classes.
						JSure makes this a particular challenge because it avoids loading binary classes if they are not referenced by the
						project being scanned. Therefore, several classes that should have annotations may be skipped during a scan.
						To assist with this problem a new preference has been added that forces JSure to load the entire classpath of a project during
						a scan. This greatly slows performance and uses additional memory, but is very helpful for testing that library annotations
						are consistent.  This preference is shown in the image below.
						</para>
						
					    <mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-430-loadEntireClasspath.png" />
							</imageobject>
						</mediaobject>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Library Annotation changes can be sent to SureLogic</emphasis>
						&mdash;
						If you make changes or additions to the annotations on the Java standard library. It is now possible to send
						these as inputs to SureLogic so that they can be included in future JSure releases. A main menu choice selects
						this feature as shown below.
						</para>
						
					     <mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-430-sendAnnotations.png" />
							</imageobject>
						</mediaobject>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Static added as a predefined region</emphasis>
						&mdash;
						This release contains a new predefined region named 'Static'. This region refers to all the static state within a class
						(it is like a static version of the predefined 'Instance' region). This new predefined region is most useful for library
						annotations where it is undesirable to name static fields directly (especially if they are not public), but can be used
						in any code. An example of using 'Static' is shown on the last method in the listing below.
						</para>
						<programlisting>
package com.surelogic.advanced;

import com.surelogic.InRegion;
import com.surelogic.Region;
import com.surelogic.RegionEffects;

/* Declare a new public static abstract region S */
@Region("public static S")
public class StaticState {
  /* Declare that the field is a subregion of the abstract region S */
  @InRegion("S")
  public static int staticField = 1;

  @RegionEffects("reads S")
  public static int getStaticField() {
    return staticField;
  }

  @RegionEffects("reads Static") // NEW -- a predefined region 'Static'
  public static int getStaticFieldAnotherWay() {
    return staticField;
  }
}
</programlisting>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Nullable annotations added</emphasis>
						&mdash;
						This release contains annotations for constraining the use of null values in a Java program. These annotations include
						<code>@NonNull</code>, <code>@Nullable</code>, and <code>@Raw</code>. These are included for initial use in user code.
						This version of JSure, however, does not verify these annotations. This engineering is underway and full support is
						expected in a future release.
						</para>
				</listitem>
			</orderedlist>
		</section>
		<section>
			<title>Known Problems</title>
			<para>This section describes known limitations in this
				version of JSure.</para>
			<orderedlist>
			    <listitem>
					<para>
						<emphasis>Unique+From analysis can crash when examining some <code>enum</code> constants</emphasis>
						&mdash;
						The new <emphasis>unique+from</emphasis> analysis could crash when examining some enum constants.
						This has been fixed in the 4.3.1 release</para>
						
					<para>This problem was tracked
						<ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=97">here</ulink>.</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Output from Unique+From analysis can be difficult to understand</emphasis>
						&mdash;
						The new <emphasis>unique+from</emphasis> analysis outputs cryptic messages in many cases and an update
						is under development to add "side-effecting"
						output to this analysis in the next release. This approach to output will improve user messages, especially for
						inconsistent results.</para>
				</listitem>
				
				<listitem>
					<para>
						<emphasis>Nullable annotations are not verified</emphasis>
						&mdash;
						This release contains annotations for constraining the use of null values in a Java program. These annotations include
						<code>@NonNull</code>, <code>@Nullable</code>, and <code>@Raw</code>. These are included for initial use in user code.
						This version of JSure, however, does not verify these annotations. This engineering is underway and full support is
						expected in a future release.</para>
				</listitem>
				
			</orderedlist>
		</section>
	</section>

	<section id="sec-jsure-release-4-2-1">
		<title>JSure version 4.2.1</title>
		<para>This section describes the 4.2.1 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.</para>
			<orderedlist>
				<listitem>
					<para>
						<emphasis>Scan crash on multiple proposals on a declaration fixed</emphasis>
						&mdash;
						The 4.2.0 release could crash on a scan of code that resulted in
						multiple proposed promises
						on a single Java declaration. This problem has been fixed in this release.</para>

					<para>This problem in the previous release was tracked
						<ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=81">here</ulink>.</para>
				</listitem>
			</orderedlist>
		</section>
		<section>
			<title>Known Problems</title>
			<para>There are no known problems in this JSure version.</para>
		</section>
	</section>
    
    	<section id="sec-jsure-release-4-2-0">
		<title>JSure version 4.2.0</title>
		<para>This section describes the 4.2.0 version of the JSure Eclipse
			client.</para>
			
		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.</para>
			<orderedlist>
				<listitem>
					<para><emphasis>Enhanced library annotation editor</emphasis>
						&mdash;
						The library annotation editor was added to the tool in JSure 4.1.0
						to allow tool users to browse annotations made in XML files about
						binary libraries&mdash;typically represented as JAR files in Java.</para>
						
						<para>The editor has been enhanced in this release. The textual labels on annotations
						now more closely match the annotation in Java code. In addition, a dialog editor, shown in the screenshot below, replaces
						the complex in-place editing.</para>
						
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-420-editUnique.png" />
							</imageobject>
						</mediaobject>
						
						<para>The new dialog-based editing is more flexible and allows full control of all attributes 
						of the annotation. The previous in-place editing approach did not allow modification of boolean
						attributes on the annotation, such as the <guilabel>allowRead</guilabel> attribute shown in the dialog above).</para>
						
						<para>We have also added the ability to revert edits on a single annotation to the
						baseline shipped from SureLogic.</para>
				</listitem>
				
				<listitem>
					<para><emphasis>Search dialog added to open the Library Annotation Editor on any type</emphasis>
						&mdash;
						Selecting the <inlinegraphic fileref="images/open_xml_type.gif"/> <guilabel>Open Library Annotations...</guilabel> option from the
						JSure main menu or the view menu (or toolbar) of the <guilabel>Library Annotation Explorer</guilabel> opens a dialog similar to the Eclipse
						<guilabel>Open Type</guilabel> dialog. This allows you to search all the types known to Eclipse and open one of them in the library
						annotation editor.</para>
						
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-420-openXML.png" />
							</imageobject>
						</mediaobject>
						
						<para>This capability makes it easy to get into the library annotation editor on any
						type. This was difficult to do in the previous release because the <guilabel>Library Annotation Explorer</guilabel>
						view only shows	types that currently have annotations. It is also possible to open the library annotation editor from the
						<guilabel>JSure</guilabel> context menu on class files and types in many standard Eclipse Java views, however, this new
						search dialog is far more discoverable by tool users.</para>
				</listitem>
				
				<listitem>
					<para><emphasis>Tool proposals to fix modeling problems</emphasis>
						&mdash;
						Modeling problems in the <guilabel>Modeling Problems</guilabel> view identified
						by <inlinegraphic fileref="images/annotation_error_proposed.gif"/>
						(note the + to the upper-right) now can be resolved with an automatic edit. Select the
					    problem and choose <menuchoice><guimenu>Annotate
					    Code To Fix...</guimenu></menuchoice> from the view's context
					    menu and the tool will automatically fix the modeling problem. The edit is previewed before it is made to the code.</para>
						
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-420-fixProblem.png" />
							</imageobject>
						</mediaobject>
						
						<para>This capability was driven by modeling problems introduced by adding library annotations that cause annotation
						consistency problems in the source code. Typically, the tool wants a consistent annnotation placed in the source code
						but the problem description does not convey this requirement clearly. By proposing the fix as an automatic edit
						to the source code it makes the tool's desire clear to the tool user.</para>
				</listitem>
				
				<listitem>
					<para><emphasis>The Proposed Promise view can display proposals in the context of a Java declaration tree</emphasis>
						&mdash;
						The tabular view used by the  <guilabel>Proposed promise</guilabel> view did not scale well to large numbers of proposals.
						A tree mode has been added to this view to allow the user to view the proposals in the context of the targeted Java declarations. This new
						tree mode is the default view, however, the tool user can toggle between this mode and the older tabular mode.</para>
						
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-420-treeProposedPromises.png" />
							</imageobject>
						</mediaobject>
						
						<para>This capability was driven to help "scale up" the view to manage large numbers of proposals by JSure. In addition, filtering capabilities
						have been added to the view. These capabilities are described fully in <xref linkend="ref-proposed-promise-view"/>.</para>
				</listitem>
				</orderedlist>
		</section>

		<section>
			<title>Known Problems</title>
			<para>This section describes known problems in this
				version of JSure.</para>
			
			<orderedlist>
				<listitem>
					<para>
						<emphasis>Scan crash may occur if multiple proposals are made to a declaration</emphasis>
						&mdash;
						This release could crash on a scan of code that resulted in
						multiple proposed promises
						on a single Java declaration. These proposals are made by the tool and
						cannot be controlled by the user. In some cases the scan will complete but the
						<guilabel>Proposed Promises</guilabel> view will report a sorting exception and fail.
						Upgrade to the 4.2.1 release to resolve this problem.</para>

					<para>This problem in this release was tracked
						<ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=81">here</ulink>.</para>
				</listitem>
			</orderedlist>
		</section>
	</section>

	<section id="sec-jsure-release-4-1-1">
		<title>JSure version 4.1.1</title>
		<para>This section describes the 4.1.1 version of the JSure Eclipse
			client.</para>
			
		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.</para>
			<orderedlist>
				<listitem>
					<para><emphasis>Fixed view to examine library annotations</emphasis>
						&mdash;
						The <guilabel>Library Annotation Explorer</guilabel> view was added to the tool in JSure 4.1.0 to allow tool users to browse annotations made in XML files about
						binary libraries&mdash;typically represented as JAR files in Java.</para>
						
						<para>In the 4.1.0 release of JSure this view failed on some operating systems and versions of Eclipse with the
						message <emphasis>Could not create view: URI is not hierarchical</emphasis>. This was due to a code bug where the directory location
						that contains the XML files that annotate the Java standard library was being calculated in a non-robust manner. This problem has been fixed
						in this release.</para>
						
						<para>This problem in the previous release was tracked <ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=78">here</ulink>.</para>
				</listitem>
				</orderedlist>
		</section>

		<section>
			<title>Known Problems</title>
			<para>There are no know problems in this JSure version.</para>
		</section>
	</section>
    
    	<section id="sec-jsure-release-4-1-0">
		<title>JSure version 4.1.0</title>
		<para>This section describes the 4.1.0 version of the JSure Eclipse
			client.
		</para>
		<section>
			<title>New and Noteworthy</title>

			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>

			<orderedlist>
				<listitem>
					<para><emphasis>New user interface to view library annotations</emphasis>
						&mdash;
						The <guilabel>Library Annotation Explorer</guilabel> view has been added to the tool to allow tool users to browse annotations made in XML files about
						binary libraries&mdash;typically represented as JAR files in Java.</para>

						<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-410-explorer.png" />
							</imageobject>
						</mediaobject>
						
						<para>The view uses the '&gt;' symbol (similar to source code control systems in Eclipse) to track user changes/additions to the standard annotations that ship
						with JSure from SureLogic. It is possible to only show user modified annotations by pressing the <emphasis>Show only user-added/modified
						library annotations</emphasis> toolbar button: <inlinegraphic fileref="images/annotation_delta.gif"/> (shown to the upper-right of the screenshot above).</para>
						
						<para>This view appears in the <guilabel>Code Verification</guilabel> perspective, however, tool users may need to reset the perspective
						or open the view to have it appear when upgrading from a prior release of JSure.</para>
				</listitem>
				
				<listitem>
					<para><emphasis>New user interface to add/edit library annotations</emphasis>
						&mdash;
						A structure editor has been added to the JSure tool to allow the user to
						edit annotations in XML files about
						binary libraries&mdash;typically represented as JAR files in Java.</para>

						<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-410-editorObject.png" />
							</imageobject>
						</mediaobject>
						
						<para>The <emphasis>Editor</emphasis> tab shows a tree of the declarations in the Java type. The
						user can select an element and right-click to add an annotation. The two other tabs do not
						allow editing (in this release&mdash;this may change in a future release). When annotations are added to an element the proper
						XML is automatically created by the editor (this is complex due to the "diff" approach used by JSure for library annotations as discussed below). The <emphasis>Source</emphasis>
						tab shows the XML file about this type that shipped with JSure from Surelogic. The <emphasis>Diffs</emphasis> tab
						shows any user changes to the annotations about this type.</para>
				</listitem>
				
				<listitem>
					<para><emphasis>Support for user library annotation (difference tracking)</emphasis>
						&mdash;
						The JSure user interface enhancements to support library annotation are discussed above. This section
						introduces the infrastructural changes that were added to JSure in this release to effectively
						allow user library annotation across a series of tool releases and manage updates to the standard annotations.
					</para>
					<para>Library annotation refers to the ability to place code annotations in binary libraries&mdash;typically
					represented as JAR files in Java. The approach used by the JSure tool has been to allow creation of XML
					files that specify the class and declaration that a particular annotation is placed on. For example, consider
					the partial XML file for <code>java.lang.Object</code> listed below. The XML version of annotations on a library class can be viewed
					using the <emphasis>Source</emphasis>tab in the XML annotation editor.
					<programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;package name="java.lang"&gt;
  &lt;class name="Object"&gt;
    ...
    &lt;method name="notify"&gt;
      &lt;RegionEffects&gt;none&lt;/RegionEffects&gt;
      &lt;RequiresLock&gt;MUTEX&lt;/RequiresLock&gt;
      &lt;Starts&gt;nothing&lt;/Starts&gt;
    &lt;/method&gt;
    ...
  &lt;/class&gt;
&lt;/package&gt;</programlisting>

Three annotations are specified for the notify method of <code>java.lang.Object</code>. The annotations are
equivalent to the following source code annotations on the notify method.
<programlisting>
@RegionEffects("none")
@RequiresLock("MUTEX")
@Starts("nothing")
public final native void notify();</programlisting>
The XML file released with JSure for the <code>java.lang.Object</code>is immutable in the sense that it cannot be changed by the tool user.
However, if the tool user uses the XML library annotation editor to</para>
<itemizedlist>
<listitem><para>Delete the <code>@Starts("nothing")</code> promise on the notify method</para></listitem>
<listitem><para>Add an <code>@Vouch("Immutable")</code> promise to the notify method</para></listitem>
</itemizedlist>
		<para>A "delta" or "diff" approach is taken to track the changes made by the tool user.
		The original XML file for <code>java.lang.Object</code> remains unchanged but a new XML file is created in the
		user's workspace that contains the following XML that tracks what has been changed. This file can be viewed using the <emphasis>Diffs</emphasis>
		tab in the XML annotation editor.
		
	<mediaobject>
		<imageobject>
			<imagedata fileref="images/release-notes-410-diffs.png" />
		</imageobject>
	</mediaobject>
		
The deletion of the <code>@Starts</code> annotation is noted as well as the new <code>@Vouch</code> annotation. The <code>@Vouch</code>
annotation is "dirty" in the sense that it isn't in the immutable/standard XML. A '&gt;' symbol in the <guilabel>Library Annotation Explorer</guilabel>
view is used to point out to the user that a change has been made to the set of standard library annotations released with the JSure tool.</para>

	<mediaobject>
		<imageobject>
			<imagedata fileref="images/release-notes-410-explorerObjectNotify.png" />
		</imageobject>
	</mediaobject>

<para>The JSure analysis reads in both the standard/immutable XML as well as any user diff-XML files when it
performs a verifying analysis of a Java project.</para>
<para>Tracking change to library annotation in this manner has several advantages:</para>
<itemizedlist>
<listitem><para>It is simple to see (as shown in the screenshot above) what has been changed from the standard set of
annotations.</para></listitem>
<listitem><para>User annotations can be sent to SureLogic for possible inclusion in the standard set of
annotations.</para></listitem>
<listitem><para>User annotations can be identified and sent in bug reports about JSure.</para></listitem>
<listitem><para>Updates from SureLogic to the immutable/standard annotations can be merged with user
annotations without the user losing all their work when the update overwrites their changes.</para></listitem>
<listitem><para>Users can be notified if any of their annotations conflict after a SureLogic update to the
immutable/standard annotations. Warning symbols <inlinegraphic fileref="images/warning.gif" /> will appear in the <guilabel>Library Annotation Explorer</guilabel> view after a tool update if conflicts exist.
Each warning can then be examined and fixed by the tool user.</para></listitem>
</itemizedlist>
<para>This "diff" approach to library annotation appears to be flexible enough for SureLogic to support
"annotation packs" for specific JRE releases in a future JSure release. Currently OpenJDK and the
OracleJDK are implemented differently requiring some changes to annotations on the standard library.
We are considering JRE-specific "annotation packs" that use this delta/diff approach in a future tool release.</para>
				</listitem>

				<listitem>
				<para><emphasis>Changes to the upper-bound effects verifying analysis to support uniqueness+from</emphasis>
					&mdash;
					The upper-bound effects analysis has been changed to support the
					<emphasis>uniqueness+from</emphasis>
					analysis that is under development by SureLogic (this analysis helps JSure better support Java constructs such as iterators).
					In particular, the following changes to the analysis were made:
				</para>
				<orderedlist>
					<listitem>
						<para>Effects on a <code>@Borrowed</code> (or <code>@BorrowedInRegion</code>) field are
							aggregated just as we have always
							done with <code>@Unique</code> and <code>@UniqueInRegion</code> fields. That is when we have an
							effect on a region
							<code>R</code> of an object referenced by the expression <code>e.f</code>, where <code>f</code> is a
							<code>@Borrowed</code> field, we convert it to an
							effect on a region <code>Q</code> of the object referenced by the expression <code>e</code>, where <code>Q</code>
							is determined based on
							the region mapping associated with the <code>@Borrowed</code> or <code>@BorrowedInRegion</code>
							annotation.
						</para>
					</listitem>
					<listitem>
						<para>An error is reported when there is an effect on a region of an
							object referenced by the expression
							<code>e.f</code>, where <code>f</code> is <code>@ReadOnly</code> and <code>@Borrowed</code> (or <code>@BorrowedInRegion</code>). This is
							because a
							<code>@ReadOnly</code> field cannot be used to mutate the referenced object. Normally the
							uniqueness flow
							analysis checks that <code>@ReadOnly</code> references are used correctly, but the
							uniqueness analysis does
							not actually model <code>@ReadOnly</code> <code>@Borrowed</code> fields (it would further
							complicate the state lattice
							described last month), so the effects assurance must check for this.
						</para>
					</listitem>
					<listitem>
						<para>A read effect on a region of an object referenced by the
							expression <code>e.f</code> where <code>f</code> is <code>@Immutable</code> is
							ignored and not reported; an empty effect is reported instead (see the
							section below on reporting
							empty effects). It is not possible to have a write effect via an
							<code>@Immutable</code> field because that is
							an erroneous use of the field that is reported by the uniqueness flow
							analysis.
						</para>
					</listitem>
					<listitem>
						<para>A read effect on a region of an object referenced by the
							expression <code>e.f</code> where <code>f</code> is <code>@ReadOnly</code> are
							degraded to a read effect on the global region <code>Object:All</code>. This is necessary
							because a
							<code>@ReadOnly</code> field possibly refers to an object that is also referenced by a
							<code>@Unique(allowReads=true)</code> field. This object would be aggregated into
							the state of the
							object with the <code>@Unique(allowReads=true)</code> field. We do not have knowledge
							of which
							object this is, so we must be pessimistic and report that it may read from
							any object.
						</para>
					</listitem>
				</orderedlist>
				</listitem>
				
				<listitem>
					<para><emphasis>Improved upper-bound effects verifying analysis results too the tool users (reporting empty effects)</emphasis>
						&mdash;
						The effects analysis has been improved so the analysis results report some expressions where "nothing" was affected.
						These seemingly odd "nothing" reports are necessary because there are many expressions that look to the
						tool user like they should have an effect&mdash;but that do not.
						In particular, tool users have often been confused about why a read of a field is not shown to have an
						effect, only to realize later (or be told by someone else) that the field is declared to be <code>final</code>. Prior to the
						changes made for this release the effects analysis did not generated a result in a situation like
						this. Now instead, it generates an explicit effect on "nothing". Furthermore, results showing such an
						effect report additional evidence as to why there is no effect. Effects on "nothing" are reported in the
						following situations:</para>
						<itemizedlist>
						<listitem><para>When the reference to the object being affected is <code>null</code>. This situation usually comes about
						when <code>null</code> is used as the actual parameter in a method call, and that method is declared to affect
						the corresponding formal parameter in some way.</para></listitem>
						<listitem><para>When the region being affected is a <code>final</code> field.</para></listitem>
						<listitem><para>When the reference to the object being affected is <code>@Immutable</code>.</para></listitem>
						<listitem><para>When an effect of the actual implementation of a method is being compared to the declared
						effects of the method and the effect is on an object created within in the method body. Such
						effects used to be silently ignored. They are not "interesting" to the verifying analysis because
						objects created during the method's execution are not visible to the method's caller.</para></listitem>
						</itemizedlist>
 					<para>When a type hierarchy spans multiple Eclipse projects annotation
						consistency checks were not properly performed in the previous release.
						This limitation has been fixed in this release.
					</para>
					<para>This problem in the previous release was tracked <ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=75">here</ulink>.</para>
				</listitem>
			</orderedlist>
		</section>
		
		<section>
			<title>Known Problems</title>
			<para>This section describes known bugs and limitations in this	version of JSure.</para>
			<orderedlist>
				<listitem>
					<para>The <guilabel>Library Annotation Explorer</guilabel> view failes on some operating systems and versions of Eclipse with the
						message <emphasis>Could not create view: URI is not hierarchical</emphasis>. This was due to a code bug where the directory location
						that contains the XML files that annotate the Java standard library was being calculated in a non-robust manner. This problem has been fixed
						in the 4.1.1 release.</para>
						
						<para>This problem in this release was tracked <ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=78">here</ulink>.</para>
				</listitem>
				</orderedlist>
		</section>
	</section>

	<section id="sec-jsure-release-4-0-2">
		<title>JSure version 4.0.2</title>
		<para>This section describes the 4.0.2 version of the JSure Eclipse
			client.
		</para>
		<section>
			<title>New and Noteworthy</title>

			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>

			<orderedlist>
				<listitem>
					<para><emphasis>Subtype annotation consistency checks performed across multiple Eclipse projects</emphasis>
						&mdash;
						When a type hierarchy spans multiple Eclipse projects annotation
						consistency checks were not properly performed in the previous release.
						This limitation has been fixed in this release.
					</para>
					<para>This problem in the previous release was tracked <ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=69">here</ulink>.</para>
				</listitem>
				
				<listitem>
					<para><emphasis>Consistency checking of @ThreadSafe&mdash;@Immutable fixed</emphasis>
						&mdash;
						It is supposed to be the case that in some cases an immutable type can extend
						from an thread-safe type.  But the way this checking in the previous release
						was broken.  For example, if you have an @Immutable class that implements an
						@Immutable interface you get an modeling problem that the class needs to be
						@ThreadSafe	because it implements a @ThreadSafe interface.  This message was wrong.
						This limitation has been fixed in this release.
					</para>
					<para>This problem in the previous release was tracked <ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=70">here</ulink>.</para>
				</listitem>
			</orderedlist>
		</section>
		
		<section>
			<title>Known Problems</title>
			<para>The known problems are unchanged from JSure version 4.0.0.</para>
		</section>
	</section>

	<section id="sec-jsure-release-4-0-1">
		<title>JSure version 4.0.1</title>
		<para>This section describes the 4.0.1 version of the JSure Eclipse
			client.</para>
		<section>
			<title>New and Noteworthy</title>

			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>
			<orderedlist>
				<listitem><para><emphasis>Test code can be excluded from a scan using a property file</emphasis>
				&mdash;
				It is now possible to exclude test code from a JSure scan
      by creating a <filename>surelogic-tools.properties</filename> file at the root of each project
      that contains test code.
      
      <mediaobject>
				<imageobject>
					<imagedata fileref="images/release-notes-401-surelogic-tools-file.png" />
				</imageobject>
	  </mediaobject>
      
      For example, the screenshot above shows the use of the <filename>surelogic-tools.properties</filename>
	  to exclude the <filename>test</filename> source folder of <application>timingframework-core</application> Java project. 
      For more information on how to setup a <filename>surelogic-tools.properties</filename> file
      see <xref linkend="sec-surelogic-tool-properties-file"/>.</para>
      
      <para>The <guilabel>JSure Scans</guilabel> view has been updated to display the exclusions used when a scan was run.
      These may be different that the current state of the <filename>surelogic-tools.properties</filename> file. For the example
      of excluding the <filename>test</filename> source folder from the <application>timingframework-core</application> Java project the
      <guilabel>JSure Scans</guilabel> view is shown below.
      
       <mediaobject>
				<imageobject>
					<imagedata fileref="images/release-notes-401-surelogic-tools-view.png" />
				</imageobject>
	  </mediaobject>
	  
	  A modeling error will be displayed in the <guilabel>Modeling Problems</guilabel> view if a specified exclusion
	  filter in the <filename>surelogic-tools.properties</filename> file does not match any code in the project.
	  </para>
				
	</listitem>
	
	<listitem><para><emphasis>If a scan crashes the tool will prompt to send a scan failure report to SureLogic</emphasis>
	&mdash; If a JSure scan crashes or any sort of analysis problem is detected the tool will prompt the user to send
	a scan failure report to SureLogic.
	
	<mediaobject>
				<imageobject>
					<imagedata fileref="images/release-notes-401-scan-crash.png" />
				</imageobject>
	  </mediaobject>
	  
	  This type of report includes a log of the verifying analysis scan (other problem reports typically
	  include the Eclipse log) to help SureLogic pinpoint the problem. The log can be examined and edited before it is sent
	  to SureLogic. Further, it can be saved to a file or printed as described in the next item.
	
	</para></listitem>
				
				<listitem>
					<para>
						<emphasis>The text of a Problem Report, Scan Failure Report, or a Tip for Improvement can be printed or saved</emphasis>
						&mdash;
						The preview pane now allows the tool user to print or save the text of a problem report or tip for improvement.

	<mediaobject>
		<imageobject>
			<imagedata fileref="images/release-notes-401-printorsave.png" />
		</imageobject>
	</mediaobject>
	
	This is helpful to tool users who do not have an Internet connection on their machine.
					</para>
				</listitem>
				
				<listitem><para><emphasis>Odd auto-selection of projects to be scanned behavior fixed</emphasis>
				&mdash; In JSure version 4.0.0 if the user selected one or more projects in the <guilabel>Package Explorer</guilabel>
				then started a scan the selection behavior was odd. In particular, if the project selection dialog appeared, then the set of projects
				selected in the <guilabel>Package Explorer</guilabel> was merged with the set of projects last scanned. If the project selection dialog did not appear,
				then only the set of projects selected in the <guilabel>Package Explorer</guilabel> were scanned. This approach was inconsistent
				and a potential source of confusion to tool users. In this release, if any projects are
				selected in the <guilabel>Package Explorer</guilabel>, then the set of projects last scanned is ignored.</para></listitem>
				
				<listitem><para><emphasis>Verification of singleton classes now partially supported with @Singleton</emphasis>
				&mdash; Partial support for the verification of singleton classes has been added to JSure.
				A class to which the @Singleton annotation is applied is a singleton, meaning it has only
				one instance and provides a global point of access to that instance. That is, the class
				is a Java implementation of the Singleton pattern described by Gamma, Helm, Johnson, and Vlissides
				in <emphasis>Design Patterns: Elements of Reusable Object-Oriented Software</emphasis> (Addison-Wesley 1995).
				Several Java implementation patterns are supported which are described in the @Singleton annotation's Javadoc.
				
				<mediaobject><imageobject><imagedata fileref="images/release-notes-401-singleton.png" /></imageobject></mediaobject>
	
				The verification in this release is partial. In particular, checking of serialization
	    	or use of the <emphasis>lazy initialization holder class idiom</emphasis> is not performed. These
	    	checks will be complete in the next release of JSure and we feel that the current implementation
	    	covers enough real-world code to be useful.
	    	</para>
	    	
	    	<para>The <ulink
	    url="http://java.net/projects/timingframework">Timing
	    Framework</ulink> project, an animation library for Swing
	    and SWT, contains many examples of singleton classes that
	    have been annotated and verified by JSure.</para>
				</listitem>

	            <listitem><para><emphasis>Improvements to <code>@Containable</code> and <code>@ThreadSafe</code> verifying analyses</emphasis>
				&mdash;
				The analyses for <code>@Containable</code> and <code>@ThreadSafe</code> now consider
				that a field declared to be of the array type <code>P[]</code>, where <code>P</code> is a primitive type,
				is containable. For example, the below snippet of code will now assure.
				
				<programlisting>import java.util.Arrays;
import com.surelogic.*;

@ThreadSafe
@Region("private TempState")
@RegionLock("TempLock is lock protects TempState")
class Temp {

  private final Object lock = new Object();

  @UniqueInRegion("TempState")
  private byte[] value = new byte[0];

  @Unique("return")
  public Temp() { }

  public byte[] getValue() {
    synchronized (lock) {
      int length = value.length;
      return Arrays.copyOf(value, length);
    }
  }

  public void setValue(@Unique final byte[] bytes) {
    synchronized (lock) {
      // set value to copy of passed data
      value = bytes;
    }
  }
}</programlisting>

                One curio of the above example is the use of the local variable <code>length</code> to store <code>value.length</code> to pass to <code>Arrays.copyOf</code>.
                This is due to the uniqueness analysis, i.e., it is too conservative to verify <code>Arrays.copyOf(value, value.length)</code>.
                This limitation is being investigated by SureLogic and is being tracked on <ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=68">SureLogic's Bugzilla</ulink>.
				</para>
				
				<para>The supporting information in the results
				for <code>@Containable</code> and <code>@ThreadSafe</code> now better indicate
				whether the type of a field is or isn't containable or thread safe,
				whether the field is declared to be unique, and (for <code>@ThreadSafe</code>)
				whether the regions of the referenced object are aggregated into lock-protected regions.</para>

                <para>An incorrect proposal to add @Unique as an annotation in the <code>@ThreadSafe</code> analysis has been fixed.</para>
                
                <para>This overall issue was discussed on <ulink url="http://surelogic.com/bugzilla/show_bug.cgi?id=65">SureLogic's Bugzilla</ulink>.</para>
				</listitem>
			</orderedlist>
		</section>

		<section>
			<title>Known Problems</title>
			<para>The known problems are unchanged from JSure version 4.0.0.</para>
		</section>
	</section>

    <section id="sec-jsure-release-4-0-0">
      <title>JSure version 4.0.0</title>
      <para>This section describes the 4.0.0 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>Persistent tool results</emphasis> &mdash;
	    In prior releases JSure reanalyzed code when it was
	    started. This delayed Eclipse startup and could take a
	    significant portion of time away from the programmer's
	    work. This problem has been solved by making JSure results
	    persistent. Results from scans of the users code are saved
	    and can be examined immediately upon Eclipse startup.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Scan model replaces "JSure as a
	    compiler"</emphasis> &mdash; In prior releases, JSure
	    integrated into the Eclipse Java compiler. It performed
	    its analysis after the Java compiler completed. This could
	    add a significant delay to code compilation. Further, the
	    "focus" model of selecting projects to be analyzed was
	    confusing to JSure users. To address these problems, a
	    scan model has replaced the "JSure as a compiler"
	    model. Rather than "focus" on a project, the user asks the
	    tool to scan projects.</para>

	    <para>To scan one or more of your projects with JSure select
	    <menuchoice><guimenuitem>JSure</guimenuitem><guimenuitem>Verify
	    Project</guimenuitem></menuchoice> from the Eclipse main menu as
	    shown below. Using the menu can become tedious in real tool use so
	    this command is associated with the keyboard shortcut
	    <keysym>Ctrl</keysym>+<keysym>Alt</keysym>+<keysym>Shift</keysym>+<keysym>V</keysym>. This
	    keyboard shortcut is worth remembering to make JSure scans easier to
	    start.

	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-quick-start-verify-menu.png" />
	      </imageobject>
	    </mediaobject>

	    This action will open the dialog shown below.

	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-quick-start-verify-dialog.png" />
	      </imageobject>
	    </mediaobject>

	    This dialog allows you to select which projects are to be
	    scanned by JSure.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Improved support for verifying
	    multi-project codebases</emphasis> &mdash; Prior releases
	    could only verify a single project at a time. This release
	    allows any number of Java projects in the workspace to be
	    scanned. This makes JSure much simpler to use on larger
	    real-world codebases that are spread into a large number
	    of Eclipse Java project.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>JSure scans run in a separate virtual machine</emphasis>
	    &mdash; Scans of code in prior JSure
	    releases were performed in the same virtual machine (VM) as Eclipse. This
	    could cause Eclipse to run low on memory&mdash;or run
	    out. This release of JSure runs scans in a separate VM to
	    eliminate the memory footprint of the (large and complex)
	    JSure analysis infrastructure.</para>

	    <para>The memory and thread use of the VM started for
	    scans can be controlled in the SJure preferences.

	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-prefs-vm.png" />
	      </imageobject>
	    </mediaobject>
	    </para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Long running analysis warning and timeout supported</emphasis>
	    &mdash; JSure produces a warning
	    that a element of control flow (a method or constructor)
	    takes a long time to analyze. Optionally, the tool can be
	    told to "timeout" (stop) the long running analysis.</para>

	    <para>The warning time and timeout time can be configured in the JSure preferences.

	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-prefs-timeout.png" />
	      </imageobject>
	    </mediaobject>
	    </para>

	    <para>Warnings about methods and constructors that take a
	    long time to analyze appear as shown below.

	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-timeout-warning.png" />
	      </imageobject>
	    </mediaobject>
	    </para>

	    <para>When a timeout occurs the analysis result is
	    highlighted by a <inlinegraphic
	    fileref="images/timeout_x.gif"/> as shown below.

	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-timeout-coe.png" />
	      </imageobject>
	    </mediaobject>

	    It is easy to use the <guilabel>JSure Quick
	    Search</guilabel> <emphasis>Analysis Result</emphasis>
	    filter to find all <inlinegraphic
	    fileref="images/timeout_x.gif"/> results in a scan.

	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-timeout-query.png" />
	      </imageobject>
	    </mediaobject>
	    </para>
	    
	    <para>What can be done about a method that takes a long time to analyze? If possible, reduce
	    the number of local variables in the method. This will speed analysis. Typically methods
	    that are very large can be broken up into smaller methods or refactored to call a series of
	    new methods extracted from the larger method. Doing this will also speed analysis.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Improved analysis performance</emphasis>
	    &mdash; The performance of slow-running analyses, in
	    particular the uniqueness analysis, has been significantly
	    improved in this release.</para>
	  </listitem>
	  
	  <listitem>
	    <para><emphasis>More understandable results for Uniqueness</emphasis>
	    &mdash; The understandability and actionability of the results reported from
	    the uniqueness analysis (which checks <classname>Unique</classname>,
	    <classname>UniqueInRegion</classname>, and <classname>Borrowed</classname>
	    annotations) has been significantly
	    improved in this release. In particular the results are more precise
	    which helps to avoid messages potentially confusing to the programmer.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Verification of the Goetz/Perlis
	    @ThreadSafe annotation now supported</emphasis> &mdash;
	    Support for verification of thread-safe classes has been
	    added to JSure using <classname>@ThreadSafe</classname>.</para>
	    
	    <para>The <ulink
	    url="http://java.net/projects/timingframework">Timing
	    Framework</ulink> project, an animation library for Swing
	    and SWT, contains a complex example of use of the
	    <classname>ThreadSafe</classname> annotation in its <ulink
	    url="http://java.net/projects/timingframework/sources/svn/content/trunk/timingframework-core/src/org/jdesktop/core/animation/timing/Animator.java?rev=239">Animator</ulink>
	    class that has been verified by JSure.
	    
	    <programlisting>@ThreadSafe
@Region("private AnimatorState")
@RegionLock("AnimatorLock is f_lock protects AnimatorState")
public final class Animator implements TickListener {
&hellip;
}
	    </programlisting>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-threadsafe.png" />
	      </imageobject>
	    </mediaobject>
	    </para>

	  </listitem>

	  <listitem>
	    <para><emphasis>Verification of the Goetz/Perlis
	    @Immutable annotation now supported</emphasis> &mdash;
	    Support for verification of immutable classes has been
	    added to JSure using <classname>@Immutable</classname>.</para>
	    
	    <para>The <ulink
	    url="http://java.net/projects/timingframework">Timing
	    Framework</ulink> project, an animation library for Swing
	    and SWT, contains many examples of immutable classes that
	    have been annotated and verified by JSure.
	    
	    <programlisting>@Immutable
public final class SplineInterpolator implements Interpolator {
&hellip;
}
	    </programlisting>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-immutable.png" />
	      </imageobject>
	    </mediaobject>
            </para>

	    <para>The red dot above is from the use of
	    <classname>@Vouch("Immutable")</classname> on one of the
	    fields.
	    <programlisting>@Vouch("Immutable")
private final List&lt;LengthItem&gt; f_lengths;</programlisting>

            This special form of the <classname>Vouch</classname>
            annotation is required for the programmer to vouch for
            standard collections that the programmer has made
            immutable. This is because the standard collection types
            cannot, in general, be annotated as being immutable.
	    </para>
	    
	    <para>The <classname>Vouch</classname> can, optionally be given a reason
	     that will show up in the analysis results.
	     
	     <programlisting>@Vouch(value="Immutable"
       reason="Collections.unmodifiableList is used on the referenced collection")
private final List&lt;LengthItem&gt; f_lengths;</programlisting></para>

	  </listitem>
	  
	  <listitem>
	    <para><emphasis>Verification of utility classes now supported with @Utility</emphasis> &mdash;
	    Support for verification of utility classes has been added to JSure.
	    A utility class has static methods and state. This annotation is similar to the
	    UML stereotype &laquo;utility&raquo; which is applied to a class
	    that does not have instances (it is noninstantiable), but whose
	    attributes and operations have class scope. Joshua Bloch in Effective Java (Second Edition)
	    (Addison-Wesley 2008) refers to such classes as utility classes (in Item 4).
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-utility.png" />
	      </imageobject>
	    </mediaobject>
	    
	    An example use of the <classname>Utility</classname> annotation in the Timing Framework code is shown below.
	    
	    <programlisting>@Utility
public final class TriggerUtility {
  public static Trigger addTimingTrigger(Animator source, Animator target, TimingTriggerEvent event) {
    &hellip;
  }
&hellip;
}
	    </programlisting>
	    </para>
	    
	    <para>It is recommended that a utility class extend
	    only <classname>java.lang.Object</classname>.
        However this is not required because the noninstantiability of the utility
        class makes its parent irrelevant. Further, some security coding standards
        require all classes to extend a common base class&mdash;including utilities.
	    </para>

	    <para>The <ulink
	    url="http://java.net/projects/timingframework">Timing
	    Framework</ulink> project, an animation library for Swing
	    and SWT, contains many examples of utility classes that
	    have been annotated and verified by JSure.</para>
	  </listitem>
	  
	  <listitem>
	    <para><emphasis>Annotation consistency is now tool enforced</emphasis> &mdash; The annotations on a
	    Java declaration <emphasis>N</emphasis> need to be checked for consistency with the annotations on
	    the immediate ancestors of <emphasis>N</emphasis>. What it means to be consistent turns out to
	    depend on the kind of annotation and is described in the Javadoc for each annotation supported
	    by JSure.
	    </para>
	    
	    <para>As an example consider the declaration of the 
	    <classname>ManualTimingSource</classname> from the <ulink
	    url="http://java.net/projects/timingframework">Timing
	    Framework</ulink> project.
	    
	    <programlisting>public final class ManualTimingSource extends TimingSource {
}</programlisting>

		JSure reports the a modeling problem on this declaration:
		
		<mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-consistency.png" />
	      </imageobject>
	    </mediaobject>
	    
	    This is because its parent class, <classname>TimingSource</classname> is declared <classname>ThreadSafe</classname>.
	    
	    	    <programlisting>@ThreadSafe
public abstract class TimingSource {
}</programlisting>
	    </para>
	  </listitem>

	  <listitem>
	    <para><emphasis>@Aggregate and @AggregateInRegion
	    annotations have been eliminated</emphasis> &mdash; The
	    <classname>Aggregate</classname> and
	    <classname>AggregateInRegion</classname> annotations have
	    been eliminated. More precisely, they have been merged with
	    the <classname>Unique</classname> annotation. Tool users
	    will need to remove these annotations from their
	    code. There are two possible changes

	    <informaltable frame='all'>
	      <tgroup cols='3' align='left'>
		<thead>
		  <row>
		    <entry>Old</entry>
		    <entry>New</entry>
		    <entry>Description</entry>
		  </row>
		</thead>
		<tbody>
		  <row>
		    <entry><programlisting>@Aggregate
@Unique
private MyClass foo;
		    </programlisting></entry>
		    <entry><programlisting>@Unique
private MyClass foo;
		    </programlisting></entry>
		    <entry>The <classname>Unique</classname>
		    annotation applied to a field now implies
		    aggregation of the referenced field's state into
		    the default <code>Instance</code> region.</entry>
		  </row>
		  <row>
		    <entry><programlisting>@AggregateInRegion("FooState")
@Unique
private MyClass foo;
		    </programlisting></entry>
		    <entry><programlisting>@UniqueInRegion("FooState")
private MyClass foo;
		    </programlisting></entry>
		    <entry>The new
		    <classname>UniqueInRegion</classname> annotation
		    on a field allows aggregation of the referenced
		    field's state into the named region (<code>FooState</code> in the example). This
		    annotation also places the field itself into the
		    named region if the field is not declared to be
		    <code>final</code>. In the example it would
		    imply
		    <classname>@InRegion("FooState")</classname>.</entry>
		  </row>
		</tbody>
	      </tgroup>
	    </informaltable>
            </para>
	  </listitem>
	  
	  <listitem>
	    <para><emphasis>Experimental @ReadOnly annotation added</emphasis>
	    &mdash; The set of JSure annotations now contains the <classname>ReadOnly</classname>
	    annotation. This is for development/experimental use only at this time.</para>
	  </listitem>
	  
	  <listitem>
	    <para><emphasis>JSure Code Verification perspective
	    updated</emphasis> &mdash; The JSure perspective, called
	    the <guilabel>Code Verification</guilabel> perspective,
	    has been updated to include new user interface
	    elements.</para>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-perspective.png" />
	      </imageobject>
	    </mediaobject>
	    
	    <para>If you updated from a prior version of JSure you may need
	    to <guilabel>Reset</guilabel> the <guilabel>Code Verification</guilabel> perspective
	    in Eclipse as shown below. Do this if your perspective does not look similar to the
	    screenshot shown above.</para>
	    
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-perspective-reset.png" />
	      </imageobject>
	    </mediaobject>
	  </listitem>

	  <listitem>
	    <para><emphasis>New view to manage JSure scans</emphasis>
	    &mdash; The <guilabel>JSure Scans</guilabel> view has been
	    added to allow the user to manage scans. The view list each scan
	    that the programmer has performed. The view lists when each scan was
	    performed, its size on disk, and the projects examined. Checking a scan
	    causes all the other views in the <guilabel>Code Verification</guilabel>
	    perspective to display that scan's results. The view allows old scans
	    to be deleted from the disk.
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-scan-view.png" />
	      </imageobject>
	    </mediaobject>
	    </para>
	  </listitem>

	  <listitem>
	    <para><emphasis>New view to query JSure results</emphasis>
	    &mdash; A new query-based view, called the <guilabel>JSure
	    Quick Search</guilabel> view has been added to JSure. This view
	    is similar to the one used by Sierra.
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-quick-search-view.png" />
	      </imageobject>
	    </mediaobject>
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para><emphasis>Historical source code saved for each JSure scan</emphasis>
	    &mdash; A new view, called the <guilabel>JSure
	    Historical Source</guilabel> view has been added to JSure. This view
	    is similar to the one used by Flashlight. When a JSure scan is run all the
	    source code is saved to that it can be shown to the user in this view. This
	    helps the user understand if their code has changed since the JSure scan was
	    performed. This new view is shown, in the <guilabel>Code Verification</guilabel>
	    perspective, to the right of the Java editor at the bottom of the perspective.
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-historical-source-view.png" />
	      </imageobject>
	    </mediaobject>
	    </para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Modeling Problems view "goes yellow" if
	    the scan contains modeling problems</emphasis> &mdash;
	    Modeling problems are syntactic or semantic problems with
	    annotations placed in the code. Typically, none of these
	    should exist in an annotated codebase. Many users felt
	    that the addition of a item into the <guilabel>Modeling
	    Problems</guilabel> view was to subtle. To help highlight
	    the serious nature of any modeling problems the
	    <guilabel>Modeling Problems</guilabel> view background now
	    changes to yellow if any modeling problems are listed. It
	    uses a normal background color if no modeling problems are
	    listed. This helps to draw the programmer's attention away
	    from the verification results to this view when modeling
	    problems exist&mdash;so that they can be fixed by the
	    programmer.
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/release-notes-400-yellow-view.png" />
	      </imageobject>
	    </mediaobject>
	    </para>
	  </listitem>

	  <listitem>
	    <para><emphasis>JSure analysis infrastructure uses the
	    standard Java compiler</emphasis> &mdash; Prior to this
	    release the Eclipse Java compiler was used as the parser
	    for Java code. This has been changed to the standard Java
	    compiler, <application>javac</application>. This lowers
	    the memory footprint of the JSure tool
	    (<application>javac</application> requires less memory
	    because we can restrict our use of it to parsing) and
	    allows JSure scans outside the Eclipse IDE (e.g., with
	    Ant).
	    </para>
	  </listitem>
	  
	   <listitem>
	    <para><emphasis>New SureLogic license format</emphasis> &mdash; The format
	    of SureLogic licenses has changed. You may need to contact SureLogic to obtain
	    a new license.</para>
	  </listitem>

        </orderedlist>
      </section>

	<section>
		<title>Known Problems</title>
		<para>This section describes known bugs and limitations in this
			version of JSure.
		</para>
		<orderedlist>
		    <listitem>
		    <para><emphasis>Annotation consistency on the Java standard library</emphasis> &mdash; 
		    The annotations on the Java standard library are now checked for consistency. For example
		    the <classname>java.util.List</classname> class has two annotations
		    on its <classname>isEmpty</classname> method specified
		    in our XML promise format.
		    <programlisting>
&lt;package name="java.util"&gt;
    &lt;class name="List"&gt;
        &lt;method name="isEmpty"&gt;
            &lt;Borrowed>this&lt;/Borrowed&gt;
            &lt;RegionEffects&gt;reads this:Instance&lt;/RegionEffects&gt;
        &lt;/method&gt;
    ...
    &lt;/class&gt;
&lt;/package&gt;</programlisting>

		Any subtypes of <classname>List</classname> must declare annotations
		consistent with those shown below.</para>
		
		<para>In addition to the straightforward
		task of examining all subtypes this task has been further complicated
		by different Java library implementations. The Oracle, Apple, and
		openjdk distributions of Java all have subtle implementation differences
		that cause annotation consistency "warnings" to the user when the set
		of annotations intended for the Oracle Java distribution are used.
		This problem is difficult to work around because the Oracle
		distribution is widely used on Windows, Apple's is the only option
		on OS X (Mac computers), and openjdk is predominate on Linux distributions.</para>
		
		<para>We are working to solve this problem in a future release with multiple annotation
		packs and smarter warning processing. In this release we have filtered any modeling problems
		about binary/library code out of the tool's <guilabel>Modeling Problems</guilabel> view.</para>
		    </listitem>
			<listitem>
				<para>
					<emphasis>Section 2 (Understanding JSure Assurance Output) of the
						JSure Users Guide has only had minor updates made to it</emphasis>
					&mdash; Only minor updates to Section 2 of this guide have been
					done for this release. This portion of the documentation, based
					upon
					user feedback, requires a significant rewrite and possible
					merging with the contents of the
					<emphasis>JSure Annotation Guide</emphasis>.
				</para>
				<para>SureLogic is working to update this material, both Section 2 of this
				guide and the entire <emphasis>JSure Annotation Guide</emphasis>, to best
				convey the syntax and semantics of JSure's specification language.</para>
			</listitem>
		</orderedlist>
	</section>
    </section>

    <section id="sec-jsure-release-3-1-1">
      <title>JSure version 3.1.1</title>
      <para>This section describes the 3.1.1 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>Problem with single-threaded constructors and
	    <package>java.util.concurrent.locks</package> fixed</emphasis>
	    &mdash; The <link linkend="known-issue-single-threaded">known issue</link>
	    described in the 3.1.0 release notes has been fixed.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Improved performance</emphasis> &mdash; 
            Key internal data structures have been optimized for the common case.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Avoidance of unnecessary re-analysis</emphasis> &mdash; 
            Uninteresting files no longer trigger (lengthy) re-analysis.</para>
	  </listitem>

        </orderedlist>
      </section>
    </section>

    <section id="sec-jsure-release-3-1-0">
      <title>JSure version 3.1.0</title>
      <para>This section describes the 3.1.0 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>Tips and problem reports are tracked by
	    SureLogic</emphasis> &mdash; When you submit a tip for
	    improvement or a problem report to SureLogic it is tracked
	    via an automatically created Bugzilla issue report at
	    <ulink
		url="http://www.surelogic.com/bugzilla/index.cgi">surelogic.com</ulink>. If
	    you include your email address in the tip or problem
	    report you will be notified when changes to the status of
	    the Bugzilla issue are made by SureLogic engineers. The
	    public Bugzilla may also be accessed via a browser at
	    <ulink
		url="http://www.surelogic.com/bugzilla/index.cgi">surelogic.com</ulink>.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>The "Tip for Improvement" and "Problem
	    Report" dialogs are no longer modal</emphasis> &mdash;
	    This allows the user to cut and paste information from
	    Eclipse that they want to send to SureLogic into the
	    dialog.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>New Iconography Quick Reference
	    card</emphasis> &mdash; To help the user understand the
	    iconography of the <guilabel>Verification
	    Status</guilabel> view a non-model dialog has been added
	    that is a quick reference to the icons and what they
	    indicate to the user. The dialog is opened via a toolbar
	    button on the <guilabel>Verification Status</guilabel>
	    view as shown in <xref
	    linkend="fig-release-notes-310-icon-quick-ref"/>.</para>

	    <figure id="fig-release-notes-310-icon-quick-ref">
	      <title>The Iconography Quick Reference dialog.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-icon-quick-ref.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>JSure icon changes</emphasis> &mdash; The
	    JSure icon used for the <guilabel>Verification
	    Status</guilabel> view looked
	    like it indicated that the view contained a "red-dot" (an
	    assumption or vouch). The icon now uses blue instead of
	    read to avoid this confusion. The inconsistent
	    verification result decorator (a little red X) has been
	    changed to a small version of the inconsistent analysis
	    result icon. These two new icons are shown in <xref
	    linkend="fig-release-notes-310-new-jsure-icon"/>.</para>

	    <figure id="fig-release-notes-310-new-jsure-icon">
	      <title>The two new JSure icons used by the Verification Status view.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-new-jsure-icon.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>New promises library</emphasis> &mdash;
	    The promises Jar has been updated in Maven to 3.1.0. If
	    you are using JSure in the IDE, when you install 3.1.0
	    select <guimenuitem>Add/Update Promises
	    Library...</guimenuitem> from the JSure menu to update
	    your Java project's Jar file. The annotation changes are
	    discussed below.</para>
	  </listitem>

	  <listitem>
	    <para><emphasis>Initial support for concurrent analysis
	    (an analysis performance improvement)</emphasis> To help
	    speed uniqueness assurance (i.e., verification of @Unique
	    and @Borrowed annotations) you can use multiple threads
	    under Java 6 (i.e., Eclipse must be running under a Java 6
	    VM). This defaults to the number of processors in your
	    computer but can be changed under the JSure Eclipse
	    preferences as shown in <xref
	    linkend="fig-release-notes-310-concurrent-analysis"/>.</para>

	    <figure id="fig-release-notes-310-concurrent-analysis">
	      <title>Preferences to set the number of processors used by JSure analysis.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-concurrent-analysis.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>Copy-Paste of verification
	    results</emphasis> &mdash; You can now copy with ^C
	    (Windows) or by right-clicking on a verification
	    result. The text can then be pasted into another
	    application.</para>

	    <figure id="fig-release-notes-310-copy-paste">
	      <title>Copying the text of a verification result to the clipboard.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-copy-paste.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>Simpler constructor annotation to support
	    locking models</emphasis> &mdash; The annotations required
	    on constructors to support locking models have been
	    simplified in JSure version 3.1.0. First, the
	    @SingleThreaded annotation has been deprecated, it is no
	    longer required.  If this annotation is in your code it is
	    ignored by the tool. Second, the annotation
	    @Unique("return") on a constructor is now defined to be
	    equivalent @Borrowed("this"). For example, a typical
	    constructor for a class with a lock policy in JSure 3.0.0
	    looked like
<programlisting>
  @SingleThreaded
  @Borrowed("this")
  public Aircraft(long x, long y) {
    ...
  }
</programlisting>
In 3.1.0 you can omit the @SingleThreaded annotation
<programlisting>
  @Borrowed("this")
  public Aircraft(long x, long y) {
    ...
  }
</programlisting>
In addition, the annotation @Unique("return") can, but does not have to, replace @Borrowed("this")
<programlisting>
  @Unique("return")
  public Aircraft(long x, long y) {
    ...
  }
</programlisting>
Programmers often think of the constructor "returning" a new object so
we have allowed this annotation. @Unique("return") has exactly the
same semantics for a constructor as @Borrowed("this") and they can be
used interchangeably. It is programmer preference which annotation
makes the most intuitive sense.
	    </para>
	    <para>It is recommend, but not required, that all
	    @SingleThreaded annotations be removed from the code. It
	    is also recommended to consider the use of
	    @Unique("return") on constructors.</para>
	    
            <note id="known-issue-single-threaded">
              <title>Known Issue</title>
              <para>There is a known assurance issue with the new approach 
              to single-threaded constructors when a class uses 
              <package>java.util.concurrent</package> locks.  The issue
              occurs when 
                <itemizedlist>
                  <listitem>
                    <para>A class contains an instance initializer block or 
                    field declaration with an initializer</para>
                  </listitem>
                  <listitem>
                    <para>Has more than one constructor declaration</para>
                  </listitem>
                  <listitem>
                    <para>Some constructors can be proven to be single-threaded,
                    but some cannot be</para>
                  </listitem>
                </itemizedlist>
              In this case, some of the assurance 
              results for field accesses that occur in the instance initalizer
              block or field initializer may be reported to be unassured, when
              in fact they actually are assured.
              </para>
            </note>
	    
	  </listitem>

	  <listitem>
	    <para><emphasis>Support for Java 1.4 code</emphasis>
	    &mdash; JSure annotations can now be placed in Java 1.4
	    source code that does not have language support for
	    annotations via the @annotate Javadoc tag. For example,
<programlisting>
/**
 * BoundedFIFO serves as the bounded first-in-first-out buffer
 * heavily used by the {@link org.apache.log4j.AsyncAppender}.
 *
 * @author Ceki G&uuml;lc&uuml;
 * @since version 0.9.1
 *
 * @annotate RegionLock("BufLock is this protects Instance")
 * @annotate Promise("@RequiresLock(BufLock) for *(**)")
 */
public class BoundedFIFO {
  /**
   * @annotate Unique
   * @annotate Aggregate
   */
  LoggingEvent[] buf;
...
}
</programlisting>
Basically, the "@" in the Java 5 annotation is replaced with
"@annotate" and the rest of the syntax is unchanged. The details are
covered in the Javadoc for each annotation. If your source is Java 5
or above this feature is turned off by default, but can be enabled
using the preference setting shown in <xref
	    linkend="fig-release-notes-310-java-1-4-support"/>.</para>

	    <figure id="fig-release-notes-310-java-1-4-support">
	      <title>Preferences to enable the use of @annotate in Javadoc.</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-310-java-1-4-support.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>

	  <listitem>
	    <para><emphasis>Turn off JSure analysis for a set of
	    specified directories</emphasis> &mdash; If your project
	    includes source directories for test code, you can setup
	    your project to ignore those directories by adding a
	    "jsure.properties" file with the following contents to the
	    project root:</para>
<programlisting>
# A comma-separated list of source paths (edit for your project)
ModuleDecl.Test=src/java/test/*,src/test/*

# -- Do not change the text below --
# Load only interfaces, not method bodies
Module.asClass=Test
# Load on demand from other classes
Module.asNeeded=Test
# Load everything else as usual
Module.defaults=asSource
</programlisting>
	  </listitem>
	  <listitem>
	    <para><emphasis>Improved JSure analysis job progress status reporting</emphasis> &mdash;
	    Progress updates have been added to longer-running analyses to provide better feedback
	    as to what files JSure is examining.</para>
	  </listitem>

	</orderedlist>
      </section>
    </section>

    <section id="sec-jsure-release-3-0-0">
      <title>JSure version 3.0.0</title>
      <para>This section describes the 3.0.0 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>A more straightforward aggregation
	    syntax</emphasis> &mdash; The syntax of aggregation is
	    improved. Many programmers have found found
<programlisting>
@RegionLock("CLock is this protects Instance")
class C {
  @Unique
  @Aggregate("Instance into Instance")
  private final Set&lt;String&gt; cSet = new HashSet&lt;String&gt;();
  &hellip;
}
</programlisting>
to be confusing and too academic-looking. This syntax is still
accepted by JSure (for backwards compatibility), however, it can be
simplified to
<programlisting>
@RegionLock("CLock is this protects Instance")
class C {
  @Unique
  @Aggregate
  private final Set&lt;String&gt; cSet = new HashSet&lt;String&gt;();
  &hellip;
}
</programlisting>
when dealing the <code>Instance</code> region (indicating all the
declared fields in the object). If the region is named then you can
use
<programlisting>
@Region("private CRegion")
@RegionLock("CLock is this protects CRegion")
class C {
  @Unique
  @AggregateInRegion("CRegion")
  private final Set&lt;String&gt; cSet = new HashSet&lt;String&gt;();
 
  @InRegion("CRegion")
  private int counter;
  &hellip;
}
</programlisting>
             which is similar to the <code>@InRegion</code>
             annotation (as seen above for the counter field).</para>
	  </listitem>
	  <listitem>
	    <para><emphasis>Goetz/Perlis annotation support</emphasis>
	    &mdash; We now support three of the four Goetz/Perlis
	    annotations: <code>@ThreadSafe</code>,
	    <code>@NotThreadSafe</code>, and
	    <code>@Immutable</code>. (We have some work to do with
	    <code>@GuardedBy</code>, but that annotation is really an
	    impoverished version of <code>@RegionLock</code>.)
	    Primarily these are for code documentation purposes. The
	    <code>@SelfProtected</code> annotation is replaced by
	    <code>@ThreadSafe</code>, therefore, if any
	    <code>@SelfProtected</code> annotations are in the code
	    they will not compile with the new JAR and will need to be
	    changed to <code>@ThreadSafe</code>. We decided to make
	    this, sadly incompatible, change to better support
	    standard annotations. It is our intention to fully support
	    all the standard Goetz/Perlis annotations in JSure.</para>

	    <para>The <code>@Immutable</code> annotation is not
	    verified in this release but an analysis will be added to
	    support verification of this assertion in a future release
	    of JSure.</para>
	  </listitem>
	  <listitem><para><emphasis>@MapFields replaced by
	  @InRegion</emphasis> &mdash; Another incompatible change is
	  the replacement of the <code>@MapFields</code> annotation
	  and its associated plural <code>@MapsFields</code> with
	  <code>@InRegion</code> and <code>@InRegions</code>,
	  respectively. This annotation was out of date (older
	  annotations talked about mapping fields into a region) and
	  we wanted to updated it and make it consistent with the
	  scheme used to allow multiple annotations on a class.</para>
	  <para>For example, one would change the below annotations
<programlisting>
/**
 * FSEditLog maintains a log of the namespace modifications.
 */
@Region("LogState")
@RegionLock("LogLock is this protects LogState")
@MapFields("editStreams, fsimage into LogState")
public class FSEditLog { ... }
</programlisting>
to
<programlisting>
/**
 * FSEditLog maintains a log of the namespace modifications.
 */
@Region("LogState")
@RegionLock("LogLock is this protects LogState")
@InRegion("editStreams, fsimage into LogState")
public class FSEditLog { ... }
</programlisting>
</para>
	  </listitem>
	  <listitem><para><emphasis>Programmer vouch capability added
	  to JSure</emphasis> &mdash; Vouches for any any inconsistent
	  analysis result within the scope of code that the annotation
	  appears on. This means that any inconsistent result will be
	  changed to a consistent result. Its use is for documentation
	  and to quiet overly conservative analysis results. This
	  annotation is trusted, i.e., it is not verified by
	  analysis.</para>

	  <para>The annotation requires a brief programmer explanation
	  for the vouch being made.</para>

	  <para>For example, an <code>init</code> method is used to
	  set set state, perhaps due to an API restriction about using
	  constructors, then <code>CentralControl</code> instances are
	  safely published. A <code>@Vouch</code> annotation is used
	  to explain that the <code>init</code> method needs to be an
	  exception to the lock policy.
<programlisting>
 @Region("private ControlRegion")
 @InRegion("f_id into ControlRegion")
 @RegionLock("ControlLock is lock protects ControlRegion")
 public class CentralControl {
 
   private final Object lock = new Object();
   private String f_id;
 
   @Vouch("Instances are thread confined until after init(String) is called.")
   public void init(String id) {
     f_id = id;
   }
 
   public String getId() {
     synchronized (lock) {
       return f_id;
     }
   }
 
   public void setId(String value) {
     synchronized (lock) {
       f_id = value;
     }
   }
 }
</programlisting>
	  Notice that the current implementation vouches for all
	  inconsistent analysis results within the type or method or
	  constructor that the annotation appears on. A more targeted
	  capability will be introduced in a future version of
	  JSure.</para>
	  </listitem>
	  <listitem>
	    <para><emphasis>Main menu item to add the JSure
	    annotations to a project</emphasis> &mdash; It is now
	    possible to add or update the JSure annotations library to
	    a project from the Eclipse main menu as shown in <xref
	    linkend="fig-release-notes-300-add-jar"/>
	    <figure id="fig-release-notes-300-add-jar">
	      <title>Main menu item to add the JSure annotations to a project</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-300-add-jar.png"/></imageobject>
	      </mediaobject>
	    </figure>
	    It is a good idea to run this menu choice after you
	    install a new version of JSure to ensure the annotation
	    library is up to date. If there is not an update the tool
	    will tell you you are up-to-date.
	    </para>
	  </listitem>
	  <listitem>
	    <para><emphasis>JSure annotations submitted to the Maven
	    Central Repository</emphasis> &mdash; SureLogic has
	    submitted the updated promise syntax (as described above)
	    to the Maven central repository and is awaiting them to
	    perform the upload request. The JIRA is <ulink
	    url="http://jira.codehaus.org/browse/MAVENUPLOAD-2654">http://jira.codehaus.org/browse/MAVENUPLOAD-2654</ulink>.
	    The maven site for JSure is <ulink
	    url="http://surelogic.com/promises/index.html">http://surelogic.com/promises/index.html</ulink>
	    with the associated Javadoc at <ulink
	    url="http://surelogic.com/promises/apidocs/index.html">http://surelogic.com/promises/apidocs/index.html</ulink>. This
	    inclusion in the Maven Central Repository is a step toward
	    making the JSure annotations a Java standard for
	    documenting and verifying concurrency design intent.
</para>
	  </listitem>
	</orderedlist>
      </section>

      <section>
	<title>Known Problems</title>
	<para>This section describes known bugs and limitations in this
	version of JSure.</para>
	<orderedlist>
	  <listitem><para><emphasis>Small <wordasword>S</wordasword>
	  in the project icon lower right corner does not go away when
	  JSure is disabled</emphasis> &mdash; JSure can only assure
	  the contents of one project at a time. The icon of the
	  project being assured is marked with a small
	  <wordasword>S</wordasword> in the lower right corner:
	  <guiicon><inlinegraphic
	  fileref="images/jsure-nature.png"/></guiicon>. The
	  <wordasword>J</wordasword> above the
	  <wordasword>S</wordasword> are intended to remind you that
	  this is the project JSure is analyzing. Sometimes when you
	  disable JSure verification the small
	  <wordasword>S</wordasword> does not go away immediatly. This
	  is a refresh bug in Eclipse. To make it go away simply
	  refresh the project (with F5) or restart Eclipse.</para>
	  </listitem>
	  <listitem><para><emphasis>Incremental analysis sometimes
	  fails</emphasis> &mdash; In rare cases the incremental
	  analysis, i.e., the results update when you save, fails. A
	  workaround is to restart Eclipse or perform a
	  <menuchoice><guimenuitem>Project</guimenuitem><guimenuitem>Clean...</guimenuitem></menuchoice>
	  of the project being verified. If this problem occurs please
	  notify SureLogic.</para>
	  </listitem>
	  <listitem><para><emphasis>Analysis can sometimes be
	  slow</emphasis> &mdash; If JSure verification is slow on
	  your computer, please notify SureLogic. It is suggested that
	  you only turn on JSure when you are using it. Another
	  workaround is to disable the automatic building of your code
	  in Eclipse by unchecking
	  <menuchoice><guimenuitem>Project</guimenuitem><guimenuitem>Build
	  Automatically</guimenuitem></menuchoice> in Eclipse. This
	  lets you select
	  <menuchoice><guimenuitem>Project</guimenuitem><guimenuitem>Build
	  Project</guimenuitem></menuchoice> to run the Java compiler
	  and JSure only when you are ready to.</para>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section id="sec-jsure-release-2-3-0">
      <title>JSure version 2.3.0</title>
      <para>This section describes the 2.3.0 version of the JSure Eclipse client.</para>
      <section>
	<title>New and Noteworthy</title>

	<para>This section describes new and noteworthy features in this
	version of JSure.</para>
	<orderedlist>
	  <listitem>
	    <para><emphasis>Verification results are now separated
	    from modeling problems</emphasis> &mdash; A new view,
	    called the <guilabel>Modeling Problems</guilabel> view,
	    has been added to JSure. Previously any annotations that
	    were not well-formed (i.e., they had syntax errors or
	    other problems) were reported as modeling problems in the
	    <guilabel>Verification Status</guilabel> view. This was
	    confusing to the user because these results, which are
	    very important, could easily be missed when mixed in with
	    the analysis results shown in this view. A screenshot
	    showing this new view noting a typo in a
	    <emphasis>@InRegion</emphasis> annotation is shown in
	    <xref
	    linkend="fig-release-notes-230-modeling-problems"/>. The
	    referenced region name should be "PrivateState" not
	    "PrivateeState".</para>
	    <figure id="fig-release-notes-230-modeling-problems">
	      <title>The new Modeling Problems view</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-230-modeling-problems.png"/></imageobject>
	      </mediaobject>
	    </figure>
	    <para>The new view, by default, appears when the code has
	    any modeling problems. Therefore, the view can be
	    dismissed to save screen space and it will come back when
	    needed. This behavior can be changed as shown in  <xref
	    linkend="fig-release-notes-230-modeling-problems-pref"/>.</para>
	    <figure id="fig-release-notes-230-modeling-problems-pref">
	      <title>Preference for the new Modeling Problems view</title>
	      <mediaobject>
		<imageobject><imagedata fileref="images/release-notes-230-modeling-problems-pref.png"/></imageobject>
	      </mediaobject>
	    </figure>
	  </listitem>
	  <listitem>
	    <para><emphasis>Quickly create tutorial projects</emphasis> &mdash;
	    You can now create the SmallWorld and ShowOff tutorial projects from
	    the Findings Quick Search menu.</para>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </chapter>
</book>
