<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../lib/docbook-xml-4.5/docbookx.dtd">

<book id="jsure-examples" lang="en-US"
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>JSure User Guide</title>
  <subtitle>How to use and configure the JSure Eclipse client</subtitle>
  <bookinfo>
    <copyright>
      <year>2015</year>
      <holder>SureLogic, Inc.</holder>
    </copyright>
    <legalnotice>
      <para>The authors and publishers have taken care in the
      preparation of this documentation, but make no expressed or
      implied warranty of any kind and assume no responsibility for
      errors and omissions. No liability is assumed for incidental or
      consequential damages in connection with or arising out of the use
      of the information or programs herein.</para>
    </legalnotice>
    <pubdate>Version 5.6.1&mdash;May 2015</pubdate>
  </bookinfo>

  <preface id="preface">
    <title>Preface</title>
    <section>
      <title>Audience</title>
      <para>This document is intended for Java developers who want to
      use the JSure tool within the Eclipse Java IDE. We assume
      that the reader understands both the Java programming language and
      the use of Eclipse for Java development.</para>
    </section>
    <section>
      <title>Contact information</title>
      <para>For technical support or other questions, please
      contact:</para>
      <para><email>support@surelogic.com</email></para>
      <para>5808 Forbes Avenue, Pittsburgh, PA 15217-1602</para>
    </section>
  </preface>

  <xi:include href="getting-started/chapter.xml"/>
  <xi:include href="reference/chapter.xml"/>

  <chapter>
    <title>Release notes</title>
    <para>For each release of JSure there are new and noteworthy
    features to try out, and known limitations to avoid or
    workaround. These are presented in the sections below for each
    released version of JSure.</para>
    
           <section id="sec-jsure-release-5-6-1">
    <title>JSure version 5.6.1</title>
    <para>This section describes the 5.6.1 version of the JSure Eclipse
      client.
    </para>

    <section>
      <title>New and Noteworthy</title>
      <para>This section describes new and noteworthy features in this
        version of JSure.
      </para>
      <orderedlist>
        <listitem>
          <para>
            <emphasis>Improved Ant task</emphasis>
            &mdash;
            Several changes to the JSure Ant task are included in this version. If you use the Ant task you'll
            have to make some changes to your scripts. If not, the improvements made in this tool release
            may make the task useful in your development environment. A summary of the changes is listed below.
          </para>
          <orderedlist>
          <listitem><para>The task is no longer included in the Eclipse distribution. It must be downloaded <ulink url="http://surelogic.com/static/eclipse/install.html#cl">here</ulink>
          on the surelogic website. The reason for this change is to reduce the Eclipse tool distribution size. When adding the Ant task, JSure doubles in size, with Ant and Maven it is
          3X the download size. Now folks can download only what they need.</para></listitem>
          <listitem><para>The task has been simplified. It is still similar to the Ant <ulink url="https://ant.apache.org/manual/Tasks/javac.html">javac</ulink> task
          but now has simpler setup.</para>
          <mediaobject>
              <imageobject>
                <imagedata fileref="images/release-notes-561-antscript.png" />
              </imageobject>
          </mediaobject>
          </listitem>
          <listitem><para>Output from the Ant task is a Zip file that can be loaded into Eclipse. The name of the file encodes
          the information needed to load it into Eclipse.</para>
          <mediaobject>
              <imageobject>
                <imagedata fileref="images/release-notes-561-antmenu.png" />
              </imageobject>
          </mediaobject>
          </listitem>
          </orderedlist>
          <para>This approach is also intended to be supported in Maven but the Maven plugin for JSure is not yet complete. Further we plan to use the
          Ant and Maven to support predicates on the tool results (e.g., all annotations are consistent with the code). This
          future work will enable automated use of JSure in a "back office" automated build.</para>
        </listitem>
      </orderedlist>
    </section>
  </section>
    
       <section id="sec-jsure-release-5-6-0">
		<title>JSure version 5.6.0</title>
		<para>This section describes the 5.6.0 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>
			<orderedlist>
				<listitem>
					<para>
						<emphasis>Region declarations can now be inferred by JSure</emphasis>
						&mdash;
						You can use <code>@InRegion</code> or <code>@UniqueInRegion</code> annotations
						to allow inference of <code>@Region</code> annotations. This allows you to have
						the tool infer the correct information to declare a region of state. The intent
						is to make <code>@RegionLock</code> as simple to use as <code>@GuardedBy</code>.
					</para>
					<para>
					The image below shows the Animator class prior to this change. The explicit region
					declaration is highlighted.</para>
					<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-560-before-ri.png" />
							</imageobject>
					</mediaobject>
					<para>With this enhancement the code no longer needs this declaration as shown below.</para>
					<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-560-after-ri.png" />
							</imageobject>
					</mediaobject>
					<para>The promise is inferred and shows up in the verification results as a virtual promise (marked with a V).</para>
					<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-560-after-ri-results.png" />
							</imageobject>
					</mediaobject>
					<para>Of course, this feature is optional and the explicit declaration is still supported.</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>New @TrackPartiallyInitialized annotation limits partially initialized object annotations in large existing codebases</emphasis>
						&mdash;
						The use of <code>@NonNull</code> on fields in an object now requires that class to be annotated <code>@TrackPartiallyInitialized</code>.
						This new annotation turns on checking of the class implementation and its superclass implementations to verify that dispatching during
						construction is annotated with <code>@Initialized(through)</code> annotations. Originally we did this analysis across the entire
						codebase but this proved tedious to annotate in large existing codebases. While you may place this annotation on any class you want it is only required if (a) the class
						contains <code>@NonNull</code> field or (b) a subclass of the class is annotated <code>@TrackPartiallyInitialized</code>.
					</para>
					<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-560-track-pi.png" />
							</imageobject>
					</mediaobject>
					<para>In the example above the Animator class is required to be annotated <code>@TrackPartiallyInitialized</code> because its <code>f_startDirection</code>
					field is <code>@NonNull</code>. This also forces any superclasses to be annotated <code>@TrackPartiallyInitialized</code>. In this example, that is only
					java.lang.Object, which, as we can see below, is annotated <code>@TrackPartiallyInitialized</code>.</para>
					<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-560-track-pi-object.png" />
							</imageobject>
					</mediaobject>
					<para>The tool will propose this annotation. So for many users this annotation can be edited in by the tool
					when you add <code>@NonNull</code> on one of the fields in your code. Just keep adding the proposed <code>@TrackPartiallyInitialized</code>
					promise to classes (goes up the class hierarchy) until no more proposals are made by the tool.</para>
					</listitem>
					<listitem>
					<para>
						<emphasis>Uniqueness annotations simplified</emphasis>
						&mdash;
						The uniqueness verifying analysis is still turned off by default, however, if it is turned on in this release (via the JSure menu in Eclipse)
						you will note that is simpler to use and its results are more understandable. In addition the promises have been simplified as of this release.
						The changes include the following:
						The <code>@Borrowed</code> annotation no longer has an <code>allowReturn</code> attribute.
						The <code>@Immutable</code> annotation no longer applies to references.
						The <code>@BorrowedInRegion</code> and <code>@ReadOnly</code> promises has been removed.
						The <code>@Unique</code> annotation annotation no longer has an <code>allowRead</code> attribute.
						The <code>@UniqueInRegion</code> annotation annotation no longer has an <code>allowRead</code> attribute.
					</para>
					<para>We will continue to work to make this analysis more straightforward to use over the next several JSure releases. This analysis
					is very useful for verifying security and concurrency properties of a codebase.</para>
					</listitem>
			</orderedlist>
		</section>
	</section>
    
    	<section id="sec-jsure-release-5-5-2">
		<title>JSure version 5.5.2</title>
		<para>This section describes the 5.5.2 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>
			<orderedlist>
				<listitem>
					<para>
						<emphasis>Tutorial about effective use of null reference annotations</emphasis>
						&mdash;
						The documentation has been updated to include a tutorial about using
						null reference annotations. The tutorial is in <xref linkend="nonnull"/>. This new
						tutorial is still a work in progress, but is
						far enough along to be interesting in the documentation for JSure.
					</para>
				</listitem>
			</orderedlist>
		</section>
	</section>
    
    	<section id="sec-jsure-release-5-5-1">
		<title>JSure version 5.5.1</title>
		<para>This section describes the 5.5.1 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>
			<orderedlist>
				<listitem>
					<para>
						<emphasis>"Show only differences from the last scan" filter added to Verification Status view</emphasis>
						&mdash;
						The <guilabel>Verification Status</guilabel> view can now be
						set to filter out all results that have not changed since the
						prior scan. This can be helpful to focus attention on what is
						different.
					</para>
					<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-551-show-only-diffs.png" />
							</imageobject>
					</mediaobject>
				</listitem>
			</orderedlist>
		</section>
	</section>

	<section id="sec-jsure-release-5-5-0">
		<title>JSure version 5.5.0</title>
		<para>This section describes the 5.5.0 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>
			<orderedlist>
				<listitem>
					<para>
						<emphasis>Less need to declare local variables and parameters as final</emphasis>
						&mdash;
						JSure now automatically checks if a local variable is effectively
						final and will
						treat the reference as if it is declared final. This
						reduces the need to manually declare local variables
						and parameters
						to be final.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Java 8 virtual machine support</emphasis> &mdash;
						This release of JSure supports scanning Java 7 (and earlier) code with a
						Java 8 standard library and virtual machine. This version does not yet support
						scanning code in the Java 8 language (e.g., using lambdas, etc) this is currently
						in development and will be included in a future release.
					</para>
					<para>JSure can scan Java 8 projects in Eclipse if they contain only Java 7 source code.
					This makes the tool easier to use if a project is built at Java 8 level but doesn't
					really need it (perhaps because the default Eclipse JRE is Java 8).
					However, if JSure detects a Java 8 construct it cannot support
					it informs the user with the dialog shown below and cancels the scan.</para>
					<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-550-java8-notyet.png" />
							</imageobject>
					</mediaobject>
					<para>As noted above we are working on a release of JSure that includes complete Java 8 support.</para>
				</listitem>
			</orderedlist>
		</section>
	</section>
    
    
        <section id="sec-jsure-release-5-4-0">
		<title>JSure version 5.4.0</title>
		<para>This section describes the 5.4.0 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>
			<orderedlist>
			<listitem><para>
			<emphasis>Casting references to @NonNull or @Nullable</emphasis>
						&mdash;
						A <code>Cast</code> utility has been added to the promises library Jar to allow
						"casting" a reference such that it can be assigned to a @NonNull reference or
						a @Nullable reference. This utility is most useful when dealing with partially initialized
						references during object construction (as shown in the example below), however it may
						also be needed when dealing with library or framework code outside your control.
					</para>
					<para>These casts are not checked by the tool, however the <code>Cast.toNonNull</code>
					includes a Java language <code>assert</code> that may be used to enable a runtime
					check. Java language assertions are usually enabled by passing "-ea" to the Java virtual
					machine.</para>
						<para>The screenshot below shows an example of a cast to non-null from the Javadoc for
						the <code>Cast</code> utility.
					<mediaobject>
							<imageobject>
								<imagedata fileref="images/release-notes-540-cast.png" />
							</imageobject>
					</mediaobject>
			</para>
			</listitem>
			</orderedlist>
		</section>
</section>
    
    <section id="sec-jsure-release-5-3-0">
		<title>JSure version 5.3.0</title>
		<para>This section describes the 5.3.0 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>
			<orderedlist>
			<listitem><para>
			<emphasis>New Analysis-Enabled Metrics view</emphasis>
						&mdash;
						JSure now has a metrics view as described in <xref linkend="analysis-enabled-metrics-view" />.
						This view shows metrics collected during each scan of a codebase. These metrics
						can help answer questions about how much has been
						done to the codebase, how large it is, the scan performance, and so on.
						</para>
						</listitem>
			<listitem><para>
			<emphasis>@Raw annotation replaced with @Initialized</emphasis>
						&mdash;
						The confusing @Raw annotation has been replaced with @Initialized. Please see the Javadoc for @Initialized for further details on this change
						and proper use of the new annotation.
						</para>
						</listitem>
			<listitem><para>
			<emphasis>Scoped promise support for @NonNull, @Nullable, and @RegionEffects</emphasis>
						&mdash;
						It is now possible to "change the default" to non-null by using @Promise("@NonNull")
						at the package level. For example, to change all references to be non-null in the package
						com.stuff you would put the following in /com/stuff/package-info.java:
						<programlisting>@com.surelogic.Promise(&quot;@NonNull&quot;)
package com.stuff;</programlisting>
						Please see the Javadoc for @Promise for more examples of how to use this feature.
						</para>
						</listitem>
			</orderedlist>
		</section>
</section>
    
<section id="sec-jsure-release-5-1-0">
		<title>JSure version 5.1.0</title>
		<para>This section describes the 5.1.0 version of the JSure Eclipse
			client.
		</para>

		<section>
			<title>New and Noteworthy</title>
			<para>This section describes new and noteworthy features in this
				version of JSure.
			</para>
			<orderedlist>
			<listitem><para>
			<emphasis>Verification will timeout for &#64;NonNull, &#64;Raw, and &#64;Nullable annotations</emphasis>
						&mdash;
						Support for a timeout of the null value verifying analysis has been added in this release.
						This allows the user to better control how long a scan may take on a particular code base.
						Most tool users do not need to change the default timeout values in the tool. This capability
						is intended for advanced users on highly complex codebases.
						</para>
						</listitem>
			</orderedlist>
		</section>
    </section>
  </chapter>
</book>
