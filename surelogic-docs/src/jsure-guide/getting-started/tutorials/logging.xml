<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<section id="logging" xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Uncovering a bug in <package>java.util.logging</package></title>

	<para>
		In this tutorial we examine a real-world bug in the
		<package>java.util.logging</package>
		portion of the Java standard library. This is a check-then-act
		bug that was reported to Sun when it appeared in Java 5 but was not fixed until Java 7. Our version of
		the code for this tutorial is changed to be in a different package so
		that it doesn't conflict with the standard library.
	</para>

	<para>
		The project we will be using is named
		<emphasis>JSureTutorial_java.util.logging</emphasis>
		.
	</para>

	<section>
		<title>A check-then-act problem</title>

		<para>In the tutorial project go into the
			<package>com.surelogic.util.logging</package>
			package and open the
			<classname>Logger</classname>
			class in the Java editor. Examine the lines listed below.</para>
			
			<programlisting linenumbering="numbered" startinglinenumber="404">public void log(LogRecord record) {
  if (record.getLevel().intValue() &lt; levelValue || levelValue == offValue) {
    return;
  }
  synchronized (this) {
    if (filter != null &amp;&amp; !filter.isLoggable(record)) {
      return;
    }
  }</programlisting>
  
	<para>Of interest is line 409 that <structfield>filter</structfield>
	    is first checked that it is not null, followed by its use: <code>!filter.isLoggable(record)</code>. This occurs in order
	    because the <code>&amp;&amp;</code> is a shortcut
	    logical and which will return false if the first expression is false. This code is reasonable because if, in fact, <structfield>filter</structfield>
	    is null then the expression <code>!filter.isLoggable(record)</code> would throw a <emphasis>NullPointerException</emphasis>.</para>
	    
	<para>A lock on the instance is held as this operation occurs: this lock is acquired using <code>synchronized (this)</code> at line 408. Therefore, it appears
	    that the programmer intent is to hold a lock on the class when the <structfield>filter</structfield> is accessed. In fact, the
	    <emphasis>Logger</emphasis> class is intended to be threadsafe. You can see this way up at line 121 which is within the Javadoc on the class declaration.</para>
	    
	<programlisting linenumbering="numbered" startinglinenumber="121"> * All methods on Logger are multi-thread safe.</programlisting>
	
	<para>We now turn our attention to the getter and setter for the <structfield>filter</structfield> field in the implementation of <emphasis>Logger</emphasis>.
	    This code, which beings at line 365, is listed below.</para>
	
	<programlisting linenumbering="numbered" startinglinenumber="365">  /**
   * Set a filter to control output on this Logger.
   * &lt;P&gt;
   * After passing the initial "level" check, the Logger will call this Filter
   * to check if a log record should really be published.
   * 
   * @param newFilter
   *            a filter object (may be null)
   * @exception SecurityException
   *                if a security manager exists and if the caller does not
   *                have LoggingPermission("control").
   */
  public void setFilter(Filter newFilter) throws SecurityException {
    if (!anonymous) {
      manager.checkAccess();
    }
    filter = newFilter;
  }

  /**
   * Get the current filter for this Logger.
   * 
   * @return a filter object (may be null)
   */
  public Filter getFilter() {
    return filter;
  }</programlisting>
  
	<para>The problem is that neither the setter nor the getter follow the locking model. Worse, the Javadoc at line 372 and line 387 makes it
	    clear that a value of null is an acceptable value for the <structfield>filter</structfield> field.</para>
	    
	<para>The access of the <structfield>filter</structfield> field without holding the
	    proper lock is the concurrency problem. We refer to this as a check-then-act
	    problem because the change to null could occur, via the setter,
	    after the null check at line 409, but before the use of the field in the <code>!filter.isLoggable(record)</code>. Causing the program
	    the throw a <emphasis>NullPointerException</emphasis>.</para>

	</section>

	<section>
		<title>Causing a Logger to throw a NullPointerException</title>
		
		<para>The <emphasis>Logger</emphasis> class can be exercised to throw a <emphasis>NullPointerException</emphasis>.
		    We have included a small test program that has several threads obtain the same <emphasis>Logger</emphasis> instance
		    and repeatedly change the filter from a value to null while logging output.
		    This code is shown in <xref linkend="fig-logging-concurrent-exercise-code"/>.</para>
    
	    <figure id="fig-logging-concurrent-exercise-code">
	      <title>The concurrent exercise program to cause the library bug to throw a NullPointerException</title>
	      
	      <mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_concurrent-exercise-code.png" />
	        </imageobject>
	      </mediaobject>
	    </figure>
	    
	    <para>If you launch this program in Eclipse it will sometimes complete normally. Sometimes
	        one thread will throw a NullPointerException. Sometimes more than one thread will
	        throw a NullPointerException.  This is due to the unpredictable  nature of this type
	        of concurrency problem.</para>

	</section>
	
	<section>
		<title>(Optional) Use of Flashlight dynamic analysis to show the problem</title>
		
		<para>If you have the SureLogic Flashlight tool you can use it to reliably uncover the
		    problem with the <structfield>filter</structfield> field within
		    the <emphasis>Logger</emphasis> class. Launch the program with Flashlight using either the Flashlight menu or
		    the <inlinegraphic fileref="images/fl_logo.png"/> in the Eclipse launch toolbar. Let it
		    finish its execution, and let the tool automatically prepare the data collected for querying.  When prompted
		    switch to the Flashlight perspective. The result should appear as shown in the screenshot below.</para>
		    
	      <mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_flashlight-news.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>The news item of interest is boxed in red in the image
	          above: <emphasis>Shared fields with writes that do not happen-before subsequent reads</emphasis>.
	          What the Flashlight tool has observed during the program run is that there are (instance) fields
	          that are not safely shared between two or more threads per the Java memory model. In particular,
	          the tool could not establish that a write in one thread <emphasis>happened-before</emphasis> a read
	          in a second thread. Click on this finding to find out what fields were observed  to have this problem.</para>
	          
	      <mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_flashlight-finding.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>The Flashlight findings indicate the concurrency problem we described in the section above. However, it
	          did this by examining if state was safely shared per the memory model, whereas we were examining consistent
	          locking.  Dynamic analysis results
	          using the Java memory model are usually more precise, but Flashlight also noted the lack of consistent lock usage
	          for the <structfield>filter</structfield> field within the <emphasis>Logger</emphasis> class.
	          You can see this if you select the <emphasis>Shared fields with no common lock held for each access</emphasis>
		      result in the bad news report, or the <emphasis>What fields (non-static) have an empty
		      lock set after object construction?</emphasis> query from the <guilabel>Query Menu</guilabel> view.</para>
		      
	      <para>Flashlight contains rich information about these findings that you can feel free to dig into, however, we
	          will now turn our attention back to JSure. We want to now model the programmer intended locking model and fix the code bug.</para>
		
	</section>

	<section>
		<title>Use of JSure to show the problem</title>
		
		<para>Now let's switch back to JSure. To see the problem scan the project with JSure and examine the results. Some simple
		modeling has been done to the code. In particular, <classname>@ThreadSafe</classname> has been
		annotated on <classname>Filter</classname>
		and <classname>@Immutable</classname> on its subtype <classname>MyFilter</classname> in the
		concurrent exercise program described above. These both are verified by the tool.</para>
		
		  <mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_initial-scan-results.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>The <classname>@ThreadSafe</classname> on <classname>Logger</classname> is unable to be verified by the tool.  The image
	      above expands these results.  As is typical of placing <classname>@ThreadSafe</classname> on a complex mutable class, further
	      annotation is needed to bring this model into consistency.  Our focus for this tutorial is the <structfield>filter</structfield>
	      field within the <classname>Logger</classname> class.</para>
	      
	      <para>The results for the <structfield>filter</structfield>
	      field are expanded in the image above. Note that there are two parts of convincing JSure that the field respects the assertion
	      that the class is actually thread safe: (1) the field itself, (2) the object referenced by the field.  In this case the latter
	      is okay because the declared type of the field is <classname>Filter</classname>, which has been proven thread safe. The field
	      itself needs to be protected. Because the <structfield>filter</structfield> field is mutable,
	      and due to the (albeit inconsistent) use of locking
	      in the class implementation, we will annotate that this field is protected with a lock.  Add the annotation
	      <code>@RegionLock("FilterLock is this protects filter")</code> to the top of the class so that the code looks as shown below.</para>
	      
	      <mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_adding-filterlock.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>At this point re-scan the project with JSure. As expected, the inconsistent locking of the
	      <structfield>filter</structfield> field is noted by the tool.</para>
	      
	      <mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_filterlock-initial-results.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>If you click on the two protected accesses you will see that
	      they refer to the references to <structfield>filter</structfield>
	      in the <code>log</code> method. The two unprotected accesses
	      reference the unprotected accesses in the getter <code>getFilter</code> and
	      setter <code>setFilter</code>
	      methods.</para>
	</section>
	
	<section>
		<title>Fixing the inconsistent locking problem</title>
		
		<para>To fix the issue of inconsistent locking on the <structfield>filter</structfield> field in the <classname>Logger</classname>
		class we need to change the getter <code>getFilter</code> and
	      setter <code>setFilter</code>
	      methods to hold a lock on <code>this</code>. This can be done in one of two ways: (1) declaring the method to be <code>synchronized</code>,
	      and (2) adding a <code>synchronized</code> block on <code>this</code> within each of the methods.</para>
	      
	       <para>So change <code>setFilter</code> to look like
	      
	      <programlisting>public synchronized void setFilter(Filter newFilter) throws SecurityException {
  if (!anonymous) {
    manager.checkAccess();
  }
  filter = newFilter;
}</programlisting>

or

	      <programlisting>public void setFilter(Filter newFilter) throws SecurityException {
  if (!anonymous) {
    manager.checkAccess();
  }
  synchronized (this) {
    filter = newFilter;
  }
}</programlisting>

depending upon your preference. Further, change <code>getFilter</code> to look like

<programlisting>public synchronized Filter getFilter() {
  return filter;
}</programlisting>

or

<programlisting>public Filter getFilter() {
  synchronized (this) {
    return filter;
  }
}</programlisting>

depending upon your preference.  Now, re-scan the project with JSure and the lock model should now be found consistent.
	      
	      </para>
	      
	      <mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_filterlock-consistent.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>Also note in the results above that the <structfield>filter</structfield> field is now able to
	      support its portion of the overall <classname>@ThreadSafe</classname> assertion on the <classname>Logger</classname> class. To complete
	      all the modeling of the <classname>Logger</classname> class would take further work, which we will not do as part of this tutorial.</para>
	</section>
	
	<section><title>Quickly uncovering trouble during code evolution</title>
	
	<para>A benefit of JSure annotations is that they stay with the code as it evolves over time.  This can help you to spot
	the introduction of concurrency defects quickly in your software system.  To illustrate this add a new method
	called <code>getAnonymousLoggerFilter</code> to the <classname>Logger</classname> class:
	
<programlisting>public static Filter getAnonymousLoggerFilter() {
  return getAnonymousLogger().filter;
}</programlisting>

So your code should appear as shown below.</para>

		<mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_grumble-code.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>This method, at first glance, may appear to be a nice addition that allows client code to directly get a reference
	      to the filter being used by the anonymous logger.</para>
	      
	      <para>At this point scan the project again with JSure. It finds the locking model has become inconsistent due to this
	      code change.</para>
	      
	      <mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_grumble-scan-results.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>This is because the <structfield>filter</structfield> field is accessed by this method without holding the lock.
	      Well, one idea would be to mirror the <code>getAnonymousLogger</code> method and declare the method to be synchronized.
	      This change is shown below.</para>
	      
	      <mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_grumble-wrong-lock.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>Make this code change and re-scan the project with JSure.  Again the tool reports model&ndash;code inconsistency. What is wrong?
	      The problem is that we are holding the wrong lock. Because the <code>getAnonymousLoggerFilter</code> method is
	      declared to be <code>static</code>, adding <code>synchronized</code> to the method obtains a lock on the <classname>Logger</classname>
	      class&mdash;not on the anonymous logger instance!  To fix this problem change the method implementation to the code listed below.</para>
	      
	      <programlisting>public static Filter getAnonymousLoggerFilter() {
  Logger anon = getAnonymousLogger();
  synchronized (anon) {
    return anon.filter;
  }
}</programlisting>

		<para>Save your changes and re-scan the project with JSure. The locking model for the <structfield>filter</structfield> field
		should once again be consistent.</para>
		
		<mediaobject>
	        <imageobject>
	          <imagedata fileref="images/logging_grumble-consistent.png" />
	        </imageobject>
	      </mediaobject>
	      
	      <para>Note the value of the annotations for keeping the intended concurrency policies of your code consistent with its implementation
	      as code evolves. We are now finished with this tutorial.</para>
	
	</section>

</section>
