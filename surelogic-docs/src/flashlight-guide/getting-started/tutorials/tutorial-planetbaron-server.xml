<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<section id="sec-tutorial-planetbaron-server">
  <title>Finding a race condition in the PlanetBaron server with lock set analysis</title>
  
  <para>ChatTestClient was a simple Swing application that let us get started
  analyzing a program's concurrent behavior with Flashlight.  From this
  we uncovered a thread confinement bug that could easily be overlooked in a code inspection or even
  during testing.
  We now turn our attention to a more complex multi-threaded program, the
  PlanetBaron server, to illustrate several more complex queries that Flashlight
  is capable of. The basic user interaction with the Flashlight tool remains the
  same:
    <orderedlist>
      <listitem>Run an instrumented program.</listitem>
      <listitem>Prepare the data for querying.</listitem>
      <listitem>Query the data.</listitem>
      <listitem>Analyze and drill into the query results.</listitem>
      <listitem>Change/fix code.</listitem>
    </orderedlist>
  </para>

  <para>Run a PlanetBaron server using the Flashlight launch tab the Eclipse toolbar as
  shown in <xref linkend="fig-tutorial-planetbaron-running-server" />.  We are
  assuming you ran the server and player applications earlier in the tutorial so
  that the Server and PlayerUI launch configurations will still be present in
  the Eclipse launch menus.</para>

  <figure id="fig-tutorial-planetbaron-running-server">
    <title>Running Server with Flashlight instrumentation</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-running-server.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>You will see that data collection being tracked in
  the <guilabel>Flashlight Launched Run Control</guilabel> dialog. This is shown in
  <xref linkend="fig-tutorial-planetbaron-server-data-collection" />.</para>
  
  <figure id="fig-tutorial-planetbaron-server-data-collection">
    <title>The Launched Run Control dialog shows that data is being collected during our run of the PlanetBaron server</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-server-data-collection.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Next start three PlayerUI instances. We don't want to instrument these
  programs, so use the normal launch tab as shown in <xref
  linkend="fig-tutorial-planetbaron-running-playerui" />.</para>

  <figure id="fig-tutorial-planetbaron-running-playerui">
    <title>Running a PlayerUI without Flashlight instrumentation</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-running-playerui.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Go ahead and connect into the game as Laurel, Hardy, and
  Groucho. Exercise the game by having each player take several planets.  Have
  one planet be owned by each player at one time. To do this click on the same
  planet in all three PlayerUI instances. This is shown in <xref
  linkend="fig-tutorial-planetbaron-running-game" />.</para>

  <figure id="fig-tutorial-planetbaron-running-game">
    <title>Running three players at once on an instrumented server</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-running-game.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>When you have exercised the three players, terminate the three PlayerUI
  instances by closing the application windows. Run a ChatTestClient without
  instrumentation and use it to shutdown the server. Connect to the server and send a "shutdown" command.</para>

  <para>In the <guilabel>Flashlight Launched Run Control</guilabel> dialog you
  can watch the progress as the tool prepares the data collected from the server for querying.
  This process will take a few minutes to complete. Once data preparation is completed
  you can switch to the Flashlight perspective and dismiss the <guilabel>Flashlight
  Launched Run Control</guilabel> dialog. The Flashlight perspective should look similar
  to <xref
  linkend="fig-tutorial-planetbaron-lockset-overview" />.</para>


  <figure id="fig-tutorial-planetbaron-lockset-overview">
    <title>The Flashlight perspective showing news about our PlanetBaron server run</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-lockset-overview.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>What you see <xref linkend="fig-tutorial-planetbaron-lockset-overview" />
  may or may not be identical to what you see at your computer.  The program we
  are examining is a multi-threaded network-based game server. Therefore, it is
  impossible to duplicate a run&mdash;even for tutorial purposes. You should,
  however, see results similar to what we present. If not, we suggest
  you try another run of the PlanetBaron server.</para>

  <!-- Start of lockset tutorial -->
  <para>We'll use a couple of analyses performed by Flashlight during the prep
  phase to investigate the PlanetBaron server.  The first of these is a <emphasis>lock set
  analysis</emphasis>.  A lock set analysis examines each access of a field in the program
  and intersects the set of locks held.  If shared state has a lock set it is a
  good thing&mdash;this state was observed to be protected consistently by at
  least one lock.  This isn't a guarantee that this field will always be
  protected in every run of the program (to make this determination a sound
  verification tool like SureLogic JSure is required), but it was observed to be
  true for the particular run of the program being queried in Flashlight.  If
  shared state has no lock set
  then this could be a problem&mdash;it may mean that your program contains a
  race condition.</para>
  
  <para>This run has bad news about the results of Flashlight's lock
  analysis, click the <emphasis>Shared fields have no
  common lock held for each access</emphasis> in the bad news column
  as shown in <xref
  linkend="fig-tutorial-planetbaron-lockset-badnews" />.</para>
  
    <figure id="fig-tutorial-planetbaron-lockset-badnews">
    <title>Some shared fields are not protected by a common lock according to the Flashlight lock set analysis</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-lockset-badnews.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>The bad news item we clicked on runs the <emphasis>What fields (non-static) have an
  empty lock set after object construction?</emphasis> query.
  The results of this query are shown in <xref
  linkend="fig-tutorial-planetbaron-lockset1" />.
  The lock set analysis ignores state accesses during object construction
  because, typically, Java objects are constructed in the context of a single thread
  and only later is a reference to the object shared.
  By ignoring construction the lock set the analysis is more precise and Flashlight has
  other queries that can detect if object construction is not thread confined, i.e., it violates
  the normal Java convention.</para>
  
  <figure id="fig-tutorial-planetbaron-lockset1">
    <title>An empty lock set in PlanetBaron</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-lockset1.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>The query result in <xref linkend="fig-tutorial-planetbaron-lockset1" /> lists
  all objects that were observed to have at least one instance where a non-static field
  had an empty lock set.  The screenshot above shows that three ship instances&mdash;one ship
  for each player we connected&mdash;contained an
  <structfield>f_location</structfield> field that had an empty lock set. It is possible
  that in your run one or two of the three instances had a non-empty lock set.
  How could this happen? This could occur, for example, if the one instance was not exercised
  enough to make the lock set become empty, or put another way, the bad code
  was never called on that <classname>Ship</classname> instance.</para>
  
  <para>Before we investigate this potential locking problem in the PlanetBaron server code.
  We want to introduce the idea of a <emphasis>default query</emphasis>. Most, but not all, query results
  in Flashlight allow you to double-click on a row of the result and run a pre-selected or default query. This
  query has been selected by the tool to "make sense" to be invoked on that row of data. You can tell which
  query will be invoked with a double-click by selecting the row and then examining its context menu. The query that is the default
  is marked with a <guiicon><inlinegraphic fileref="images/asterisk.gif"/></guiicon>. To see this
  select <structfield>f_location</structfield> in the current query result and bring up the context menu.
  You will see that <emphasis>What instances contain this field and have an empty lock set?</emphasis>
  is marked as the default query. This is shown in
  <xref linkend="fig-tutorial-planetbaron-lockset-defaultquery" />.</para>

  <figure id="fig-tutorial-planetbaron-lockset-defaultquery">
    <title>The default query in a context menu is marked with a <guiicon><inlinegraphic fileref="images/asterisk.gif"/></guiicon> and can be invoked with a double-click</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-lockset-defaultquery.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Let's run this default query by double-clicking on the <structfield>f_location</structfield> row in the query result.
  You should obtain a list of <classname>Ship</classname> instances that have an empty lock set. We want to keep drilling
  in to this result. (We obtained two instances
  but this number will vary.) So now double click on any
  <classname>Ship</classname> instance listed in the result to run
  the <emphasis>How often is a lock held
  when this field is accessed?</emphasis>
  query. This query shows all the locks that were observed protecting any
  access to the state of the <classname>Ship</classname> instance we double-clicked on
  in the prior query result. Your results will vary but should be similar to what
  is shown in <xref linkend="fig-tutorial-planetbaron-lockset-lockperc" />.</para>

  <figure id="fig-tutorial-planetbaron-lockset-lockperc">
    <title>All the locks observed to protect access to the state of a <classname>Ship</classname> instance</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-lockset-lockperc.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>The data presented in <xref linkend="fig-tutorial-planetbaron-lockset-lockperc" />
  may be somewhat of a surprise to you. How can so many locks protect the <structfield>f_location</structfield>
  field in one <classname>Ship</classname> instance?
  This occurs in the PlanetBaron server because the <classname>Ship</classname> class is
  part of the game model and is accessed from many places within the code. The code that
  invokes <classname>Ship</classname> class methods is holding locks as required by its concurrency policy&mdash;but
  holding these locks is not related to
  the concurrency policy of the <classname>Ship</classname> class.
  This results in Flashlight noting many locks being held
  when the <structfield>f_location</structfield>
  is accessed. Notice, by examining the reported <guilabel>% Held</guilabel> column, that
  most of these locks are not held all that often.</para>
  
  <para>The lock that is held the most in <xref linkend="fig-tutorial-planetbaron-lockset-lockperc" />
  is an instance of <classname>ReentrantReadWriteLock</classname>
  this is a dynamic lock defined by java.util.concurrent. Flashlight watches both intrinsic
  lock acquisitions (via <classname>synchronized</classname> blocks and methods) and dynamic locking
  (<classname>java.util.concurrent.Lock</classname> instances). Intrinsic lock use is indicated with a
  <guiicon><inlinegraphic fileref="images/lock.gif"/></guiicon> icon and the object instance name.
  Dynamic lock acquisition is indicated with a <guiicon><inlinegraphic fileref="images/lock_dynamic.gif"/></guiicon>
  icon and the object instance name.</para>
  
  <para>Some analysis of this query result points to a likely problem in the PlanetBaron server implementation. The same object, a instance of
  <classname>ReentrantReadWriteLock</classname>, is being used as <emphasis>both a dynamic
  and an intrinsic</emphasis> lock&mdash;this is indicated by the same lock name appearing,
  one with an <guiicon><inlinegraphic fileref="images/lock.gif"/></guiicon> icon (intrinsic) and the other with a <guiicon><inlinegraphic fileref="images/lock_dynamic.gif"/></guiicon>
  (dynamic) icon. It is confusing and bad coding practice to do this in
  a Java program, but it can occur when a locking scheme is "converted" from using intrinsic locks
  to dynamic locks, and, in fact, this was done to the PlanetBaron server code.  It could
  also happen if a programmer doesn't understand how to acquire a dynamic lock, e.g., <code>l.lock()</code>,
  and instead synchronizes on it, e.g., <code>synchronized(l)</code>.</para>
  
  <para>Let's investigate this further. Double-click on the top entry in the query result to 
  run the <emphasis>Where is this field accessed while this lock is not held?</emphasis>. This
  query shows us the points in the code where this field was accessed and the dynamic
  <classname>ReentrantReadWriteLock</classname> was <emphasis>not</emphasis> held. This result also includes
  accesses during object construction, so we want to ignore these accesses.</para>

  <para>The result is shown in <xref linkend="fig-tutorial-planetbaron-lockset4"
  /> Two of them are in the
  constructor, and don't appear to be a problem.  The final line, on the other
  hand, is an unprotected access of <structfield>f_location</structfield>, and
  the source of our problem.  <xref linkend="fig-tutorial-planetbaron-lockset4"
  /> shows the unprotected access of the <structfield>f_location</structfield> field
  at line 156 of the <classname>Ship.java</classname> compilation unit.
  This looks like a coding mistake. We have boxed (in yellow) the scope where the lock
  is held. It appears that the scope of code holding the lock in this method was just
  made too narrow to include this access. Clearly the method implementation wants a
  predicate (not asking to move to your current location) to hold, but the lock is not held
  when predicate is checked. In fact, this type of bug is called a <emphasis>check-then-act</emphasis>
  concurrency problem
  </para>

  <figure id="fig-tutorial-planetbaron-lockset4">
    <title>The offending line of code</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-lockset4.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>
    Fortunately, the fix is straightforward: we acquire the write lock
    <emphasis>before</emphasis> the access of
    <structfield>f_location</structfield> in the condition of the
    <code>if</code> statement.  This requires changing the scope of the
    <code>try</code>&ndash;<code>finally</code> block as well.  This change fixes the <emphasis>check-then-act</emphasis>
  concurrency bug.

  <programlisting><![CDATA[  public void moveTo(Location destination) {
    if (isMoving())
      throw new IllegalStateException(
          "a moving ship can't change its destination");

    f_lock.writeLock().lock();
    try {
      if (f_location.equals(destination)) {
        LOG.log(Level.WARNING,
            "ignored attempt to move ship to its current location");
      } else {
        f_isMoving = true;
        f_turnsMoving = 0;
        f_destination = destination;
        f_moveDistance = f_location.distanceTo(f_destination);
        f_percentageMoved = 0.0;
        sendReport(); // OK to invoked holding a write lock
      }
    } finally {
      f_lock.writeLock().unlock();
    }
  }]]></programlisting>

    Change the method to appear like the one above, and run Flashlight on the
    PlanetBaron server again.  Once you have completed the new run and it is ready
    to be queried, you can run
    <emphasis>What fields (non-static) have an empty lock set after object construction?</emphasis> to see
    that all <classname>Ship</classname> instances that contain of <structfield>f_location</structfield> now have a lock
    set.
  </para>

</section>
