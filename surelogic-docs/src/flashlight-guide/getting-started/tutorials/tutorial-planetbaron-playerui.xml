<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<section id="sec-tutorial-planetbaron-playerui">
  <title>Finding a potential deadlock in the PlanetBaron player user interface with lock cycle detection</title>

  <para>
    In addition to a lock set analysis, Flashlight provides an analysis that
    detects potential deadlock scenarios.  It does this by constructing a
    directed graph of all lock acquisitions in the program.  Each edge in the
    graph points from a lock that is already held to a lock being acquired.
    Cycles in the graph indicate that the program sometimes acquires a set of
    locks in more than one order, a behavior that can cause two or more threads to deadlock.
    To investigate this further, we will instrument the PlanetBaron PlayerUI this
    time around.
  </para>

  <para>
    In the previous section we started up a server through the Flashlight launch
    tab and three instances of PlayerUI through the normal launch tab.  For this
    experiment, we only need one instance of PlayerUI, and we will instrument it
    instead of the server.  Go ahead and run
    <classname>com.surelogic.planetbaron.server.Server</classname> as a normal Java
    application, and then launch one instance of
    <classname>com.surelogic.planetbaron.client.PlayerUI</classname> through the
    Flashlight launch tab.  As in the previous tutorial, go ahead and connect
    into the game (type in a player name and then press
    <guibutton>Connect</guibutton>), and move your ship to a planet or two.
    Then terminate your
    instance of PlayerUI by closing the application window, and stop the server
    from the Flashlight console. You should see progress in the <guilabel>Flashlight
    Launched Run Control</guilabel> dialog as shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock-prep" />.
  </para>
  
    <figure id="fig-tutorial-planetbaron-deadlock-prep">
    <title>Preparing data from a instrumented PlayerUI run for querying</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock-prep.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>If you are not already in it, switch into the Flashlight perspective so that we can begin
  to query the data from the PlayerUI run that you just completed.</para>
  
  <para>As seen in <xref linkend="fig-tutorial-planetbaron-deadlock0" /> Flashlight
  has observed lock cycles that may cause the program to deadlock.</para>

  <figure id="fig-tutorial-planetbaron-deadlock0">
    <title>Deadlock results about the PlayerUI in both the query menu and the bad news table</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock0.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>This doesn't
  mean that the run actually deadlocked. In fact, in our run it didn't&mdash;but it may have in yours,
  if the user interface froze while you were running the game, then that's likely what occurred.
  What the tool has observed is that different threads acquired two or more
  locks in a different order&mdash;which could result in a deadlock if the timing
  of this is just right. For example, if one thread acquires <emphasis>lock-1</emphasis>
  roughly at the same time a second thread acquires <emphasis>lock-2</emphasis>, and then (still holding both
  locks) the first thread tries to acquire <emphasis>lock-2</emphasis> and the second thread tries
  to acquire <emphasis>lock-1</emphasis> the program has reached a deadlock. Progress cannot be
  made in either of these threads unless one "gives up" trying to acquire both locks. But,
  in Java "giving up" is not expressible with
  intrinsic locks (e.g., synchronized statements) and most of the java.util.concurrent locks&mdash;both
  threads just stop their progress.  Therefore, if two or more locks need to be
  acquired by a system then the order that the lock
  acquisitions are made should be kept consistent in the entire codebase.
  Deadlock can be difficult to test for, but Flashlight helps make it easier by not
  noticing inconsistent lock orderings <emphasis>without</emphasis> an actual deadlock
  having to occur. With traditional testing, the deadlock would actually have to
  occur during the test run to catch this problem. Further, the failure may not contain enough trace
  information to diagnose the problem. This can be maddening if you can only get the test failure
  to occur rarely, and, as is often the case, never in the debugger.</para>
  
  <para>Click on the bad news item <emphasis>Lock cycles were observed
  that could cause the program to deadlock</emphasis>. This runs the query <emphasis>What
  lock cycles could potentially cause deadlock?</emphasis> as indicated in
  <xref linkend="fig-tutorial-planetbaron-deadlock0" />. The query result you get should
  look similar to the one in <xref linkend="fig-tutorial-planetbaron-deadlock-lc" />.</para>
  
  <figure id="fig-tutorial-planetbaron-deadlock-lc">
    <title>Lock cycles observed in our PlayerUI run</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock-lc.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Go ahead and double-click on both cycles and take a look. Let's focus on the two lock cycle
  between a <classname>ReentrantReadWriteLock</classname> and an <classname>Object</classname>. This was
  the first cycle in our run, but it might be the second in yours.
  This result is shown in the <xref linkend="fig-tutorial-planetbaron-deadlock1" />.</para>

  <figure id="fig-tutorial-planetbaron-deadlock1">
    <title>A potential deadlock in <classname>com.surelogic.planetbaron.client.PlayerUI</classname></title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock1.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>
  This query result uses a graphical display, in addition to a table to better convey the lock
  cycle. The result displays a two-lock cycle.  This potential deadlock occurs
  whenever you connect a PlayerUI to the PlanetBaron server.
  You can manipulate the graph by clicking and dragging nodes
  if the layout is cluttered. You can also move the whole graph by clicking and dragging on the background
   of the graph.</para>
   
   <para>In our run the locks
    involved are <code>Object-42</code> and
    <code>ReentrantReadWriteLock-51</code>, and each appears to be acquired at
    some point while the other is already held. Notice from the icons that
    <guiicon><inlinegraphic fileref="images/lock.gif"/></guiicon> <code>Object-42</code> is used as an intrinsic lock
    and <guiicon><inlinegraphic fileref="images/lock_dynamic.gif"/></guiicon> <code>ReentrantReadWriteLock-51</code>
    is used as a dynamic lock.
    Your lock numbers may be different, but they should correspond to the same
    locks identified in our run.
  </para>
  
  <para>Notice that the result shown <xref
    linkend="fig-tutorial-planetbaron-deadlock1" /> has all the criteria needed for the program to deadlock. One thread, Thread-4, holds
    <code>ReentrantReadWriteLock-51</code> and then acquires <code>Object-42</code> (138 times in our run). A second thread,
    AWT-EventQueue-0, holds <code>Object-42</code> and then acquires <code>ReentrantReadWriteLock-51</code> (80 times in our run). We just got lucky
    that the <emphasis>deadly embrace</emphasis> didn't occur and deadlock the PlayerUI&mdash;our program worked
    properly by luck of the scheduler. As we noted above, this problem in the code occurs
    whenever you connect a PlayerUI to the PlanetBaron server. There is a lock ordering problem
    with the PlayerUI code.</para>

  <para>
    To figure out where in the code the implementation problem lies, we'll have to look at both lock edges
    in the cycle one at a time.  Select the <code>ReentrantReadWriteLock-51 -> Object-42</code> row in
    the table and run the <emphasis>Where and in what threads does this lock
    edge occur?</emphasis>. The result will be similar to the one shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock2" />.</para>
    
  <figure id="fig-tutorial-planetbaron-deadlock2">
    <title>Code location where the <code>ReentrantReadWriteLock-51 -> Object-42</code> lock edge occurs</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock2.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
    <para>The only location in the code where this edge occurred is at line 424 of the <classname>MapView</classname> compilation unit.
    Flashlight lets us understand how we got to this location with two kinds of traces:
    <emphasis>stack</emphasis> and <emphasis>lock</emphasis> traces.
    The stack trace is a traditional debugger trace. To see this select the code location in the result and run
    the <emphasis>What is the stack trace?</emphasis> as shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock2-stm" />. The query result is shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock2-st" />.</para>
    
  <figure id="fig-tutorial-planetbaron-deadlock2-stm">
    <title>Running a query to see the stack trace of how the <code>ReentrantReadWriteLock-51 -> Object-42</code> lock edge occurred</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock2-stm.png" />
      </imageobject>
    </mediaobject>
  </figure>
  <figure id="fig-tutorial-planetbaron-deadlock2-st">
    <title>Stack trace of how the <code>ReentrantReadWriteLock-51 -> Object-42</code> lock edge occurred</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock2-st.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>You can select each row in the resulting stack trace to have
  the Java editor and <guilabel>Historical Source Snapshot</guilabel> view
  jump to that code location.   Here
    the stack trace tells us that the lock acquisitions originated from
    the <function>run</function> method in our
    <classname>ServerProxy</classname> class.
    The <classname>ServerProxy</classname> class extends
    <classname>java.lang.Thread</classname>, and an instance of it is created
    and started when we connect to a server. Going to the bottom of the stack trace can often help us understand
    what Thread-4 was in terms of the program design.
    In this case, Thread-4 handles the background network communication with
    the PlanetBaron server.  A limitation of a stack trace is that it doesn't directly show where the lock acquisitions occurred, that's
    what Flashlight uses a <emphasis>lock trace</emphasis> to do.</para>
    
    <para>
    To show where locks were acquired in the code Flashlight uses a <emphasis>lock trace</emphasis>. Similar to a stack trace, the lock trace shows where locks were acquired
    by a thread in order from most recently acquired to least recently acquired. Go back up to the previous query result by pressing the
    <guiicon><inlinegraphic fileref="images/left.gif"/></guiicon> toolbar button in the <guilabel>Query Results</guilabel> view.
    Select the code location again and pick the <emphasis>What is the lock trace?</emphasis> 
    query from the context menu as shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock2-ltm" /> (you could alternatively double-click on the row because 
    as indicated by the <guiicon><inlinegraphic fileref="images/asterisk.gif"/></guiicon> obtaining
    the lock trace is the default query). The query result is shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock2-lt" />.</para>
    
      <figure id="fig-tutorial-planetbaron-deadlock2-ltm">
    <title>Running a query to see the lock trace of how the <code>ReentrantReadWriteLock-51 -> Object-42</code> lock edge occurred</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock2-ltm.png" />
      </imageobject>
    </mediaobject>
  </figure>
  <figure id="fig-tutorial-planetbaron-deadlock2-lt">
    <title>Lock trace of how the <code>ReentrantReadWriteLock-51 -> Object-42</code> lock edge occurred</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock2-lt.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
    <para>Like the stack trace, you can select each row in the resulting
  lock trace to have the Java editor and <guilabel>Historical Source Snapshot</guilabel> view
  jump to that code location.
   If we inspect the two entries reported in the trace from bottom to top, we
    see that the edge first acquires a write lock on
    <structfield>f_lock</structfield> in
    <classname>GameMap</classname> as shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock2-c1" />., followed by a lock
    on <structfield>m_cursorLocationLock</structfield> in
    <classname>MapView</classname> as shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock2-c2" />.</para>
  
  <figure id="fig-tutorial-planetbaron-deadlock2-c1">
    <title>First lock acquisition in this edge occurs in <structfield>endCurrentTurn</structfield> in the <classname>GameMap</classname> class</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock2-c1.png" />
      </imageobject>
    </mediaobject>
  </figure>
  <figure id="fig-tutorial-planetbaron-deadlock2-c2">
    <title>Second lock acquisition in this edge occurs in the <structfield>endOfTurn</structfield> callback in the <classname>MapView</classname> class</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock2-c2.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>The dynamic lock first acquired protects the model of the game map. This code and
  its locking policy is shared
  by the PlayerUI and the PlanetBaron server. The second lock is used to protect the location of the
  mouse cursor in terms of the game map grid within the PlayerUI. Apparently the designer
  of this code thought these two locks did not interact&mdash;but it appears that they do.</para>
  
  <para>Now let's turn our focus to the other edge of the lock cycle to see what
  occurred in the program to have the locks occur in the other order. We need to go back up the the graphical view that showed the edges.
  To do this directly, select the <emphasis>What are the edges for this lock cycle?</emphasis> result in
  the <guilabel>Query Results Explorer</guilabel> view as shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock-reset" />. This action will change the
    <guilabel>Query Results</guilabel> view to show the results for the <emphasis>What are the edges for this lock cycle?</emphasis> query.</para>
  
    <figure id="fig-tutorial-planetbaron-deadlock-reset">
    <title>Directly selecting the <emphasis>What are the lock edges for this lock cycle?</emphasis> result in the Query Results Explorer view re-displays that queries result</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock-reset.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Select the <code>Object-42 -> ReentrantReadWriteLock-51</code> row in
    the table and run the <emphasis>Where and in what threads does this lock
    edge occur?</emphasis>. The result will be similar to the one shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock3" />.</para>
    
  <figure id="fig-tutorial-planetbaron-deadlock3">
    <title>Code location where the <code>Object-42 -> ReentrantReadWriteLock-51</code> lock edge occurs</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock3.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>From the result above we see that this lock edge occurs at two points in the code: lines 299 and lines 463 of the <classname>GameMap</classname>
  compilation unit. Both seem to occur with the same frequency and both are within the AWT Event Dispatch Thread (EDT) so we'll arbitrarily pick
  the first and drill-in to it.
  Select the location at line 299 in the <guilabel>Query Results</guilabel> view and from the context menu run
    the <emphasis>What is the stack trace?</emphasis> query. The result is shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock3-st" />.</para>
  
  <figure id="fig-tutorial-planetbaron-deadlock3-st">
    <title>Stack trace of how the <code>Object-42 -> ReentrantReadWriteLock-51</code> lock edge occurred</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock3-st.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Again we are very interested in the bottom of the stack trace to figure out the thread context this edge occurred in. In this
  case the trace that led to the edge began in the mouseMoved method of the <classname>MapView</classname> class. This is a callback
  from the Swing user interface library about changes to where the mouse is pointing on the user's screen. Now go
  back up to the previous query result by pressing the
    <guiicon><inlinegraphic fileref="images/left.gif"/></guiicon> toolbar button in the <guilabel>Query Results</guilabel> view.
    Select the first code location again and pick the <emphasis>What is the lock trace?</emphasis> 
    query from the context menu (you could alternatively double-click on the row because 
    as indicated by the <guiicon><inlinegraphic fileref="images/asterisk.gif"/></guiicon> obtaining
    the lock trace is the default query). The query result is shown in <xref
    linkend="fig-tutorial-planetbaron-deadlock3-lt" />.</para>
    

  <figure id="fig-tutorial-planetbaron-deadlock3-lt">
    <title>Lock trace of how the <code>Object-42 -> ReentrantReadWriteLock-51</code> lock edge occurred</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock3-lt.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>The bottom two lock acquisitions are of the same lock, the
  lock that protects the location of the
  mouse cursor in terms of the game map grid within the PlayerUI. This is not surprising because
  the callback is telling the program that the mouse pointer location has changed on the screen. Select the
  top lock acquisition and in the Java editor you can see where in the code the last lock in this edge was acquired as shown
  in <xref linkend="fig-tutorial-planetbaron-deadlock3-maplock" />.</para>
  
  <figure id="fig-tutorial-planetbaron-deadlock3-maplock">
    <title>The last lock acquisition in this edge occurs in the <structfield>getPlanetAt</structfield> "getter" method in the <classname>GameMap</classname> class</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock3-maplock.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>This call to <structfield>getPlanetAt</structfield> is the problem. But what code called this method? Switch back to the stack trace
  result and select the entry just below the location in <structfield>getPlanetAt</structfield>&mdash;the second row in the trace.
  The result is shown in <xref linkend="fig-tutorial-planetbaron-deadlock3-getPlanetAt" />.</para>
  
  <figure id="fig-tutorial-planetbaron-deadlock3-getPlanetAt">
    <title>Where the call to the <structfield>getPlanetAt</structfield> "getter" method occurs during this edge</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock3-getPlanetAt.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>The call to setScanInformation is the root cause of this edge. This method updates the information in the scan
  box part of the user interface as shown in <xref linkend="fig-tutorial-planetbaron-deadlock3-scan" />. The scan box displays information about
  the planet the mouse is currently hovering over. This image also
  visually shows the "logical" mouse location that is being protected by <structfield>m_cursorLocationLock</structfield>
  as a white outline around square on the game map.</para>
  
  <figure id="fig-tutorial-planetbaron-deadlock3-scan">
    <title>The scan in the PlayerUI shows information about the planet the mouse is hovering over</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock3-scan.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Fixing a potential deadlock may not straightforward because it often points to a design problem. However, in this case narrowing
  the scope of use of
  <structfield>m_cursorLocationLock</structfield> is a good starting place. In particular, two changes would probably address this problem.
  First, the operation of checking if the cursor has moved, and if so saving the last location and updating the current location should
  be moved into a method&mdash;as opposed to being directly done in the mouseMoved method. Second, the call to notifyCursorListeners in setCursorLocation
  should not be made holding the lock.</para>
  
    <programlisting>
<![CDATA[
private void setCursorLocation(Location l) {
  synchronized (m_cursorLocationLock) {
    m_cursorLocation = l;
    notifyCursorListeners(l); // BAD - Don't do this!
  }
}
]]>
  </programlisting>
   
  
  <para>Note that the call to notifyCursorListeners within the synchronized block. This call "calls back"
  to client code that has registered with the <classname>MapView</classname> class. This, from a best practice point of view,
  is really the root cause of the potential deadlock. It violates Joshua Bloch's Item 67: <emphasis>Avoid excessive synchronization</emphasis> from the
  book <emphasis>Effective Java</emphasis> (2nd edition, Addison-Wesley 2008). The item states <emphasis>To avoid liveness and safety failures,
  never cede control to the client within a synchronized method or block.</emphasis>. However, this
  is exactly what the current implementation of setCursorLocation does. For the purposes of this tutorial we will not go through the code changes
  necessary to fix this in the PlanetBaron code. We finish up by noting two things: (1) This deadlock does really occur in real use of the PlayerUI program, and (2)
  until Flashlight was used to investigate the problem, several experienced programmers were unable to track down what was causing the intermittent deadlock.
  </para>
  
  <para>Before we move on, let's turn our attention to the second lock cycle in the program. Clear out all your query results by
  pressing <guiicon><inlinegraphic fileref="images/gray_x_double.png"/></guiicon> icon in the toolbar
  of the <guilabel>Query Results</guilabel> view. Next double-click on
  the <emphasis>What lock cycles could potentially cause deadlock?</emphasis> query in the <guilabel>Query Menu</guilabel>
  view (it should be the first query listed). Next bring up the lock cycle we didn't just investigate to get a result
  similar to the one shown in <xref linkend="fig-tutorial-planetbaron-deadlock4" />.</para>
  
  <figure id="fig-tutorial-planetbaron-deadlock4">
    <title>A "self" lock cycle in the PlayerUI where a single lock is used as both an intrinsic and dynamic lock</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock4.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>This is a "self" lock cycle where the same lock is being used as both an intrinsic and dynamic lock.
  Notice from the icons that
    <guiicon><inlinegraphic fileref="images/lock.gif"/></guiicon> <code>ReentrantReadWriteLock-1565</code> is used as an intrinsic lock
    and same object <guiicon><inlinegraphic fileref="images/lock_dynamic.gif"/></guiicon> <code>ReentrantReadWriteLock-1565</code>
    is used as a dynamic lock.
  This troublesome code was most likely caused by a bad conversion to the
  use of the util.concurrent read-write lock from simple intrinsic locking in the PlanetBaron
  code&mdash;a change made in the second year of this software's existence. We will not step through this
  problem in detail, however, please feel free to investigate it fully on your own. To make this more concrete, we note
  that if you
  drill-into this result you will find muddled methods like the one listed below.</para>
  
    <programlisting>
<![CDATA[public void doTurn() {
  f_lock.writeLock().lock();  // dynamic lock acquisition
  try {
    synchronized (f_lock) {   // BAD - Don't synchronize on a dynamic lock object!
      f_sendReport_lastTurn = f_sendReport_thisTurn;
      f_sendReport_thisTurn = false;
    }
  } finally {
    f_lock.writeLock().unlock();
  }
}
]]>
  </programlisting>
  
  <para>Notice that <code>f_lock</code> is acquired as both a dynamic lock, the call to <code>lock()</code> and
  <code>unlock()</code>, and an intrinsic lock, the <code>synchronized (f_lock)</code> block. It is considered
  bad practice to synchronize on a util.concurrent lock object, but Java cannot stop you from doing this.
  This is a mistake that can effect program performance, and in this case, worse, cause a deadlock.
  </para>
  
  <para>In fact, Flashlight has a special query to help track down this kind of intrinsic/dynamic use problem&mdash;even if it didn't result
  in a lock cycle as in the case of the example above.  Let's run this query now.
  Clear out all your query results by
  pressing <guiicon><inlinegraphic fileref="images/gray_x_double.png"/></guiicon> icon in the toolbar
  of the <guilabel>Query Results</guilabel> view. Next double-click on
  the <emphasis>What objects were used as both a dynamic and an intrinsic lock?</emphasis> query in the <guilabel>Query Menu</guilabel>
  view (it should be the last query listed in the <emphasis>Lock Use</emphasis> section of the menu). The result
  should be similar to the one shown in <xref linkend="fig-tutorial-planetbaron-deadlock4-both" />.</para>
  
  <figure id="fig-tutorial-planetbaron-deadlock4-both">
    <title>Lock objects in the PlayerUI that were observed to be used as both a dynamic lock and an intrinsic lock</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock4-both.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>This query can be helpful to track down this particular locking problem.  In fact, there is a bad news item
  for this that you will receive if it is observed as shown in <xref linkend="fig-tutorial-planetbaron-deadlock4-both-news" />.</para>
  
  <figure id="fig-tutorial-planetbaron-deadlock4-both-news">
    <title>News item that lock objects in the PlayerUI that were observed to be used as both a dynamic lock and an intrinsic lock</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock4-both-news.png" />
      </imageobject>
    </mediaobject>
  </figure>
</section>
