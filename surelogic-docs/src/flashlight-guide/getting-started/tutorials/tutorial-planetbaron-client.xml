<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<section id="sec-tutorial-planetbaron-client">
  <title>Finding a thread-confinement problem in the PlanetBaron ChatTestClient with API specific analyses</title>

  <para>PlanetBaron is a network-based real-time strategy game. It contains
  three programs that we will run during this tutorial. The first is a server
  program that manages the distributed game state. The second is a graphical
  program that allows a player to interact with the game. The third program,
  called the chat-test client, allows direct interaction with the server for the
  purpose of debugging and management. For example, the chat-test client is used
  to shutdown a server.</para>

  <para>Flashlight is a dynamic analysis tool. To get any useful results from
  Flashlight we have to collect data while a program is running. We will start
  below by describing how to run and play a PlanetBaron game.  After we
  understand a bit about how to run the game we will return to using Flashlight
  to analyze it.</para>

  <para>Let's run a PlanetBaron game. Select <filename>Server.java</filename> in
  the <package>com.surelogic.planetbaron.server</package> package. Right-click and
  select <menuchoice><guisubmenu>Run As</guisubmenu> <guimenuitem>Java
  Application</guimenuitem></menuchoice>. You should see following output in the
  console which indicates that the server has started successfully:</para>

  <screen>
    [INFO "server-main"] PlanetBaron game server listening for clients on port 8693 and playing on a 15x15 map
  </screen>

  <para>Now we need to add some players. Select
  <filename>PlayerUI.java</filename> in the
  <package>com.surelogic.planetbaron.client</package> package. Right-click and select
  <menuchoice><guisubmenu>Run As</guisubmenu> <guimenuitem>Java
  Application</guimenuitem></menuchoice>. You will see a Window appear has a
  blank grid and the title <application>PlanetBaron</application>. In the lower
  right-hand-corner enter a player name, <userinput>Laurel</userinput>, and
  press <guibutton>Connect</guibutton>.</para>

  <para>The screen will change to contain several planets and one ship with
  "Laurel" as its label. By moving your mouse around the grid you can direct
  your ship. Place your mouse over a planet and left-click.  This action will
  cause your ship to move slowly to that planet. When your ship arrives you will
  become the owner of that planet. This is called "taking ownership" of a
  planet. Go ahead an take ownership of a few planets. Note that while your ship
  is moving you are not allowed to change its destination.  Once it arrives at
  the destination you selected you can then select a subsequent
  destination.</para>

  <para>If you look at the console for the server you will see the commands that
  have come in from the Laurel PlayerUI. For example, your server console might
  look similar to the below:</para>

  <screen>
    [INFO "server-main"] PlanetBaron game server listening for clients on port 8693 and playing on a 15x15 map [com.surelogic.planetbaron.server.Server.startListening()]
    [INFO "server-ch10"] client handler thread started [com.surelogic.planetbaron.server.ClientHandler.run()]
    [INFO "server-ch10 (Laurel)"] "play "Laurel"" processed GameStateUpdate from ch10 (Laurel) [com.surelogic.planetbaron.server.ClientHandler.run()]
    [INFO "server-ch10 (Laurel)"] "moveship "Laurel" to (12,11)" processed Ok from ch10 (Laurel) [com.surelogic.planetbaron.server.ClientHandler.run()]
    [INFO "server-ch10 (Laurel)"] "moveship "Laurel" to (9,13)" processed Ok from ch10 (Laurel) [com.surelogic.planetbaron.server.ClientHandler.run()]
    [INFO "server-ch10 (Laurel)"] "moveship "Laurel" to (8,10)" processed Ok from ch10 (Laurel) [com.surelogic.planetbaron.server.ClientHandler.run()]
  </screen>

  <para>Now, go back to Eclipse and start a second instance of
  <filename>PlayerUI.java</filename>. In the lower right-hand-corner enter a
  player name, <userinput>Hardy</userinput>, and press
  <guibutton>Connect</guibutton>.</para>

  <para>The game supports as many players as you choose to connect to the
  server. Notice that the planets that Laurel owns are red in the Hardy PlayerUI
  while they are white in the Laurel PlayerUI.  Moving back and forth between
  the two PlayerUIs move the ships to play the game.  Note that the idea of the
  game is to own as many planets as you can. A game screenshot is shown in <xref
  linkend="fig-tutorial-planetbaron-playerui" />.</para>

  <figure id="fig-tutorial-planetbaron-playerui">
    <title>The PlanetBaron PlayerUI for Laurel</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-playerui.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>To finish the game press <guibutton>Disconnect</guibutton> in both
  PlayerUI instances and then terminate the programs by closing the application
  windows as usual. This action ends both player user interfaces but the server
  is still running.  To terminate the server we need to use the chat-test client
  program. Select <filename>ChatTestClient.java</filename> in the
  <package>com.surelogic.planetbaron.client</package> package. Right-click and select
  <menuchoice><guisubmenu>Run As</guisubmenu> <guimenuitem>Java
  Application</guimenuitem></menuchoice>. You will see a window appear with the
  title <application>ChatTest - PlanetBaron</application>. This program allows
  you to directly control the game server via text commands. We want to use it
  to shutdown the game server. To do this press <guibutton>Connect</guibutton>
  to connect to the game server and enter <userinput>shutdown</userinput> as the
  command. Your screen should now look like the one shown in <xref
  linkend="fig-tutorial-planetbaron-chattestclient" />.</para>

  <figure id="fig-tutorial-planetbaron-chattestclient">
    <title>Using the ChatTestClient to shutdown the game server</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-chattestclient.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Press <guibutton>Send</guibutton> to shutdown the server. A dialog will
  appear stating that the server has disconnected from the ChatTestClient that
  you may dismiss. You can now terminate the ChatTestClient by closing the
  application window. Back in the Eclipse console for the server you should see
  the following message at the bottom:</para>

  <screen>
    [INFO "server-main"] PlanetBaron game server shutdown complete
  </screen>

  <para>We are now ready to use Flashlight to help us understand the concurrency
  in the PlanetBaron game. Let's start with the ChatTestClient. To run the
  ChatTestClient with Flashlight instrumentation we select it from the
  Flashlight launch tab in the Eclipse toolbar as shown in <xref
  linkend="fig-tutorial-planetbaron-running-chattestclient" />.</para>

  <figure id="fig-tutorial-planetbaron-running-chattestclient">
    <title>Launching ChatTestClient with Flashlight instrumentation</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-running-chattestclient.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Two windows will appear on your screen. First, the <guilabel>Flashlight Launched Run Control</guilabel> dialog
      (to the right in <xref linkend="fig-tutorial-planetbaron-dialog-and-chattestclient" />) will
   appear to monitor the instrumented program run.
   This dialog automatically appears when an instrumented program is launched in Eclipse.
   It tracks the program run from launch, execution, termination, and data
   preparation. It can be though of as being similar to a web
   browser download monitor dialog.</para>
   
    <figure id="fig-tutorial-planetbaron-dialog-and-chattestclient">
    <title>Running ChatTestClient with Flashlight instrumentation monitoring in the Flashlight Launched Run Control dialog</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-dialog-and-chattestclient.png" />
      </imageobject>
    </mediaobject>
  </figure>
      
  <para>Second, the ChatTestClient window will appear on your screen
  (to the left in <xref linkend="fig-tutorial-planetbaron-dialog-and-chattestclient" />). Click the
  <guibutton>Connect</guibutton> button in the ChatTestClient window to try and connect to a game server.
  This will fail and the application will show a dialog to you which you may
  dismiss. The reason it fails is that we did not start a game server. At this
  point we have exercised the ChatTestClient enough to see some Flashlight
  results. Go ahead and close the ChatTestClient application window (on Windows use the red-X to the upper-right, or the
  equivalent functionality on your operating system) to terminate the
  program. After a few seconds, Flashlight will note that the instrumented ChatTestClient application has finished running and
  begin data preparation. Data preparation gets the collected run data ready for you to query. The
  <guilabel>Flashlight Launched Run Control</guilabel> dialog monitors the progress of data preparation as shown in
  <xref linkend="fig-tutorial-planetbaron-prep-chattestclient" />.</para>
  
    <figure id="fig-tutorial-planetbaron-prep-chattestclient">
    <title>Data preparation progress being monitored in the Flashlight Launched Run Control dialog</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-prep-chattestclient.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>When data preparation is completed the tool
  will prompt you to switch to the Flashlight perspective as shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-switch-dialog" />.</para>

  <figure id="fig-tutorial-planetbaron-perspective-switch-dialog">
    <title>Prompting the user to switch to the Flashlight perspective</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-switch-dialog.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Press <guibutton>Yes</guibutton> and the Flashlight perspective
  will appear as shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-empty" />. At this point you can dismiss the <guilabel>Flashlight Launched Run Control</guilabel> dialog or leave it up.
  The <guilabel>Flashlight Run Control</guilabel> dialog can be brought up at any time by selecting
  <menuchoice><guisubmenu>Flashlight</guisubmenu> <guimenuitem>Launched Run Control...</guimenuitem></menuchoice> from
  the Eclipse main menu.</para>

  <figure id="fig-tutorial-planetbaron-perspective-empty">
    <title>The Flashlight perspective</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-empty.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>The Flashlight perspective is used to manage and query data collected
  from instrumented programs. The <guilabel>Flashlight Runs</guilabel> view in
  the upper-left manages the instrumented runs of programs. This view allows you
  to prepare data to be queried, select a prepared run for querying, and delete
  runs from the disk.</para>
  
  <para>The <guilabel>Query Results</guilabel> view is showing an overview of our ChatTestClient run
      which is currently selected in the <guilabel>Flashlight Runs</guilabel> view.
      The overview lists good and bad
      news about the selected run. These news items are not definitive, because they represent
      information from a single run of the program&mdash;hence the name <emphasis>news</emphasis> instead of <emphasis>results</emphasis>.
      Some news items are underlined. These underlined news items may be selected with the mouse to invoke a query and show the
      news item's corresponding results. Some news items are not underlined because they indicate that no information was
      observed during the run&mdash;in these cases no results indicates something newsworthy. These items that are not
      underlined have no associated
      results.</para>
      
      <para>The "Bad News" reports a single item for this run. Let's examine this report to see if it is significant. Click on
      the underlined news item <emphasis>Fields read by the AWT Event Dispatch Thread were modified outside of it</emphasis>.
      You should see the <guilabel>Query Results</guilabel> view change to a result similar to the one shown in
      <xref linkend="fig-tutorial-planetbaron-outside-edt" />. Your result may be slightly different because the data
      reflects what occurred in your particular run of the program. For example, the counts under the <emphasis>Reads</emphasis>
      and <emphasis>Writes</emphasis> column may be different than what is shown in <xref linkend="fig-tutorial-planetbaron-outside-edt" />.</para>
      
  <figure id="fig-tutorial-planetbaron-outside-edt">
    <title>Mutable fields read by the AWT/Swing Event Dispatch Thread (EDT) and written in others</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-outside-edt.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Clicking on this news item ran the query <emphasis>What mutable fields are read by the
  AWT Event Dispatch Thread and written in others?</emphasis> This query also appeared in
  the <guilabel>Query Menu</guilabel> view. But, it doesn't show this view right now because the view
  is now showing sub-queries that can be run on the query result we just brought up.
  When at the top level, however, the <guilabel>Query Menu</guilabel> view for this run is shown in
  <xref linkend="fig-tutorial-planetbaron-outside-edt-menu" />. This top level menu is
  where all the news items about a run come from. If a query is empty it can result in a good news report or bad news report.
  The same goes for a query with results, however, if a news item has results then the tool allows the query to
  be run directly from the news item. That is how we ran the 
  <emphasis>What mutable fields are read by the
  AWT Event Dispatch Thread and written in others?</emphasis> query in this example.</para>
  
    <figure id="fig-tutorial-planetbaron-outside-edt-menu">
    <title>The API query where the "bad news" item originated in the Query Menu view</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-outside-edt-menu.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Let's return our attention to the <guilabel>Query Results</guilabel> view.
  Selecting fields in the query result causes these fields to be
  highlighted in two views at the bottom of the Flashlight perspective.  The
  view to the left is the normal Java editor and represents the current state of
  the source code. The view to the right is an <guilabel>Historical Source
  Snapshot</guilabel> view that shows you the code as it existed when the
  program was executed.  This view helps you to understand if the code has
  evolved since the run you are querying was made. To see this, click on the 
  row of the query result that lists information about the 
  <structfield>f_connectDisconnectButton</structfield> field. You will see the two code views
  change to the field's <structfield>f_connectDisconnectButton</structfield> declaration as shown in
  <xref linkend="fig-tutorial-planetbaron-perspective-ctc1" />. In this example the code is exactly the same,
  which is what we would expect because we just made the run and haven't made any changes since that time.</para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc1">
    <title>Fields accessed outside the Event Dispatch Thread in a ChatTestClient run</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc1.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Flashlight can do more than run a single query. It is designed to allow you to
  "drill-in" to understand the details about what occurred during a run.
  Select the <structfield>f_connectDisconnectButton</structfield> and
  right-click. This brings up a menu of queries that can be run on this
  result. In this case there is one as shown in <xref linkend="fig-tutorial-planetbaron-perspective-ctc1menu" />.</para>
  
    <figure id="fig-tutorial-planetbaron-perspective-ctc1menu">
    <title>Drill-in queries that can be run on the f_connectDisconnectButton field</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc1menu.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Select <emphasis>What instances contain this field when it is read by the AWT Event Dispatch Thread
  and written in others?</emphasis> You should see a table with a single entry, as in <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc7" />.  If any other
  ChatTestClient objects had been created and shared their
  <structfield>f_connectDisconnectButton</structfield> with more than one
  thread, we would see entries for them here as well.  Note that while our
  object is called <code>ChatTestClient-10</code>, the number after the dash may
  be different for you. In general, the suffix of an object will be different
  from run to run, as it is randomly assigned at runtime when the object is
  instantiated.
  </para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc7">
    <title>A ChatTestClient object containing the <structfield>f_connectDisconnectButton</structfield> field.</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc7.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Right click on the single row and select <emphasis>When and by what threads is
  this field accessed?</emphasis> The results should look something like <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc2" />.  In the case of
  <structfield>f_connectDisconnectButton</structfield> we see that the
  main thread and AWT-EventQueue-0, known as the event dispatch thread (EDT),
  shared this field. This result indicates, by the <emphasis>No</emphasis> in the <emphasis>Happens-Before</emphasis>
  column that the field is not safely passed from the first thread to the second.
  Flashlight can show whether or not a <emphasis>happens-before</emphasis> relationship exists between
  two threads in a run of an instrumented program. For example, whether a write of a volatile field in
  one thread and a subsequent read in a second thread created a happens-before edge between the two threads.
  These queries help the user better understand if the shared state in their Java program respects the
  details of the <emphasis>Java memory model</emphasis> &mdash; and is therefore able
  to obtain high performance with safety.</para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc2">
    <title>When and by what threads is the f_connectDisconnectButton field accessed?</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc2.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Before we continue our analysis of the problem with the shared <structfield>f_connectDisconnectButton</structfield>
  field let's learn to navigate query results in the user interface.
  Flashlight remembers all queries you run until you explicitly delete them. At this point
  you have run three queries&mdash;each a drill in of the previous. This structure can be
  seen to the upper-right of the Eclipse window in the <guilabel>Query Results Explorer</guilabel>
  view. That view should appear as shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc2a" />.</para>
  
  <figure id="fig-tutorial-planetbaron-perspective-ctc2a">
    <title>The Query Results Explorer shows queries that have been run and their structure</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc2a.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Each entry lists the name of the query executed. To the right of the name the number
  of rows returned is listed. If the query is a top-level query on a run then the name
  of the run and the time it was launched is listed so that query trees made on multiple
  runs can be distinguished. The tree structure of this view reflects if one query
  was a "drill-in" result from another.</para>
  
  <para>Click on the <emphasis>What instances contain this field when it is read by the AWT
  Event Dispatch Thread and written in others?</emphasis> result in the <guilabel>Query Results Explorer</guilabel>
  view. This causes the display of the <guilabel>Query Results</guilabel> view to change
  to show this queries results. You can click on any result in the <guilabel>Query Results Explorer</guilabel>
  view to see its results. In addition to directly clicking on a result you can use
  <guiicon><inlinegraphic fileref="images/left.gif"/></guiicon> and <guiicon><inlinegraphic fileref="images/right.gif"/></guiicon>
  icons in the toolbar of either the <guilabel>Query Results Explorer</guilabel>
  view or the <guilabel>Query Results</guilabel> view to "drill-back" or "drill-in" along
  a line of query results. Try this now.</para>
  
  <para>You can also start a new line of queries about a run by going back to the root
  query menu for a run. There are two ways to do this. The first is to click on the run
  in the <guilabel>Flashlight Runs</guilabel> view. The second is to click the
  <guiicon><inlinegraphic fileref="images/query_back.gif"/></guiicon> icon in the toolbar
  of the <guilabel>Query Menu</guilabel> view.</para>
  
  <para>To try this out let's run another root query. Select the ChatTestClient run with
  the mouse in the <guilabel>Flashlight Runs</guilabel> view. This will change the
  <guilabel>Query Menu</guilabel> view back to the top level. Find the query
  <emphasis>What fields (static) are shared?</emphasis> (under the Shared State category) and
  double-click on this query to run it. You should get a result similar to the one shown
  in <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc2b" />.</para>
  
  <figure id="fig-tutorial-planetbaron-perspective-ctc2b">
    <title>Running a second top-level query on ChatTestClient</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc2b.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Now we have two "lines of inquiry" about the ChatTestClient run. The
  query result about shared static state that a single static
  field tells us that only <structfield>LOG</structfield> was observed as being shared
  between two or more threads. We are now done with this line of
  inquiry about static state. To clear a single query result you press the
  <guiicon><inlinegraphic fileref="images/gray_x.png"/></guiicon>
  in the toolbar of either the <guilabel>Query Results Explorer</guilabel>
  view or the <guilabel>Query Results</guilabel> view.
  To clear out all query results you press the
  <guiicon><inlinegraphic fileref="images/gray_x_double.png"/></guiicon>
  in the toolbar of either the <guilabel>Query Results Explorer</guilabel>
  view or the <guilabel>Query Results</guilabel> view. But we only want to clear out a single
  result. So, now press the <guiicon><inlinegraphic fileref="images/gray_x.png"/></guiicon> toolbar button to delete
  the query result about the <structfield>LOG</structfield> field. Next,
  to get us back to our original line of inquiry select the <emphasis>When and by what
  threads was this field accessed?</emphasis> result in the <guilabel>Query Results Explorer</guilabel> view.</para>
  
  <para>We can get a better idea of when we are writing to
  <structfield>f_connectDisconnectButton</structfield> by drilling in and
  looking at each access that was made.  Right click on the main entry, and run
  <emphasis>Show every access of this field in this time range.</emphasis> The
  result of this query should look like <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc3" /> and will show you each
  read and write of the field that was observed by the instrumentation as the
  program executed. It shows the time at which the event occurred and the thread
  it happened within.</para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc3">
    <title>Looking at the accesses made to the f_connectDisconnectButton field</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc3.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Now, select the second access by the main thread and
  right-click. Drill-in again by selecting <emphasis>What is the stack trace for
  this access?</emphasis>.</para>
  
  <figure id="fig-tutorial-planetbaron-perspective-ctc8">
    <title>Drilling in to see the stack trace for this field access and a broken line of code</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc8.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>This will result in a stack trace for the selected access  as shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc8" />.  Selecting
  each row of the result will link to line of code in the ChatTestClient program. The bottom
  row is, in fact, a bug in the program. This line is shown in the figure above
  at line 52.</para>

  <para>What is wrong? To understand this problem we quote from Haase and Guy's
  <citetitle pubwork="book">Filthy Rich Clients</citetitle><biblioref
  linkend="HaaseGuy07"/>:</para>

  <blockquote><para>Swing's threading model is based on a single rule: The EDT 
  is responsible for executing any method that modifies a component's
  state. This includes any component's constructor.  According to this rule, and
  despite what you can read in many books and tutorials about Swing, the
  <function>main()</function> method in the previous code example is invalid and
  can cause deadlock.</para></blockquote>

  <para>The concurrency policy that Swing uses is called 'thread confinement.'
  A thread confinement policy doesn't use any sort of explicit locking, but
  instead demands that all modifications made to the library's internal state
  happen in the same thread.  Because Swing component constructors can and do
  make modifications to Swing's internal state, they must be created from the
  Swing Event Dispatch Thread (EDT).  To fix this problem we need to call the
  ChatTestClient constructor from the EDT. We can do this by changing the
  <function>main()</function> method to look like the code below.</para>

  <programlisting>
<![CDATA[
public static void main(String[] args) {
  // run the application
  SwingUtilities.invokeLater(new Runnable() {
    @Override
    public void run() {
      new ChatTestClient();
    }
  });
}
]]>
  </programlisting>

  <para>Save this change and launch ChatTestClient using the Flashlight launch
  shortcut again. Perform the same actions that you did during the first run:
  <orderedlist>
    <listitem>Try to connect.</listitem>
    <listitem>Dismiss the dialog.</listitem>
    <listitem>Exit.</listitem>
  </orderedlist>
  </para>

  <para>You can watch the progress of data preparation in the
  <guilabel>Flashlight Launched Run Control</guilabel> dialog. When data
  preparation is complete on the new ChatTestData run you can dismiss 
  the <guilabel>Flashlight Launched Run Control</guilabel> dialog.
  The new ChatTestClient run will appear in the <guilabel>Flashlight Runs</guilabel>
  view.</para>

  <para>Delete all our previous query results by clicking the
  <guiicon><inlinegraphic fileref="images/gray_x_double.png" /></guiicon> in
  either the <guilabel>Query Results Explorer</guilabel> view or the <guilabel>Query
  Results</guilabel> view. This action clears out previous queries we have done.</para>
  
  <para>Select the new ChatTestClient run in the <guilabel>Flashlight Runs</guilabel> and your workspace
  should look similar to the one shown in <xref linkend="fig-tutorial-planetbaron-perspective-ctc4" />.</para>
  
  <figure id="fig-tutorial-planetbaron-perspective-ctc4">
    <title>News about our new run of ChatTestClient</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc4.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Note that the bad news item is gone. This is a good sign that we have fixed the problem of
  keeping access to AWT/Swing object thread confined to the AWT Event Dispatch Thread. For
  ChatTestClient, this result indicates that
  no fields were observed being accessed in both the AWT Event Dispatch Thread
  and the main thread. This run provides some evidence that we have fixed the
  bug discovered in ChatTestClient. We carefully say <emphasis>some evidence</emphasis>, rather than proves, because
  a dynamic analysis tool does not investigate all possible executions of the ChatTestClient&mdash;it can
  only report on what it observed.</para>

  <para>Before we move on let's examine the old run in the <guilabel>Flashlight Runs</guilabel> view
  one final time.Select the first
  ChatTestClient run and double-click the <emphasis>What fields are read by the
  AWT Event Dispatch Thread and written in others?</emphasis> query. Select
  <structfield>f_connectDisconnectButton</structfield> and right-click to select
  the <emphasis>What instance contain this field when it is read by the AWT
  Event Dispatch Thread and written in others?</emphasis> query.
  Select the single ChatTestClient object instance, right-click, and run the <emphasis>When and by what threads was this
  field accessed?</emphasis> query. Next select the main thread row, right-click, and run
  the <emphasis>Show every access of this field in this time range.</emphasis> query.
  Select the second access by the main thread
  and right-click to select the <emphasis>What is the stack trace?</emphasis> query.
  By selecting the bottom row of the stack trace you
  can see that, while the Java editor code might prove confusing, because we
  changed the code, the <guilabel>Historical Source Snapshot</guilabel> view
  remembers what the code looked like in this previous run. This difference is
  shown in <xref linkend="fig-tutorial-planetbaron-perspective-ctc5" />.</para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc5">
    <title>The broken line of code in ChatTestClient is remembered by the Historical Source Snapshot view</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc5.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>We are finished with our examination of these runs, so let's delete
  them. First, clear out all the queries we ran by pressing the <guiicon><inlinegraphic
  fileref="images/gray_x_double.png" /></guiicon> icon in either the <guilabel>Query Results</guilabel> view or
  the <guilabel>Query Results Explorer</guilabel> view. Next, in the
  <guilabel>Flashlight Runs</guilabel> view select both runs and
  right-click to bring up the view's context menu. Select <guimenuitem>Delete</guimenuitem> from the context menu as
  shown in <xref linkend="fig-tutorial-planetbaron-perspective-ctc6" />.</para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc6">
    <title>Deleting two Flashlight runs</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc6.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>You will be prompted to ensure that you really want to delete this
  Flashlight run data. Press <guibutton>OK</guibutton>. After a short delay the
  <guilabel>Flashlight Runs</guilabel> view should be empty. It is important to
  delete old runs to ensure that you free up disk space on your computer. As you can see in the first
  column of the figure above, two short runs of ChatTestClient used roughly 23 MB of disk space.</para>

</section>
