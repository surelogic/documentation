<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<section id="sec-tutorial-dining">
  <title>Finding a potential deadlock in a Java implementation of the Dining Philosophers problem</title>
  
  <para>
    This tutorial explores Java implementation of the classic <ulink
    url="http://en.wikipedia.org/wiki/Dining_philosophers">Dining
    Philosophers</ulink> problem. 
    Five philosophers sit down at a table.  Five plates are laid out, one in
    front of each philosopher. Five forks are set down, one between each plate.
    A bowl of spaghetti sits in the middle. While dinner takes place, each
    philosopher alternates between states of thinking or eating.  They must
    acquire the two forks on either side of their plate to eat from the bowl of
    spaghetti, and after eating they relinquish their forks to think again. The
    philosophers never speak to each other.
  </para>
  
  <note>
	<title>Which project should I use for this project?</title>

		<para>Either of the two tutorial projects may be used: <guilabel>FlashlightTutorial_DiningPhilosophers</guilabel>
		or <guilabel>FlashlightTutorial_DiningPhilosophersJava8</guilabel>. The second requires Java 8.
		If you develop using Java 8 it is recommended that you use use the Java 8 project, if not
		the other project supports Java 6 or Java 7.</para>
  </note>
  
  <section>
  <title>Running the program</title>
  
  <para>To run the program select the <guilabel>DiningPhilosophers</guilabel> class and launch it. In the
  Eclipse console you should see the below prompt.</para>
  
  <programlisting>What strategy should the philosophers use to choose the order to pick up their forks?
1. Left fork followed by right fork (may deadlock)
2. Right fork followed by left fork  (may deadlock)
3. Randomly choose order each time (may deadlock)
4. Order all the forks on the table and have all philosophers pick them up in that order
Enter number your choice: 
  </programlisting>
  
  <para>The program lets you pick a strategy that all the philosophers use to pick up their forks.  All but
  the last may deadlock the program. As the dining takes place you see output about what the five
  philosophers are doing: thinking, picking up a fork, eating, putting down a fork. Each philosopher tries to
  eat 10 times during the meal.</para>
  
  <para>Except for the global order strategy (choice 4) the program may deadlock as shown below.
  In the example below picking up the left fork followed by the right fork led to deadlock.</para>
  
  	<imageobject>
		<imagedata fileref="images/tutorial-dining-terminate-program.png" />
	</imageobject>
	
	<para>If the output hangs and the program is still running&mdash;deadlock has occurred. Press the red
	terminate button on the console toolbar (highlighted in the screenshot above) to
	terminate the deadlocked run.</para>
	
	<para>Before we use Flashlight on this program let's sketch how it is implemented.</para>
  </section>
  
    <section>
  <title>The Java implementation</title>
  <para>
    The Java implementation represents each philosopher as a separate thread, and holding a fork
    is represented by holding a java.util.concurrent Lock instance. A philosopher must hold both
    nearby forks in order to eat.  While dining the philosopher eats ten times.
    Using two enums, the implementation defines five forks, the <guilabel>Fork</guilabel> enum,
    and five philosophers, the
    <guilabel>Philosopher</guilabel> enum. Two forks are assigned to each philosopher to serve as the
    fork on their left and right.  The first philosopher, Kant, Will have forks
    ONE and TWO, Diogenes will have TWO and THREE, and this goes on until we reach Russell,
    who has forks FIVE and ONE.
  </para>
  
  <para>The Fork enum is listed below. It defines the five forks: ONE, TWO, THREE, FOUR, and FIVE. A
  util.concurrent dynamic lock is used by the program to represent holding a lock, so the getLock() method
  provides access to the lock.  The isHolding() method is used by the program to check if the lock is
  held&mdash;in particular by several logging methods in the <guilabel>Philosopher</guilabel> enum
  that check that a particular fork of interest is held (or not held) using this method. The getGlobalOrder()
  method passes out the built-in enum ordinal value. This is used by the global order strategy to order fork
  pick-up across all philosophers (establishing a global order to lock acquisition is an effective deadlock avoidance technique).</para>
  
	<imageobject>
		<imagedata fileref="images/tutorial-dining-fork-impl.png" />
	</imageobject>
	
	<para>The Philosopher enum is listed below. It defines five philosophers: Kant, Diogenes, Descartes, Goethe,
	and Russell. The constructor orders the group around the table with regard to the five forks. The getLeft()
	and getRight() methods provide access to the forks near each philosopher. For example, to get the fork
	to the right of Descartes you would use <guilabel>Descartes.getRight()</guilabel>.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-philosopher-impl1.png" />
	</imageobject>
	
	<para>The Philosopher enum also has several methods that log what is being done and check the state of
	holding a fork is correct. These methods are listed below. These methods simply double-check
	fork state and log, they do not perform the actions. In particular they do not acquire the locks that
	indicated a philosopher is holding a particular fork.
	Doing this and running the simulation of philosopher dining is discussed below and is
	done by the <guilabel>PhilosopherStrategy</guilabel> type.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-philosopher-impl2.png" />
	</imageobject>
	
	<para>The <guilabel>PhilosopherStrategy</guilabel> type drives the simulation of the dining philosophers.
	This type is different depending upon if you are using the Java 8 version of the code or not. The
	Java 8 version is listed below. It uses an interface with default methods as well as a lambda (at line 47).
	The pre-Java 8 version of the code is similar enough that we don't list it. It simply uses
	an abstract class and replaces the lambda with an anonymous class.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-philosopher-strategy-impl1.png" />
	</imageobject>
	
	<para>The dine() method is how the main program starts the dining philosophers. It creates
	a separate thread of execution for each of the five philosophers and calls pickupBothForksAndEat
	ten times. A latch is used to have all the philosopher threads start the meal together.
	The chooseForkPickUpOrder is the method implemented by an actual strategy implementation.
	It returns a pair of forks. The first value is the fork that should be picked up (locked) first,
	the second value is the fork that should be picked up (locked) second.  The pickUpBothForksAndEat
	method is where it all happens. This key method is listed below.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-philosopher-strategy-impl2.png" />
	</imageobject>
	
	<para>The implementation of this method is unsurprising. It locks on the forks in the passed order
	and calls the various philosopher methods to log the state of the simulation as it proceeds.</para>
	
	<para>The <guilabel>PhilosopherStrategy</guilabel> type strips down the implementation of any
	strategy to simply defining what order the forks are picked up. The type hierarchy of concrete
	strategy implementations is	shown below.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-strategy-type-hierarchy.png" />
	</imageobject>
	
	<para>These map directly to the four choices the program gives you when it starts. The
	<guilabel>LeftThenRight</guilabel> class is listed below. It simply constructs a new
	pair (to define the pickup order) with the left fork first and the right fork second.</para>

	<imageobject>
		<imagedata fileref="images/tutorial-dining-left-then-right.png" />
	</imageobject>
	
	<para>We don't list the <guilabel>RightThenLeft</guilabel> class because its implementation is exactly like the one listed above
	with one rather obvious change.  The <guilabel>RandomOrder</guilabel> class is slightly more interesting and is listed below.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-random-order.png" />
	</imageobject>
	
	<para>The above implementation flips a coin to decide if it should return an
	order of left then right or an order of right then left. This might seem like a way to avoid deadlock,
	but it turns out it doesn't work and we will investigate its behavior with Flashlight below. A way to avoid
	deadlock is to define a global order on all the forks and have each philosopher respect that order. That
	is what the <guilabel>GlobalOrder</guilabel> strategy does and it is listed below.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-global-order.png" />
	</imageobject>	
	
	<para>This implementation uses the ordinal on each Fork to have the philosopher pick up (locks)
	the fork with the lower value first. This strategy will not deadlock.</para>

  </section>
  
  <para>
    Let's go ahead and run this and see what we get.  Right click on the
    <classname>DiningPhilosophers</classname> class in the <guilabel>Package
    Explorer</guilabel> and choose <menuchoice><guisubmenu>Flashlight
    As</guisubmenu>
    <guimenuitem>Java Application</guimenuitem></menuchoice>.  The output of the
    program in the <guilabel>Console</guilabel> should appear as shown below.
    After thirty seconds the program will terminate and Flashlight will prep the
    run. If you don't want to wait thirty seconds you can press the
    <guilabel>Stop</guilabel> button in the console once you see the output below.
  </para>
  <programlisting>
<![CDATA[
Kant is thinking.
Descartes is thinking.
Diogenes is thinking.
Goethe is thinking.
Russell is thinking.
Diogenes picks up the left fork.
Descartes picks up the left fork.
Goethe picks up the left fork.
Russell picks up the left fork.
Kant picks up the left fork.
]]>
  </programlisting>

  <para>
    Your run may be different, however, the output above doesn't look good.  It appears that every philosopher picked up the
    fork on their left, then tried to get the fork on their left&mdash;resulting in
    a deadlock.  Thus, no one was able to eat!  Now that the run has
    terminated, Flashlight will prepare it for inspection and we can see what
    went wrong.  Switch to the Flashlight perspective now if you have not been
    prompted to do so already, and select the
    <classname>DiningPhilosophers</classname> run in the <guilabel>Flashlight
    Runs</guilabel> view.  You should see one article of bad news in the
    <guilabel>Query Results</guilabel> view.
  </para>

  <figure id="fig-tutorial-dining-news">
    <title>Bad News in DiningPhilosophers</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-dining-news.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>
    Go ahead and click on the <emphasis>Lock cycles were observed that could
    cause the program to deadlock</emphasis> link.  You should see one lock cycle displayed, as shown in  <xref
    linkend="fig-tutorial-dining-what-lock-cycles" />. As expected the cycle involves five locks&mdash;one for each fork.</para>
    

  <figure id="fig-tutorial-dining-what-lock-cycles">
    <title>What lock cycles could potentially cause deadlock?</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-dining-what-lock-cycles.png" />
      </imageobject>
    </mediaobject>
  </figure>
    
    <para>Double click on this entry and a lock graph will be
    displayed that should look something like <xref linkend="fig-tutorial-dining-what-are-the-edges"/>.  Every node in this
    graph is a lock in the program.  In this case that means the five
    <classname>Fork</classname> objects that we created.  Each edge represents a
    time in the program that we held the lock at the source of the edge and
    tried to acquire the lock at the edge's destination. You can manipulate the graph by clicking and dragging nodes
  if the layout is cluttered. You can also move the whole graph by clicking and dragging on the background
   of the graph.
  </para>


  <figure id="fig-tutorial-dining-what-are-the-edges">
    <title>What are the edges for this lock cycle?</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-dining-what-are-the-edges.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>
    From the graph it is clear what happened.  Each philosopher attempted to
    acquire the lock on their left, and then tried to acquire a lock that was
    already held by someone else by the person on their right.  So Kant needed
    the lock held by Diogenes, who needed the lock held by Descartes, and on to
    Goethe, then Russell, who closed the loop by needing the lock held by Kant.
  </para>

  <para>
    Now that we have seen that <classname>LeftThenRightPhilosopher</classname>
    leads to deadlock, we can try to fix this by using a different
    implementation.  The typical first approach to fixing a deadlock scenario is
    to choose a global ordering of all locks in the program, and then
    <emphasis>always</emphasis> acquire locks in that order.  Recall that each
    <classname>Fork</classname> object was given an ordinal value.  We're going
    to take advantage of that fact to construct a philosopher that always
    acquires the lowest numbered lock first.
    <classname>OrderedPhilosopher</classname>, displayed below, does just that.
  </para>

  <programlisting>
<![CDATA[
/**
 * This philosopher uses the lock acquisition order stored in its forks to
 * grab the forks in a consistent "global" fork order.
 * <p>
 * This philosopher implementation will not deadlock.
 */
static class OrderedPhilosopher implements Runnable {
  private final String name;
  private final Fork left;
  private final Fork right;

  OrderedPhilosopher(String name, Fork left, Fork right) {
    this.name = name;
    this.left = left;
    this.right = right;
  }

  @Override
  public void run() {
    while (true) {
      try {
        boolean leftFirst = left.getLockAcquisitionOrder() < right.getLockAcquisitionOrder();
        System.out.printf("%s is thinking.\n", name);
        Thread.sleep(ONE_SECOND);
        Fork first = leftFirst ? left : right;
        first.lock();
        try {
          System.out.printf("%s picks up the %s fork.\n", name, leftFirst ? "left" : "right");
          Thread.sleep(ONE_SECOND);
          Fork second = leftFirst ? right : left;
          second.lock();
          try {
            System.out.printf("%s picks up the %s fork.\n", name, leftFirst ? "right" : "left");
            Thread.sleep(ONE_SECOND);
            System.out.printf("%s is eating.\n", name);
            Thread.sleep(ONE_SECOND);
          } finally {
            second.unlock();
          }
        } finally {
          first.unlock();
        }
      } catch (InterruptedException ignore) {
      }
    }
  }
}
]]>
  </programlisting>

  <para>
    Change line 34 within the main method of DiningPhilosophers to use the OrderedPhilosopher
    implementation as shown below.
  </para>

<programlisting>34: new Thread(new <emphasis role="strong">OrderedPhilosopher</emphasis>(name, forks[left], forks[right]), name).start();</programlisting>

  <para>
    Now go ahead and run the program again by right clicking on <classname>DiningPhilosophers</classname> in the <guilabel>Package
    Explorer</guilabel> and choosing <menuchoice><guisubmenu>Flashlight As</guisubmenu>
    <guimenuitem>Java Application</guimenuitem></menuchoice>.  You should see
    quite a bit more output from the program this time.  Your run will be different, but will probably look something like this:
  </para>

  <programlisting>
<![CDATA[
Kant is thinking.
Russell is thinking.
Goethe is thinking.
Descartes is thinking.
Diogenes is thinking.
Russell picks up the right fork.
Diogenes picks up the left fork.
Goethe picks up the left fork.
Descartes picks up the left fork.
Russell picks up the left fork.
Russell is eating.
Russell is thinking.
Kant picks up the left fork.
Goethe picks up the right fork.
Goethe is eating.
Goethe is thinking.
Descartes picks up the right fork.
Descartes is eating.
Descartes is thinking.
Diogenes picks up the right fork.
...
]]>
  </programlisting>

  <para>
    Once the run has completed and prepped, we can see in the overview that the
    program no longer has any potential for deadlock.
  </para>
  <figure id="fig-tutorial-dining-no-news">
    <title>OrderedPhilosopher does not cause deadlock</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-dining-no-news.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>
    This completes the tutorial.
  </para>


</section>

