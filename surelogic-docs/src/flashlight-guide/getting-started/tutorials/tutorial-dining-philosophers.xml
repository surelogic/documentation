<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<section id="sec-tutorial-dining">
  <title>Finding a potential deadlock in a Java implementation of the Dining Philosophers problem</title>
  
  <para>
    This tutorial explores Java implementation of the classic <ulink
    url="http://en.wikipedia.org/wiki/Dining_philosophers">Dining
    Philosophers</ulink> problem. 
    Five philosophers sit down at a table.  Five plates are laid out, one in
    front of each philosopher. Five forks are set down, one between each plate.
    A bowl of spaghetti sits in the middle. While dinner takes place, each
    philosopher alternates between states of thinking or eating.  They must
    acquire the two forks on either side of their plate to eat from the bowl of
    spaghetti, and after eating they relinquish their forks to think again. The
    philosophers never speak to each other.
  </para>
  
  <note>
	<title>Which project should I use for this project?</title>

		<para>Either of the two tutorial projects may be used: <guilabel>FlashlightTutorial_DiningPhilosophers</guilabel>
		or <guilabel>FlashlightTutorial_DiningPhilosophersJava8</guilabel>. The second requires Java 8.
		If you develop using Java 8 it is recommended that you use use the Java 8 project, if not
		the other project supports Java 6 or Java 7.</para>
  </note>
  
  <section>
  <title>Running the program</title>
  
  <para>To run the program select the <guilabel>DiningPhilosophers</guilabel> class and launch it. In the
  Eclipse console you should see the below prompt.</para>
  
  <programlisting>What strategy should the philosophers use to choose the order to pick up their forks?
1. Left fork followed by right fork (may deadlock)
2. Right fork followed by left fork  (may deadlock)
3. Randomly choose order each time (may deadlock)
4. Order all the forks on the table and have all philosophers pick them up in that order
Enter number your choice: 
  </programlisting>
  
  <para>The program lets you pick a strategy that all the philosophers use to pick up their forks.  All but
  the last may deadlock the program. As the dining takes place you see output about what the five
  philosophers are doing: thinking, picking up a fork, eating, putting down a fork. Each philosopher tries to
  eat 10 times during the meal.</para>
  
  <para>Except for the global order strategy, which is choice 4, the program may deadlock.
  We say <emphasis>may</emphasis> because you might be able to run the examples several times successfully
  before you encounter a hang. The unpredictable nature of the program failure makes deadlock difficult
  to test for, and tricky to diagnose. It all too often occurs at bad times&mdash;such as in production.
  Flashlight can help because, as we shall see a bit later in this tutorial,
  it detects lock ordering which may lead to deadlock, but does not require
  the deadlock to occur.
  In the example screenshot below picking up the left fork followed
  by the right fork led to deadlock&mdash;we'll have to manually terminate the program.</para>
  
  	<imageobject>
		<imagedata fileref="images/tutorial-dining-terminate-program.png" />
	</imageobject>
	
	<para>To summarize, if when you are running the program and the output hangs but the program is still running&mdash;deadlock has occurred. Press the red
	terminate button on the console toolbar (highlighted in the screenshot above) to
	terminate the deadlocked run. If the program completes successfully you will see a final log message as shown below.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-program-finished.png" />
	</imageobject>
	
	<para>Before we use Flashlight on this program let's sketch how it is implemented.</para>
  </section>
  
    <section>
  <title>The Java implementation</title>
  <para>
    The Java implementation represents each philosopher as a separate thread, and picking up and holding a fork
    is represented by holding a java.util.concurrent Lock instance. A philosopher must hold both
    nearby forks in order to eat.  While dining the philosopher eats ten times.
    Using two enums, the implementation defines five forks, the <guilabel>Fork</guilabel> enum,
    and five philosophers, the
    <guilabel>Philosopher</guilabel> enum. Two forks are assigned to each philosopher to serve as the
    fork on their left and right.  The first philosopher, Kant, Will have forks
    ONE and TWO, Diogenes will have TWO and THREE, and this goes on until we reach Russell,
    who has forks FIVE and ONE.
  </para>
  
  <para>The <guilabel>Fork</guilabel> enum is listed below. It defines the five forks: ONE, TWO, THREE, FOUR, and FIVE. A
  util.concurrent dynamic lock is used by the program to represent holding a lock, so the getLock() method
  provides access to the lock.  The isHolding() method is used by the program to check if the lock is
  held&mdash;in particular by several logging methods in the <guilabel>Philosopher</guilabel> enum
  that check that a particular fork of interest is held (or not held) using this method. The getGlobalOrder()
  method passes out the built-in enum ordinal value. This is used by the global order strategy to order fork
  pick-up across all philosophers (establishing a global order to lock acquisition is an effective deadlock avoidance technique).</para>
  
	<imageobject>
		<imagedata fileref="images/tutorial-dining-fork-impl.png" />
	</imageobject>
	
	<para>The <guilabel>Philosopher</guilabel> enum is listed below. It defines five philosophers: Kant, Diogenes, Descartes, Goethe,
	and Russell. The constructor orders the group around the table with regard to the five forks. The getLeft()
	and getRight() methods provide access to the forks near each philosopher. For example, to get the fork
	to the right of Descartes you would use <guilabel>Descartes.getRight()</guilabel>.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-philosopher-impl1.png" />
	</imageobject>
	
	<para>The Philosopher enum also has several methods that log what is being done and check the state of
	holding a fork is correct. These methods are listed below. These methods simply double-check
	fork state and log, they do not perform the actions. In particular they do not acquire the locks that
	indicated a philosopher is holding a particular fork.
	Doing this and running the simulation of philosopher dining is discussed below and is
	done by the <guilabel>PhilosopherStrategy</guilabel> type.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-philosopher-impl2.png" />
	</imageobject>
	
	<para>The <guilabel>PhilosopherStrategy</guilabel> type drives the simulation of the dining philosophers.
	This type is different depending upon if you are using the Java 8 version of the code or not. The
	Java 8 version is listed below. It uses an interface with default methods as well as a lambda (at line 47).
	The pre-Java 8 version of the code is so similar that we don't list it. That version uses
	an abstract class and replaces the lambda with an anonymous class.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-philosopher-strategy-impl1.png" />
	</imageobject>
	
	<para>The dine() method is how the main program starts the dining philosophers. It creates
	a separate thread of execution for each of the five philosophers and calls pickupBothForksAndEat
	ten times. A latch is used to have all the philosopher threads start the meal together.
	The chooseForkPickUpOrder is the method implemented by an actual strategy implementation.
	It returns a pair of forks. The first value is the fork that should be picked up (locked) first,
	the second value is the fork that should be picked up (locked) second.  The pickUpBothForksAndEat
	method is where it all happens. This key method is listed below.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-philosopher-strategy-impl2.png" />
	</imageobject>
	
	<para>The implementation of this method is unsurprising. It locks on the forks in the passed order
	and calls the various philosopher methods to log the state of the simulation as it proceeds.</para>
	
	<para>The <guilabel>PhilosopherStrategy</guilabel> type strips down the implementation of any
	strategy to simply defining what order the forks are picked up. The type hierarchy of concrete
	strategy implementations is	shown below.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-strategy-type-hierarchy.png" />
	</imageobject>
	
	<para>These map directly to the four choices the program gives you when it starts. The
	<guilabel>LeftThenRight</guilabel> class is listed below. It simply constructs a new
	pair (to define the pickup order) with the left fork first and the right fork second.</para>

	<imageobject>
		<imagedata fileref="images/tutorial-dining-left-then-right.png" />
	</imageobject>
	
	<para>We don't list the <guilabel>RightThenLeft</guilabel> class because its implementation is exactly like the one listed above
	with one rather obvious change.  The <guilabel>RandomOrder</guilabel> class is
	more interesting and is listed below.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-random-order.png" />
	</imageobject>
	
	<para>The above implementation flips a coin to decide if it should return an
	order of left then right or an order of right then left. This might seem like a way to avoid deadlock,
	but it turns out it doesn't work and we will investigate its behavior with Flashlight below. A way to avoid
	deadlock is to define a global order on all the forks and have each philosopher respect that order. That
	is what the <guilabel>GlobalOrder</guilabel> strategy does and it is listed below.</para>
	
	<imageobject>
		<imagedata fileref="images/tutorial-dining-global-order.png" />
	</imageobject>	
	
	<para>This implementation uses the ordinal on each Fork to have the philosopher pick up (lock)
	the fork with the lower value first. This strategy will not deadlock.</para>
  </section>
  
  <section>
  <title>Using Flashlight to uncover the potential for deadlock</title>
  
  <para>
    Let's go ahead and make a run with Flashlight and see how it can help us
    detect that a program may deadlock.  Right click on the
    <classname>DiningPhilosophers</classname> class in the <guilabel>Package
    Explorer</guilabel> and choose <menuchoice><guisubmenu>Flashlight
    As</guisubmenu>
    <guimenuitem>Java Application</guimenuitem></menuchoice>. Alternatively, you can use the Flashlight
    launch icon in the Eclipse toolbar as shown below. Either approach will get the run started.
    </para>
    
      <imageobject>
        <imagedata fileref="images/tutorial-dining-launch.png" />
      </imageobject>
    
    <para>When the program runs go to the <guilabel>Console</guilabel> view and
    choose choice 3, <emphasis>Randomly choose order each time (may deadlock)</emphasis>, for
    the run strategy. See if the program completes or deadlocks. If it completes Flashlight should automatically begin to prepare the data.
    If it hangs press the <guilabel>Terminate</guilabel> button to kill the run and, within a few seconds,
    Flashlight should detect the program was terminated and begin to prepare the data.
  </para>
  <para>
    The run used to create the description below completed, however, your run may be
    different. Switch to the Flashlight perspective now if you have not been
    prompted to do so already, and select the
    <classname>DiningPhilosophers</classname> run in the <guilabel>Flashlight
    Runs</guilabel> view if it is not selected.  You should see some bad news in the
    <guilabel>Query Results</guilabel> view.
  </para>

      <imageobject>
        <imagedata fileref="images/tutorial-dining-news.png" />
      </imageobject>

	<para>
		Go ahead and click on the
		<emphasis>Lock cycles were observed that could
			cause the program to deadlock</emphasis>
		link. You should see two lock cycles displayed, as shown below. It is
		possible, but unlikely, that you may only get one&ndash;recall we selected random order as our strategy which results
		in a cycle going one way around the table and another going the other way around the table.
	</para>


	<imageobject>
		<imagedata fileref="images/tutorial-dining-what-lock-cycles.png" />
	</imageobject>

	<para>
		What is going on? The program didn't deadlock? Let's drill in to the
		first cycle by selecting that row
		in the
		<guilabel>Query Results</guilabel>
		view and selecting
		<emphasis>What are the edges for this lock cycle?</emphasis>
		from the context menu.
	</para>
    

      <imageobject>
        <imagedata fileref="images/tutorial-dining-what-lock-cycles-drill-in.png" />
      </imageobject>
    
    <para>A lock acquisition order graph will be
    displayed that should look something like the screenshot below.</para>
    
      <imageobject>
        <imagedata fileref="images/tutorial-dining-what-are-the-edges.png" />
      </imageobject>

	<para>
		Each node in the
		graph is a lock observed at runtime being acquired by a thread of the
		program. In this case that means the five
		<guilabel>ReentrantLock</guilabel>
		objects that we created to be within the
		<guilabel>Fork</guilabel>
		objects. Each edge represents a
		time in the program that we held the lock at the source of the edge and
		tried to acquire the lock at the edge's destination. You can
		manipulate the graph by clicking and dragging nodes
		if the layout is cluttered. You can also move the whole graph by
		clicking and dragging on the background
		of the graph.
	</para>

	<para>The tabular part to the right of the graph helps you to understand what threads actually performed the
	acquisitions of more than one lock and when. This
	can help diagnose if the cycle could have actually deadlocked. In this case it clearly could have. The occurrence
	counts in the Threads column are a bit confusing&mdash;this run completed wouldn't we expect the occurrences
	to add to ten?  Ten being the number of times each philosopher ate during the meal holding two forks (locks). However this is only one direction, and
	we selected the random strategy. Go back and bring up the lock cycle graph for the second cycle. It
	should look something like the screenshot below.</para>

      <imageobject>
        <imagedata fileref="images/tutorial-dining-what-are-the-edges-reverse.png" />
      </imageobject>
      
      <para>Notice that if you add up the counts in the Threads columns for both lock cycles
      they do sum to ten&mdash;the
      number of times each philosopher ate during the meal. If you examine the graph
      the cycle is similar but goes in the other direction.  This is a result of the random order strategy, which
      doesn't really work to avoid deadlock.  The program could have deadlocked in either
      direction (perhaps your run did!).</para>
      

      
      <para>Flashlight tries to ensure there is always a path from a result to the
      code. To show this for this example select the first entry in the table,
      <emphasis>ReentrantLock-28 -> ReentrantLock-19</emphasis> in
      thread <emphasis>Russell</emphasis>), and from the context menu
      select the query <emphasis>Where and in what threads does this lock edge occur?</emphasis>
      as shown below.</para>
      
      <imageobject>
        <imagedata fileref="images/tutorial-dining-drill-in-1.png" />
      </imageobject>
      
      <para>The result of this query shows where in the code the edge occurs, to be precise, it shows
      where the lock was acquired that is pointed to
      by the directed edge in the graph while already holding the lock the directed edge emerged from. If you select the deepest entry the code
      jumps to the correct line number. Recall the <guilabel>Historical Source Snapshot</guilabel>
      shows what the code looked like when the run was made. It can help you avoid
      confusion if the code has changed since the run was made.</para>
      
      <imageobject>
        <imagedata fileref="images/tutorial-dining-drill-in-2.png" />
      </imageobject>
      
      <para>If we want to understand how the program got to this state use the context menu
      to display the stack trace.  Choose <emphasis>What is the stack trace?</emphasis>
      as shown in the image below.</para>
      
      <imageobject>
        <imagedata fileref="images/tutorial-dining-drill-in-3.png" />
      </imageobject>
      
      <para>This brings up the stack trace leading up to the edge. The lock trace query shows
      you the order locks were acquired up to the edge, which is also interesting in some cases. However,
      in this case we can see the dual lock acquisition right in the method where the edge occurs.</para>
      
      <para>The image below shows the Java 8 trace which begins in a lambda expression passed
      to a new thread. 
      If you are running the Java 6 version
      will show a nested class that was passed to a new thread. In more complex
      code being able to get to the stack and lock
      traces can be invaluable to understand how a potential deadlock might occur&mdash;and
      help you to understand how to repair the problem.</para>
      
     <imageobject>
        <imagedata fileref="images/tutorial-dining-drill-in-4.png" />
      </imageobject>
      
      <para>This example illustrates how Flashlight tracks and reports on lock ordering and can help you understand,
      and eliminate, the potential for your system to deadlock&mdash;without having to produce a
      run that does deadlock.</para>
      
      <para>Flashlight has another, albeit less precise, query to help uncover lock ordering issues. If you
      clear out your chain of queries you will see a <emphasis>Where does a thread hold a lock and acquire another?</emphasis>
      This is a good query to uncover all the places where two or more locks were acquired in your code&mdash;even
      if no lock cycles were observed.</para>
      
     <imageobject>
        <imagedata fileref="images/tutorial-dining-where-does-1.png" />
     </imageobject>
     
     <para>Go ahead and run this query. The result you obtain should be similar to the image below.</para>
     
     <imageobject>
        <imagedata fileref="images/tutorial-dining-where-does-2.png" />
     </imageobject>
     
     <para>Notice that the point where the second lock is acquired by a philosopher thread is the location
     reported as
     the result of this query. This query does not mandate that a lock cycle be observed. It simply
     finds all places a lock was acquired while holding one or more other locks. It can be useful
     to audit that all multiple lock acquisitions are intended&mdash;not accidental.</para>
  </section>
  

  <section>
  <title>Using Flashlight to "check" the global lock order implementation</title>
  <para>
    We stated earlier that the global lock order approach was deadlock-free. We can check this, to a
    degree, with Flashlight.  Run the program again and choose choice 4. When it completes and is prepared
    you will see a news result similar to the one shown below.
  </para>
  
   <imageobject>
        <imagedata fileref="images/tutorial-dining-global-order-news.png" />
   </imageobject>
   
   <para>The "good news" report, <emphasis>No lock cycles were observed that could cause the program to deadlock</emphasis>
   is a good sign that the approach works. However, Flashlight cannot prove anything about all possible runs of
   the program&mdash;it can only provide positive evidence about what it observes. This, however, is useful
   to gain confidence in the concurrency and locking policies of complex software system.</para>
  
   <para>Finally, go ahead and run the <emphasis>Where does a thread hold a lock and acquire another?</emphasis>
   from the <guilabel>Query Menu</guilabel> for this run. Notice that you obtain the same result we did for
   the previous run. This is because, as we discussed above, this query doesn't consider lock cycles.</para>

  <para>
    This completes the dining philosophers tutorial.
  </para>

  </section>


</section>

