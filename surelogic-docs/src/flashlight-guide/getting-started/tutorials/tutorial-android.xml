<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<section id="sec-tutorial-android" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Finding a race condition in an Android application (Android only)</title>

  <para>The following tutorial is intended to get you up and running with
  Android.  You can try this on your Android phone or tablet if you have one.
  If you don't, you can still do this tutorial using the emulator provided by
  Google's Android Development Tools (ADT) &mdash; See Android's documentation
  on <link
  xlink:href="http://developer.android.com/tools/devices/index.html">Managing
  Virtual Devices</link> if you need to setup an emulator.  If you do not have
  the Android SDK and ADT installed, you should do so at this time by following
  the instructions <link
  xlink:href="http://developer.android.com/sdk/installing.html">here</link>. The
  tutorial project references the Android 2.3.3 libraries, so you may need to
  install them (or if you are an advanced Android developer, modify the
  project's <filename>AndroidManifest.xml</filename>).</para>
  
  	<note>
		<title>This tutorial assumes you are an experienced Android developer</title>

		<para>This tutorial is not intended to teach Android development. It assumes you have
		some experience developing software for an Android device. In particular, it
		focuses on Flashlight use within the ADT and doesn't explain in any detail
		how the code in the tutorial
		project interacts with the Android device and its operating system.</para>
	</note>
  
  <para>After you have installed ADT in Eclipse, go ahead and add the tutorial
  project, called <application>FlashlightTutorial_CounterRace</application>, to
  your workspace.  To do this choose
  <menuchoice><guimenu>Flashlight</guimenu><guimenuitem>Run Flashlight
  Tutorials</guimenuitem></menuchoice> from the Eclipse main menu.  In the
  dialog that opens, ensure that
  <application>FlashlightTutorial_CounterRace</application> is checked and click
  OK. This will install the project into your workspace.</para>
  
  <para><application>Counter Race</application> is a simple program we developed
  to demonstrate that, despite being less powerful than today's generation of
  desktop processors, concurrency remains an issue that must be dealt with
  correctly on Android devices.  <application>Counter Race</application>
  demonstrates this by running several threads, all of which increment two
  shared counters.  The first counter is a static field that is incremented
  without any protection from locking or the volatile keyword.  The second
  counter is implemented as a collection of thread-local counters.  When the
  user checks a box, several threads are spawned.  Each thread increments both
  the static counter and its own thread-local counter.  Once the box is
  unchecked and the threads finish, the values of the thread-local counters are
  safely added up and presented as the total count.  This count is compared to
  the value of the static counter and the results are displayed to the user.</para>
  
  <para>Now let's run the <application>Counter Race</application> using with Flashlight.
  Right-click on the <application>FlashlightTutorial_CounterRace</application> project
  in the <guilabel>Package Explorer</guilabel> and choose <menuchoice><guimenu>Flashlight
  As</guimenu><guimenuitem>Android
  Application</guimenuitem></menuchoice>. This is shown in the image below.</para>

  <figure id="fig-tutorial-android-launch">
    <title>Launching Counter Race</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-launch.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>If you are using an emulator, the emulator will take a while to start
  up.  Once <application>Counter Race</application> has been deployed on the
  phone, the application should launch automatically.  You should see a screen
  on the phone similar to the image below.</para>
  <figure id="fig-tutorial-android-phone-1">
    <title>The Counter Race application</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-phone-1.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>To start the threads, tap the checkbox once.  After allowing it to run
  for a few seconds, you can tap the checkbox again to see the results.  Your
  results should look similar to the image below.</para>

  <figure id="fig-tutorial-android-phone-2">
    <title>Tap the checkbox to start and stop the counters</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-phone-2.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Once you have exercised the program, you can go ahead and stop it in
  order to look at your data.  Pressing the <guilabel>Home</guilabel> or
  <guilabel>Back</guilabel> buttons on your phone will close the
  <application>Counter Race</application> application, but most devices will
  keep the process running in the background.  In order to stop the
  instrumentation so that we can collect our data, we do this using the
  <guilabel>Flashlight Launched Run Control</guilabel> dialog.</para>
  
    <note>
		<title>Do not terminate the tutorial application too quickly</title>

		<para>The data collection infrastructure flushes data off the Android device
		roughly every three seconds. Therefore, it is a good idea to let the application
		sit for several seconds before you close it on the phone and then terminate it.
		Note that if <code>f_threadLocalCounts</code> does not appear as described below
		you may have terminated the application too quickly. Try running it again.</para>
	</note>
  
  <para>Open or switch to the <guilabel>Flashlight Launched Run Control</guilabel> dialog. This will not
    stop the application on the Android device or emulator but will stop data collection
    and prepared the data for querying.  Stop data collection by pressing the
    <inlinegraphic fileref="images/red_x.gif"/> to the far right of
    <application>FlashlightTutorial_CounterRace</application> row in the dialog.</para>
    
      <figure id="fig-android-run-control">
        <title>Terminating data collection for FlashlightTutorial_CounterRace using the Flashlight Launched Run Control dialog</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/android-launched-run-control.png"/></imageobject>
        </mediaobject>
      </figure>

  <para>Once you terminate the process, back in Eclipse, the data will start being prepared for querying.
  The <guilabel>Flashlight Launched Run Control</guilabel> dialog will show you the progress made.</para>
  
  <para>If you are not in the Flashlight perspective, when the prepare job completes a dialog will ask you if you want to move to
  the Flashlight perspective to query your data. Select <guilabel>Yes</guilabel> to move to the Flashlight perspective.</para>
  
  <para>After the data preparation completes you should see the Run Overview for
  the run of Counter Race, as shown in <xref
  linkend="fig-tutorial-android-raceconditions" />.  There are three articles of
  bad news: <emphasis>Shared fields have no common lock held for each
  access</emphasis>, <emphasis>Shared static fields have no common lock held for
  each access</emphasis>, and <emphasis>Shared static fields have writes that do
  not happen-before subsequent reads</emphasis>.  If you don't see all three of
  these items of bad news, it is likely that you did not uncheck the checkbox on
  your smartphone when you were running the
  <application>CounterRace</application> application.  If that is the case, you
  will want to perform another run of the <application>CounterRace</application>
  with Flashlight, this time making sure to both check and uncheck the checkbox.
  </para>

  <figure id="fig-tutorial-android-raceconditions">
    <title>Potential Race Conditions in Counter Race</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-raceconditions.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para> We'll look at the potential problems with static fields first, so go
  ahead and click on <emphasis>Shared static fields have no common lock held for
  each access</emphasis>, which brings up the results of <emphasis>What fields
  (static) have an empty lock set?</emphasis> The query indicates that
  <structfield>f_sharedCounter</structfield> has an empty lock set.  Click on
  <structfield>f_sharedCounter</structfield> in the view. This opens the code to
  the declaration of the field.  We can see from the code that
  <structfield>f_sharedCounter</structfield> is a static, non-volatile field in
  the <classname>CounterThread</classname> class.  We can look to see if
  <structfield>f_sharedCounter</structfield> was <emphasis>supposed</emphasis>
  to be protected by a lock of some sort, by running <emphasis>How often
  is a lock held when this static field is accessed?</emphasis> The results
  indicate that no locks were ever held when
  <structfield>f_sharedCounter</structfield> was accessed, though, so it is
  unlikely that the field was supposed to be protected by some sort of locking
  strategy.
  </para>

  <figure id="fig-tutorial-android-sharedcounter-1">
    <title>Looking at f_sharedCounter</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-sharedcounter-1.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <figure id="fig-tutorial-android-sharedcounter-1">
    <title>No locks acquired when f_sharedCounter was accessed</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-sharedcounter-3.png" />
      </imageobject>
    </mediaobject>
  </figure>



  <para>Since there were no locks held when
  <structfield>f_sharedcounter</structfield> was accessed, let's examine the
  <structfield>f_sharedCounter</structfield> field to determine how it is shared
  by threads in the program.  Reselect the <emphasis>What fields (static) have
  an empty lock set?</emphasis> query in the <guilabel>Query Results
  Explorer</guilabel>, then run <emphasis>What threads read and write this
  static field?</emphasis> The results should resemble the image below.</para>

  <figure id="fig-tutorial-android-sharedcounter-2">
    <title>What threads read and write f_sharedCounter?</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-sharedcounter-2.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>We can see from the query results that
  <structfield>f_sharedCounter</structfield> is indeed read from and written to
  by multiple threads.  From this and our knowledge of the program, we can
  conclude that there is a race condition on
  <structfield>f_sharedCounter</structfield>.  The detected race condition on
  <structfield>f_sharedCounter</structfield> was expected&mdash;it was
  engineered into the tutorial.</para>
  
  <para>What about the other potential race condition, which was indicated in
  the Overview by the <emphasis>Shared fields have no common lock held for each
  access</emphasis> under <guilabel>Bad News</guilabel>? Get ready to start a
  new line of inquiry by clearing out our previous query results. To do this
  press the <guiicon><inlinegraphic fileref="images/gray_x_double.png"
  /></guiicon> icon in the toolbar of <guilabel>Query Results</guilabel> view.
  Next, click on <emphasis>Shared fields have no common lock held for each
  access</emphasis> under the <guilabel>Bad Use</guilabel> section of the
  Overview for <guilabel>FlashlightTutorial_CounterRace</guilabel>.  The
  <guilabel>Query Results</guilabel> view should display the
  <structfield>f_threadLocalCounts</structfield> field, similar to the image
  below.</para>

  <figure id="fig-tutorial-android-threadlocal-1">
    <title>Looking at f_threadLocalCounts</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-1.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>As this query result reports, there should be four instances of
  <structfield>f_threadLocalCounts</structfield> in the program&mdash;one for
  each counter thread.  Select <structfield>f_threadLocalCounts</structfield> in
  the <guilabel>Query Results</guilabel> view and run (by double click or right
  click) the <emphasis>What instances contain this field and have an empty lock
  set?</emphasis> query.</para>
  
  <figure id="fig-tutorial-android-threadlocal-2">
    <title>Four instances of f_threadLocalCounts</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-2.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Now select the first instance of
  <structfield>f_threadLocalCounts</structfield> to investigate more
  closely. Right click and select (run) the <emphasis>What threads read and write
  this field?</emphasis> query.</para>
  
  <figure id="fig-tutorial-android-threadlocal-4">
    <title>What threads read and write f_threadLocalCounts</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-5.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>We can see from the query result that most accesses of
  <structfield>f_threadLocalCounts</structfield> by the program are in one
  thread, as should be the case for a thread-confined field. In our case, the
  thread that uses this instance of
  <structfield>f_threadLocalCounts</structfield> is Thread-4574, which is one of
  the four <emphasis>counter threads</emphasis> in the program.</para>
  
  <para>There is one access made from the main thread while the object is under
  construction, and another made after object construction.  It is common for
  fields that are thread confined, such as
  <structfield>f_threadLocalCounts</structfield>, to be written to during
  construction in a parent thread but subsequently accessed solely by another
  thread created by that parent.  As long as a happens-before relationship is
  established between the parent thread and its child thread on creation, this
  is thread-safe.  Similarly, it is common for a parent thread to create a child
  thread with the purpose of doing some work outside of the parent thread.  The
  results of that work are then inspected once the child thread is finished.  As
  long as a happens-before relationship is established between the child
  thread's termination and its parent, this is thread-safe too.  Flashlight can
  these happens-before relationships, so let's verify for our self that they
  exist. We'll do that by taking a look at where in the main thread
  <structfield>f_threadLocalCounts</structfield> is initialized.  Go up one
  query level, back to <emphasis>What instances contain this field and have an
  empty lock set?</emphasis> by clicking on the <guiicon><inlinegraphic
  fileref="images/gray_x.png" /></guiicon> icon in the toolbar of
  <guilabel>Query Results</guilabel> view.  Then run <emphasis>When and by what
  threads was this field accessed?</emphasis></para>

  <figure id="fig-tutorial-android-threadlocal-3">
    <title>When and by what threads was f_threadLocalCounts accessed?</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-3.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Your results should resemble the image above.  This query tells us that
  the main thread first wrote to <structfield>f_threadLocalCounts</structfield>,
  then Thread-4391 wrote and read from it repeatedly while incrementing
  <structfield>f_threadLocalCounts</structfield>, for several seconds, and
  finally the main thread accessed
  <structfield>f_threadLocalCounts</structfield> again to read the result.  The
  Happens-Before column indicates that there was indeed a Happens-Before
  relationship in between every time that
  <structfield>f_threadLocalCounts</structfield> was accessed by two different
  threads.  This means that we can be assured that this field was accessed in a
  thread-safe manner.</para>


  <para>If we want, we can drill in even further and look at where these
  happens-before events occurred to get a better idea of the program behavior.
  Go ahead and select the second entry (the entry not in the main thread), then
  run <emphasis>What happens before edges allow these field reads to see the
  previous write?</emphasis> There are two entries in this case: one from the
  thread start and one from the count down latch.  Click on the Thread start
  entry and run <emphasis>What is the stack trace for this edge's source?</emphasis>
  </para>


  <figure id="fig-tutorial-android-threadlocal-10">
    <title>The happens before edges from the main thread to write of <structfield>f_threadLocalCounts</structfield> by the main thread.</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-10.png" />
      </imageobject>
    </mediaobject>
  </figure>


  <figure id="fig-tutorial-android-threadlocal-4">
    <title>What is the stack trace for this edge's source?</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-4.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>We can see from the figure above that
  <structfield>f_threadLocalCounts</structfield> is written to during the
  construction of <classname>CounterThread</classname>.  If we click on first
  row, where the <methodname>go</methodname> method of class
  <classname>CounterRaceActivity</classname> is called, we jump to that line of
  code in the source code and can see the context where
  <classname>CounterThread</classname> is initialized.  Following along with the
  code, we can see that all of the <classname>CounterThread</classname> objects
  are constructed first, then started from the main thread.  When
  <methodname>Thread.start</methodname> is called, a happens-before relationship
  is created between the main thread and the counter threads.  Because
  Flashlight observed that there is a happens-before relationship in between the
  write to <structfield>f_threadLocalCounts</structfield> from the main thread
  and the read/writes occurring in the counter thread, we can be satisfied that
  there is no race condition here.</para>

  <figure id="fig-tutorial-android-threadlocal-6">
    <title>Initialization of <structfield>f_threadLocalCounts</structfield> in
    <classname>CounterRaceActivity</classname></title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-6.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Now we need to go back and look at the other access outside of the
  counter thread &mdash; the read of
  <structfield>f_threadLocalCounts</structfield> by the main thread.  In the
  <guilabel>Query Results Explorer</guilabel> view, click on <emphasis>When and
  by what threads was this field accessed?</emphasis> and select the final row.
  Run <emphasis>What happens before edges allow these field reads to see the previous write?</emphasis>
  You should see something similar to the figure below.</para>

  <figure id="fig-tutorial-android-threadlocal-7">
    <title>The happens before edge to main from the counter thread</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-7.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Notice that the very last access of this field occurred in the main
  thread.  Select the last access of
  <structfield>f_threadLocalCounts</structfield>, and run <emphasis>What is the
  stack trace for this edge's source?</emphasis></para>

  <figure id="fig-tutorial-android-threadlocal-8">
    <title>What is the stack trace for this edge's source?</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-8.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Click on the first line of the stack trace to get an idea of what is
  happening at this point in time.  We see that, in the
  <methodname>stop</methodname> method of <classname>CounterThread</classname>,
  the program iterates over each <classname>CounterThread</classname> and joins
  to it.  The <classname>Thread</classname>.<methodname>join</methodname> method
  creates a happens-before relationship from the termination of each counter
  thread to the main thread.  Because Flashlight observed that
  <structfield>f_threadLocalCounts</structfield> is read by the main thread
  after the happens-before relationship is established with its counter thread,
  we can be certain that the access is free of any race conditions.
  </para>
  <figure id="fig-tutorial-android-threadlocal-9">
    <title>Access of <structfield>f_threadLocalCounts</structfield> by the main thread after Thread-4574 has ended</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-android-threadlocal-9.png" />
      </imageobject>
    </mediaobject>
  </figure>
  <para>This concludes the Android tutorial.</para>
</section>




