<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<section id="sec-tutorial-planetbaron-server">
  <title>Finding a race condition in the PlanetBaron server with lock set analysis</title>
  
  <para>ChatTestClient was a simple Swing application that let us try out the
  <guilabel>Run Overview</guilabel> and some of Flashlight's queries.  From this
  we uncovered a bug that could easily be overlooked in a code inspection. We
  now turn our attention to a more complex multi-threaded program, the
  PlanetBaron server, to illustrate several more complex queries that Flashlight
  is capable of. The basic user interaction with the Flashlight tool remains the
  same:
    <orderedlist>
      <listitem>Run an instrumented program.</listitem>
      <listitem>Prep the data.</listitem>
      <listitem>Query the data.</listitem>
      <listitem>Drill into query results.</listitem>
      <listitem>Change/fix code.</listitem>
    </orderedlist>
  </para>

  <para>Start a server using the Flashlight launch tab the Eclipse toolbar as
  shown in <xref linkend="fig-tutorial-planetbaron-running-server" />.  We are
  assuming you ran the server and player applications earlier in the tutorial so
  that the Server and PlayerUI launch configurations will still be present in
  the Eclipse launch menus.</para>

  <figure id="fig-tutorial-planetbaron-running-server">
    <title>Running Server with Flashlight instrumentation</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-running-server.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Next start three PlayerUI instances. We don't want to instrument these
  programs, so use the normal launch tab as shown in <xref
  linkend="fig-tutorial-planetbaron-running-playerui" />.</para>

  <figure id="fig-tutorial-planetbaron-running-playerui">
    <title>Running a PlayerUI without Flashlight instrumentation</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-running-playerui.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Go ahead and connect into the game as Laurel, Hardy, and
  Groucho. Exercise the game by having each player take several planets.  Have
  one planet be owned by each player at one time. To do this click on the same
  planet in all three PlayerUI instances. This is shown in <xref
  linkend="fig-tutorial-planetbaron-running-game" />.</para>

  <figure id="fig-tutorial-planetbaron-running-game">
    <title>Running three players at once on an instrumented server</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-running-game.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>When you have exercised the three players, terminate the three PlayerUI
  instances by closing the application windows. Run a ChatTestClient (without
  instrumentation) and use it to shutdown the server.</para>

  <para>In the Flashlight perspective go ahead and prep the server run so that
  it can be queried. This will take a few minutes to complete.</para>

  <para>The sample query and <guilabel>Run Overview</guilabel> data you see here
  may or may not be identical to what you see at your computer.The program we
  are examining is a multi-threaded network-based game server. Therefore, it is
  impossible to duplicate a run&mdash;even for tutorial purposes. You should,
  however, see results similar to what we present and you are encouraged to see
  what you can find in your run results.</para>

  <!-- Start of lockset tutorial -->
  <para>We'll use a couple of analyses performed by Flashlight during the prep
  phase to investigate the PlanetBaron server.  The first of these is a lock set
  analysis.  A lock set analysis examines each access of a field in the program
  and intersects the set of locks held.  If shared state has a lock set it is a
  good thing&mdash;this state was observed to be protected consistently by at
  least one lock.  This isn't a guarantee that this field will always be
  protected in every run of the program (to make this determination a sound
  verification tool like SureLogic JSure is required), but it was observed to be
  true for the particular run of the program.  If shared state has no lock set
  then this may be a bad thing&mdash;it might mean that your program contains a
  race condition.  To get an overview of the results of Flashlight's lock
  analysis, click the <guimenuitem>Race Conditions</guimenuitem> tab of the
  <guimenuitem>Run Overview</guimenuitem>.  The <emphasis>Race
  Conditions</emphasis> tab displays all of the fields observed to have no lock
  set during the last run of the program.  In this case, the results should
  indicate that <classname>edu.afit.planetbaron.game.Ship</classname> has no
  lock set for the field <structfield>f_location</structfield>, as seen in <xref
  linkend="fig-tutorial-planetbaron-lockset1" />.</para>

  <figure id="fig-tutorial-planetbaron-lockset1">
    <title>An empty lock set in PlanetBaron</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-lockset1.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>We can click on the <structfield>f_location</structfield> field to bring
  up a tree-table displaying all of the locks held while f_location was being
  accessed at some point in the program or other.  As we can see, the locks are
  sorted by how often they were held when the field is accessed.  The first
  lock, a ReentrantReadWriteLock, appears to be accessed with some frequency, so
  it may be worth investigating.  Click on the arrow by the
  ReentrantReadWriteLock to expand its subtree.  Expanding the subtree reveals
  two subtrees.  The 'not held at' subtree shows all accesses to
  <structfield>f_location</structfield> that happened while the lock was not
  held.  The 'heldAt' subtree shows the field accesses while the lock was held,
  as well as where the lock was acquired for the field access.</para>

  <para>Looking at the 'not held at' portion of the subtree, we can see that
  <structfield>f_location</structfield> was not protected by the
  ReentrantReadWriteLock at lines 95, 99, and 156 of
  <filename>Ship.java</filename>.  Click on the links for each of those lines of
  code to display the location in the editor.  Two of them are in the
  constructor, and don't appear to be a problem.  The final line, on the other
  hand, is an unprotected access of <structfield>f_location</structfield>, and
  the source of our problem.  <xref linkend="fig-tutorial-planetbaron-lockset4"
  /> shows the incorrectly synchronized line of code.
  </para>


  <figure id="fig-tutorial-planetbaron-lockset4">
    <title>The offending line of code</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-lockset4.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>
    Fortunately, the fix is straightforward: we acquire the write lock
    <emphasis>before</emphasis> the access of
    <structfield>f_location</structfield> in the condition of the
    <code>if</code> statement.  This requires changing the scope of the
    <code>try</code>&ndash;<code>finally</code> block as well.

  <programlisting><![CDATA[  public void moveTo(Location destination) {
    if (isMoving())
      throw new IllegalStateException(
          "a moving ship can't change its destination");

    f_lock.writeLock().lock();
    try {
      if (f_location.equals(destination)) { // <<<=== unprotected access
        LOG.log(Level.WARNING,
            "ignored attempt to move ship to its current location");
      } else {
        f_isMoving = true;
        f_turnsMoving = 0;
        f_destination = destination;
        f_moveDistance = f_location.distanceTo(f_destination);
        f_percentageMoved = 0.0;
        sendReport(); // OK to invoked holding a write lock
      }
    } finally {
      f_lock.writeLock().unlock();
    }
  }]]></programlisting>

    Change the method to appear like the one above, and run Flashlight on the
    PlanetBaron server again.  Once you have prepped the new run, you can run
    <emphasis>What fields (non-static) have an empty lock set</emphasis> to see
    that all instances of <structfield>f_location</structfield> now have a lock
    set.
  </para>

</section>
