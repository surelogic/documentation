<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<sect2 id="sec-tutorial-playerui">
  <title>Finding a deadlock in the PlanetBaron UI with lock cycle detection</title>

  <!-- Start of deadlock tutorial -->
  <para>
    In addition to a lock set analysis, Flashlight provides an analysis that
    detects potential deadlock scenarios.  It does this by constructing a
    directed graph of all lock acquisitions in the program.  Each edge in the
    graph points from a lock that is already held to a lock being acquired.
    Cycles in the graph indicate that the program sometimes acquires a set of
    locks in more than one order, a behavior that commonly leads to deadlock.
    To investigate this further, we will instrument the PlanetBaron client this
    time around.
  </para>

  <para>
    In the previous section we started up a server through the Flashlight launch
    tab and three instances of PlayerUI through the normal launch tab.  For this
    experiment, we only need one instance of PlayerUI, and we will instrument it
    instead of the server.  Go ahead and run
    <classname>edu.afit.planetbaron.server.Server</classname> as a normal Java
    application, and then launch one instance of
    <classname>edu.afit.planetbaron.client.PlayerUI</classname> through the
    Flashlight launch tab.  As in the previous tutorial, go ahead and connect
    into the game, and move your ship to a planet or two.  Then terminate your
    instance of PlayerUI by closing the application window, and stop the server
    from the Flashlight console.
  </para>

  <para>
    Now that we have an instrumented run of <classname>PlayerUI</classname>,
    select it from the <guilabel>Flashlight Runs</guilabel> view in the
    Flashlight perspective, and click on the
    <guimenuitem>Deadlocks</guimenuitem> tab of the <guilabel>Run
    Overview</guilabel>.  If you connected the client to the server, the result
    of your query should be a two-lock cycle similar to <xref
    linkend="fig-tutorial-planetbaron-deadlock1" />.  In our example the locks
    involved are <code>Object-42</code> and
    <code>ReentrantReadWriteLock-51</code>, and each appears to be acquired at
    some point while the other is already held.  If you are following along,
    your lock numbers may be different, but they should correspond to the 'same'
    locks.
  </para>

  <figure id="fig-tutorial-planetbaron-deadlock1">
    <title>A potential deadlock in <classname>edu.afit.planetbaron.client.PlayerUI</classname></title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock1.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>
    To figure out where the trouble lies, we'll have to look at both lock edges
    in the cycle.  Click on the <code>Object-42 ->
    ReentrantReadWriteLock-51</code> link under the <guilabel>Edges</guilabel>
    heading.  This will display two stack traces underneath the cycle graph. The
    <guilabel>Lock Acquired</guilabel> stack trace shows where
    <code>ReentrantReadWriteLock-51</code> was acquired and the <guilabel>Lock
    Held</guilabel> stack trace shows where <code>Object-42</code> was acquired.
    We can see from the stack traces that this edge originated from the
    <function>mouseMoved</function> method in
    <classname>edu.afit.planetbaron.client.MapView</classname>.  If we click on
    a link to the <classname>MapView</classname> class from one of the stack
    traces and inspect the class, we see that the <classname>MapView</classname>
    class implements <classname>java.awt.event.MouseMotionListener</classname>.
    We can deduce that <function>mouseMoved</function> is called as the result
    of an event triggered in the AWT event thread.
  </para>

  <figure id="fig-tutorial-planetbaron-deadlock2">
    <title>Stack traces for the <code>Object-42 -> ReentrantReadWriteLock-51</code> lock edge</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock2.png" />
      </imageobject>
    </mediaobject>
  </figure>
  <figure id="fig-tutorial-planetbaron-deadlock4">
    <title>Acquisition of <structfield>f_lock</structfield> in the <classname>GameMap</classname> class from <xref linkend="fig-tutorial-planetbaron-deadlock2" /></title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock4.png" />
      </imageobject>
    </mediaobject>
  </figure>
  <figure id="fig-tutorial-planetbaron-deadlock5">
    <title>Acquisition of <structfield>m_cursorLocationLock</structfield> in the MapView class from <xref linkend="fig-tutorial-planetbaron-deadlock2" /></title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock5.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>
    Now let's look at the other edge in our potential deadlock cycle, and see if
    there really is a problem.  Click on the <code>ReentrantReadWriteLock-51->
    Object-42</code> link under the <guilabel>Edges</guilabel> heading.  Here
    the displayed stack traces show that the lock acquisitions originated from
    the <function>run</function> method in
    <classname>edu.afit.planetbaron.client.communication.ServerProxy</classname>.
    The <classname>ServerProxy</classname> class extends
    <classname>java.lang.Thread</classname>, and an instance of it is created
    and started when we connect to a server.  If we inspect the stack traces, we
    see that the edge first acquires a write lock on
    <structfield>f_lock</structfield> in
    <classname>edu.afit.planetbaron.game.GameMap</classname>, followed by a lock
    on <structfield>m_cursorLocationLock</structfield> in
    <classname>edu.afit.planetbaron.client.MapView</classname>.
  </para>

  <figure id="fig-tutorial-planetbaron-deadlock3">
    <title>Stack traces for the <code>ReentrantReadWriteLock-51 -> Object-42 </code> lock edge</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock3.png" />
      </imageobject>
    </mediaobject>
  </figure>
  <figure id="fig-tutorial-planetbaron-deadlock6">
    <title>Acquisition of <structfield>m_cursorLocationLock</structfield> in the <classname>MapView</classname> class from <xref linkend="fig-tutorial-planetbaron-deadlock3" /></title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock6.png" />
      </imageobject>
    </mediaobject>
  </figure>
  <figure id="fig-tutorial-planetbaron-deadlock7">
    <title>Acquisition of <structfield>f_lock</structfield> in the <classname>GameMap</classname> class from <xref linkend="fig-tutorial-planetbaron-deadlock3" /></title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-deadlock7.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>
    To summarize, our investigation has shown us that our lock cycle is composed
    of two separate and repeated events in our program.  Every time the AWT
    Event Thread processes a mouseMoved event, we acquire
    <structfield>m_cursorLocationLock</structfield>, then a read lock on
    <structfield>f_lock</structfield>.  Every time we get a response back from
    the server, we acquire a write lock on <structfield>f_lock</structfield>,
    then <structfield>m_cursorLocationLock</structfield>.  Unfortunately for the
    program, both of these events can happen at any time.  If they trigger
    near-simultaneously, we can end up in a scenario where the server thread
    holds onto <structfield>f_lock</structfield> and waits on
    <structfield>m_cursorLocationLock</structfield>, while the AWT event thread
    holds onto <structfield>m_cursorLocationLock</structfield> and waits for the
    server thread to give up its write lock on
    <structfield>f_lock</structfield>.  When this happens, the program will
    deadlock.
  </para>

</sect2>
