<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<section id="sec-tutorial-client">
  <title>Using Flashlight on the PlanetBaron project</title>

  <para>PlanetBaron is a network-based real-time strategy game. It contains
  three programs that we will run during this tutorial. The first is a server
  program that manages the distributed game state. The second is a graphical
  program that allows a player to interact with the game. The third program,
  called the chat-test client, allows direct interaction with the server for the
  purpose of debugging and management. For example, the chat-test client is used
  to shutdown a server.</para>

  <para>Flashlight is a dynamic analysis tool. To get any useful results from
  Flashlight we have to collect data while a program is running. We will start
  below by describing how to run and play a PlanetBaron game.  After we
  understand a bit about how to run the game we will return to using Flashlight
  on it.</para>

  <para>Let's run a PlanetBaron game. Select <filename>Server.java</filename> in
  the <package>edu.afit.planetbaron.server</package> package. Right-click and
  select <menuchoice><guisubmenu>Run As</guisubmenu> <guimenuitem>Java
  Application</guimenuitem></menuchoice>. You should see following output in the
  console which indicates that the server has started successfully:</para>

  <screen>
    [INFO "server-main"] PlanetBaron game server listening for clients on port 8693 and playing on a 15x15 map
  </screen>

  <para>Now we need to add some players. Select
  <filename>PlayerUI.java</filename> in the
  <package>edu.afit.planetbaron.client</package> package. Right-click and select
  <menuchoice><guisubmenu>Run As</guisubmenu> <guimenuitem>Java
  Application</guimenuitem></menuchoice>. You will see a Window appear has a
  blank grid and the title <application>PlanetBaron</application>. In the lower
  right-hand-corner enter a player name, <userinput>Laurel</userinput>, and
  press <guibutton>Connect</guibutton>.</para>

  <para>The screen will change to contain several planets and one ship with
  "Laurel" as its label. By moving your mouse around the grid you can direct
  your ship. Place your mouse over a planet and left-click.  This action will
  cause your ship to move slowly to that planet. When your ship arrives you will
  become the owner of that planet. This is called "taking ownership" of a
  planet. Go ahead an take ownership of a few planets. Note that while your ship
  is moving you are not allowed to change its destination.  Once it arrives at
  the destination you selected you can then select a subsequent
  destination.</para>

  <para>If you look at the console for the server you will see the commands that
  have come in from the Laurel PlayerUI. For example, your server console might
  look similar to the below:</para>

  <screen>
    [INFO "server-main"] PlanetBaron game server listening for clients on port 8693 and playing on a 15x15 map [edu.afit.planetbaron.server.Server.startListening()]
    [INFO "server-ch10"] client handler thread started [edu.afit.planetbaron.server.ClientHandler.run()]
    [INFO "server-ch10 (Laurel)"] "play "Laurel"" processed GameStateUpdate from ch10 (Laurel) [edu.afit.planetbaron.server.ClientHandler.run()]
    [INFO "server-ch10 (Laurel)"] "moveship "Laurel" to (12,11)" processed Ok from ch10 (Laurel) [edu.afit.planetbaron.server.ClientHandler.run()]
    [INFO "server-ch10 (Laurel)"] "moveship "Laurel" to (9,13)" processed Ok from ch10 (Laurel) [edu.afit.planetbaron.server.ClientHandler.run()]
    [INFO "server-ch10 (Laurel)"] "moveship "Laurel" to (8,10)" processed Ok from ch10 (Laurel) [edu.afit.planetbaron.server.ClientHandler.run()]
  </screen>

  <para>Now, go back to Eclipse and start a second instance of
  <filename>PlayerUI.java</filename>. In the lower right-hand-corner enter a
  player name, <userinput>Hardy</userinput>, and press
  <guibutton>Connect</guibutton>.</para>

  <para>The game supports as many players as you choose to connect to the
  server. Notice that the planets that Laurel owns are red in the Hardy PlayerUI
  while they are white in the Laurel PlayerUI.  Moving back and forth between
  the two PlayerUIs move the ships to play the game.  Note that the idea of the
  game is to own as many planets as you can. A game screenshot is shown in <xref
  linkend="fig-tutorial-planetbaron-playerui" />.</para>

  <figure id="fig-tutorial-planetbaron-playerui">
    <title>The PlanetBaron PlayerUI for Laurel</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-playerui.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>To finish the game press <guibutton>Disconnect</guibutton> in both
  PlayerUI instances and then terminate the programs by closing the application
  windows as usual. This action ends both player user interfaces but the server
  is still running.  To terminate the server we need to use the chat-test client
  program. Select <filename>ChatTestClient.java</filename> in the
  <package>edu.afit.planetbaron.client</package> package. Right-click and select
  <menuchoice><guisubmenu>Run As</guisubmenu> <guimenuitem>Java
  Application</guimenuitem></menuchoice>. You will see a window appear with the
  title <application>ChatTest - PlanetBaron</application>. This program allows
  you to directly control the game server via text commands. We want to use it
  to shutdown the game server. To do this press <guibutton>Connect</guibutton>
  to connect to the game server and enter <userinput>shutdown</userinput> as the
  command. Your screen should now look like the one shown in <xref
  linkend="fig-tutorial-planetbaron-chattestclient" />.</para>

  <figure id="fig-tutorial-planetbaron-chattestclient">
    <title>Using the ChatTestClient to shutdown the game server</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-chattestclient.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Press <guibutton>Send</guibutton> to shutdown the server. A dialog will
  appear stating that the server has disconnected from the ChatTestClient that
  you may dismiss. You can now terminate the ChatTestClient by closing the
  application window. Back in the Eclipse console for the server you should see
  the following message at the bottom:</para>

  <screen>
    [INFO "server-main"] PlanetBaron game server shutdown complete
  </screen>

  <para>We are now ready to use Flashlight to help us understand the concurrency
  in the PlanetBaron game. Let's start with the ChatTestClient. To run the
  ChatTestClient with Flashlight instrumentation we select it from the
  Flashlight launch tab in the Eclipse toolbar as shown in <xref
  linkend="fig-tutorial-planetbaron-running-chattestclient" />.</para>

  <figure id="fig-tutorial-planetbaron-running-chattestclient">
    <title>Running ChatTestClient with Flashlight instrumentation</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-running-chattestclient.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>The ChatTestClient window will appear on your screen. Click the
  <guibutton>Connect</guibutton> button to try and connect to a game server.
  This will fail and the application will show a dialog to you which you may
  dismiss. The reason it fails is that we did not start a game server. At this
  point we have exercised the ChatTestClient enough to see some Flashlight
  results. Go ahead and close the application window to terminate the
  program. At this point Eclipse, which knows that this launch was instrumented,
  will prompt you to switch to the Flashlight perspective as shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-switch-dialog" />.</para>

  <figure id="fig-tutorial-planetbaron-perspective-switch-dialog">
    <title>Prompting the user to switch to the Flashlight perspective</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-switch-dialog.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Press <guibutton>Yes</guibutton> and the Flashlight perspective
  will appear as shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-empty" />.</para>

  <figure id="fig-tutorial-planetbaron-perspective-empty">
    <title>The Flashlight perspective</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-empty.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>The Flashlight perspective is used to manage and query data collected
  from instrumented programs. The <guilabel>Flashlight Runs</guilabel> view in
  the upper-left manages the instrumented runs of programs. This view allows you
  to prepare data to be queried, select a prepared run for querying, and delete
  runs from the disk.  We need to prepare, or <emphasis>prep</emphasis>, the
  ChatTestClient run.  When you switch to the Flashlight perspective, you should
  be prompted to prepare your run data as shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-run-dialog" />.</para>


  <figure id="fig-tutorial-planetbaron-perspective-run-dialog">
    <title>Prompting the user to prepare a completed run</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-run-dialog.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Press <guibutton>Yes</guibutton> and Flashlight will start preparing the
  run.  If you have changed your workspace preferences so that the above dialog
  does not show up, double-click the row in the <guilabel>Flashlight
  Runs</guilabel> table to prepare your run.  Alternatively you can select the
  run, right-click, and select <guimenuitem>Prepare</guimenuitem> from the
  context menu.</para>

  <para>A dialog will appear showing the progress of prepping the data for
  querying. For large runs prepping can take a significant amount of time. This
  run, which only collected roughly 5 KB of data, should prep quickly taking up
  a total of roughly 10 MB of disk space.</para>

  <para>When the prep is complete two changes will occur. First, a
  <guiicon><inlinegraphic fileref="images/drum.png" /></guiicon> will
  appear in the <guilabel>Prep</guilabel> column of the
  <guilabel>Flashlight Runs</guilabel> view table for this run. Second,
  several queries are now able to be run on the data. These queries are
  listed in the <guilabel>Query Menu</guilabel> view directly below the
  <guilabel>Flashlight Runs</guilabel> view.</para>

  <para>At this point we should be able to inspect the run data. If you haven't
  selected the row in the <guilabel>Flashlight Runs</guilabel> view already, go
  ahead and click on it now.  This should bring up the <guilabel>Run
  Overview</guilabel>. The <guilabel>Run Overview</guilabel> displays a summary
  of what Flashlight observed while the program was being run.</para>

  <para>Click on the <guimenuitem>Program Timeline</guimenuitem> tab of the
  <guilabel>Run Overview</guilabel>.  Your screen should appear as shown in
  <xref linkend="fig-tutorial-planetbaron-ctc-program-timeline" />.  The
  <guimenuitem>Program Timeline</guimenuitem> shows a timeline of all the
  threads observed in this run of the program.  In the figure below, two threads
  were observed.  <code>Thread-2</code> was the initial thread that the
  <methodname>main</methodname> method was run from, and
  <code>EventDispatchThread-512</code> is the AWT Event Dispatch Thread.</para>

  <figure id="fig-tutorial-planetbaron-ctc-program-timeline">
    <title>A sample Program Timeline for a ChatTestClient run</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-ctc-program-timeline.png" />
      </imageobject>
    </mediaobject>
  </figure>


  <para>We can also run queries on the run now.  Double-click on the
  <emphasis>What fields are read by the AWT Event Dispatch Thread and written in
  others?</emphasis> query under the <guilabel>API Use</guilabel> section of the
  <guilabel>Query Menu</guilabel>.  The results will appear in the
  <guilabel>Query Results</guilabel> view.  Go ahead and click on the
  <structfield>f_connectDisconnectButton</structfield> entry.  Your screen
  should appear as shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc1" />.  Query results are
  presented as a table, tree, or tree-table.  This result is a tree-table. The
  result reports the shared non-static fields noted in the run.</para>

  <para>Selecting fields in the query result causes these fields to be
  highlighted in two views at the bottom of the Flashlight perspective.  The
  view to the left is the normal Java editor and represents the current state of
  the source code. The view to the right is an <guilabel>Historical Source
  Snapshot</guilabel> view that shows you the code as it existed when the
  program was executed.  This view helps you to understand if the code has
  evolved since the run you are querying was made.</para>


  <figure id="fig-tutorial-planetbaron-perspective-ctc1">
    <title>Fields accessed outside the Event Dispatch Thread in a ChatTestClient run</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc1.png" />
      </imageobject>
    </mediaobject>
  </figure>


  <para>Select the <structfield>f_connectDisconnectButton</structfield> and
  right-click. This brings up a menu of queries that can be run on this
  result. Select <emphasis>What are the instances of this non-static
  field?</emphasis> You should see a table with a single entry, as in <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc7" />.  If any other
  ChatTestClient objects had been created and shared their
  <structfield>f_connectDisconnectButton</structfield> with more than one
  thread, we would see entries for them here as well.  Note that while our
  object is called <code>ChatTestClient-10</code>, the number after the dash may
  be different for you. In general, the suffix of an object will be different
  from run to run, as it is randomly assigned at runtime when the object is
  instantiated.
  </para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc7">
    <title>A ChatTestClient object containing the <structfield>f_connectDisconnectButton</structfield> field.</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc7.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>Right click on the single row and select <emphasis>What threads read and
  write this field?</emphasis> The results should look something like <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc2" />.  In the case of
  <structfield>f_connectDisconnectButton</structfield> we see that the
  AWT-EventQueue-0, known as the event dispatch thread (EDT), and the main
  thread shared this field. Note that all the accesses by the main thread were
  during construction of the ChatTestClient.
  </para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc2">
    <title>What threads read and write this field?</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc2.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <para>We will zoom in a little more and look at the actual accesses of this
  field.  Right click on the table, and run <emphasis>When and by what threads
  was this field accessed?</emphasis> Your results should resemble <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc9" />. Each entry in this
  query represents a series of contiguous accesses made in a single thread. This
  query tells us that the <structfield>f_connectDisconnectButton</structfield>
  was written to by the main thread several times, and then read from in the AWT
  thread afterward.</para>


  <figure id="fig-tutorial-planetbaron-perspective-ctc9">
    <title>When and by what threads was this field accessed?</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc9.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>We can get a better idea of when we are writing to
  <structfield>f_connectDisconnectButton</structfield> by drilling in and
  looking at each access that was made.  Right click on the main entry, and run
  <emphasis>Show every access of this field in this time range.</emphasis> The
  result of this query should look like <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc3" /> and will show you each
  read and write of the field that was observed by the instrumentation as the
  program executed. It shows the time at which the event occurred and the thread
  it happened within. Select the second access by the main thread and
  right-click. Drill-in again by selecting <emphasis>What is the stack trace for
  this access?</emphasis> as shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc8" />.</para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc3">
    <title>Looking at the accesses made to a field</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc3.png" />
      </imageobject>
    </mediaobject>
  </figure>
  
  <figure id="fig-tutorial-planetbaron-perspective-ctc8">
    <title>Drilling in to see the stack trace for this field access</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc8.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>This will result in a stack trace for the selected access.  Selecting
  each row of the result will show that line of code in the program.  The bottom
  row is, in fact, a bug in the program. This line is shown in <xref
  linkend="fig-tutorial-planetbaron-perspective-ctc4" />.</para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc4">
    <title>The broken line of code in ChatTestClient</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc4.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>What is wrong? To understand this problem we quote from Haase and Guy's
  <citetitle pubwork="book">Filthy Rich Clients</citetitle><biblioref
  linkend="HaaseGuy07"/>:</para>

  <blockquote><para>Swing's threading model is based on a single rule: The EDT 
  is responsible for executing any method that modifies a component's
  state. This includes any component's constructor.  According to this rule, and
  despite what you can read in many books and tutorials about Swing, the
  <function>main()</function> method in the previous code example is invalid and
  can cause deadlock.</para></blockquote>

  <para>The concurrency policy that Swing uses is called 'thread confinement.'
  A thread confinement policy doesn't use any sort of explicit locking, but
  instead demands that all modifications made to the library's internal state
  happen in the same thread.  Because Swing component constructors can and do
  make modifications to Swing's internal state, they must be created from the
  Swing Event Dispatch Thread (EDT).  To fix this problem we need to call the
  ChatTestClient constructor from the EDT. We can do this by changing the
  <function>main()</function> method to look like the code below.</para>

  <programlisting>
<![CDATA[
public static void main(String[] args) {
  // run the application
  SwingUtilities.invokeLater(new Runnable() {
    @Override
    public void run() {
      new ChatTestClient();
    }
  });
}
]]>
  </programlisting>

  <para>Save this change and launch ChatTestClient using the Flashlight launch
  shortcut again. Perform the same actions that you did during the first run:
  <orderedlist>
    <listitem>Try to connect.</listitem>
    <listitem>Dismiss the dialog.</listitem>
    <listitem>Exit.</listitem>
  </orderedlist>
  </para>

  <para>A new run will appear in the <guilabel>Flashlight Runs</guilabel>
  view. Double-click this run to prep it if Flashlight does not automatically
  ask to prepare the data.</para>

  <para>Clear out the previous query results by clicking the
  <guiicon><inlinegraphic fileref="images/gray_x_double.png" /></guiicon> in
  either the <guilabel>Result Explorer</guilabel> portion of the <guilabel>Query
  Flashlight</guilabel> view or the <guilabel>Flashlight Query
  Results</guilabel> view. This action clears out the saved results from all
  previous queries (the set of these results is saved in the <guilabel>Result
  Explorer</guilabel> portion of the <guilabel>Query Flashlight</guilabel>
  view).</para>

  <para>Check that you have the new run selected in the <guilabel>Flashlight
  Runs</guilabel> view and then double-click on the <emphasis>What fields are
  read by the AWT Event Dispatch Thread and written in others?</emphasis>
  query. The query is successful but no rows are returned. This indicates that
  no fields were observed being accessed in both the AWT Event Dispatch Thread
  and the main thread. This run provides some evidence that we have fixed the
  bug discovered in ChatTestClient.</para>

  <para>Before we move on let's examine the old run one final time.  Clear out
  the previous query results by again clicking the <guiicon><inlinegraphic
  fileref="images/gray_x_double.png" /></guiicon> icon. Select the first
  ChatTestClient run and double-click the <emphasis>What fields are read by the
  AWT Event Dispatch Thread and written in others?</emphasis> query. Select
  <structfield>f_connectDisconnectButton</structfield> and right-click to select
  the <emphasis>What are the individual instances of this non-static
  field?</emphasis> query, then the <emphasis>When and by what threads was this
  field accessed?</emphasis> query. Select the second access by the main thread
  and right-click to select the <emphasis>Show stack trace for a field
  access</emphasis> query. By selecting the bottom row of the stack trace you
  can see that, while the Java editor code might prove confusing (because we
  changed it), the <guilabel>Historical Source Snapshot</guilabel> view
  remembers what the code looked like in this previous run. This difference is
  shown in <xref linkend="fig-tutorial-planetbaron-perspective-ctc5" />.</para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc5">
    <title>The broken line of code in ChatTestClient is remembered by the Historical Source Snapshot view</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc5.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>We are finished with our examination of these runs, so let's delete
  them. First, clear out all the queries by pressing the <guiicon><inlinegraphic
  fileref="images/gray_x_double.png" /></guiicon> icon. In the
  <guilabel>Flashlight Runs</guilabel> view select both runs and
  right-click. Select <guimenuitem>Delete</guimenuitem> from the context menu as
  shown in <xref linkend="fig-tutorial-planetbaron-perspective-ctc6" />.</para>

  <figure id="fig-tutorial-planetbaron-perspective-ctc6">
    <title>Deleting two Flashlight runs</title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/tutorial-planetbaron-perspective-ctc6.png" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>You will be prompted to ensure that you really want to delete this
  Flashlight run data. Press <guibutton>OK</guibutton>. After a short delay the
  <guilabel>Flashlight Runs</guilabel> view should be empty. It is important to
  delete old runs to ensure that you free up disk space on your computer.</para>

</section>
