<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<sect1>
  <title>Lock Preconditions</title>
  
  <para>Methods and constructors declare lock preconditions using

    <synopsis>
@RequiresLock("<co id="req.lock.name"/><replaceable>lock_name<subscript>1</subscript></replaceable>, &hellip;, <replaceable>lock_name<subscript>n</subscript></replaceable>")<co id="req.lock.n"/>
    </synopsis>
    
    <calloutlist>
      <callout arearefs="req.lock.name">
        <para><replaceable>lock_name<subscript>i</subscript></replaceable> are
        lock names.</para>
      </callout>
      <callout arearefs="req.lock.n">
        <para><replaceable>n</replaceable> &ge; 1.</para>
      </callout>
    </calloutlist>
  </para>
  
  <sect2>
    <title>Constraints</title>
    
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Each <replaceable>lock_name<subscript>i</subscript></replaceable>, which may be a raw or decorated lock name, must be
          <link linkend="lock.names">well-formed</link></title>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>If <replaceable>lock_name<subscript>i</subscript></replaceable>
            is a raw lock name, then the <replaceable>lock_id</replaceable> <emphasis>cannot</emphasis> refer
            to a lock whose lock field refers to an object of
            type <classname>java.util.concurrent.locks.ReadWriteLock</classname>.</title>
          
          <para>It does not make sense to require a read&ndash;write lock object because that
          lock cannot be acquired.</para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>Constructors and <code>static</code> methods cannot
          require callers to hold locks on the receiver
          (<parameter>this</parameter>)</title>

          <para><code>static</code> methods don't have a receiver so
          this would be nonsense. For constructors, the receiver doesn't
          yet exist at the call site, so a caller could never acquire it
          before hand.</para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>If the lock is a non-<code>static</code> lock of the
          receiver, or is a <code>static</code> lock from the same class
          as the annotated method/constructor then it must be at least
          as visible as the method/constructor</title>

          <para>To be truly useful, the required lock should be visible
          at the <emphasis>call site</emphasis> of the method. This is
          not determinable in general when looking at the annotated
          method; it can only be determined by looking at the call
          sites. But these are two common cases that can be checked at
          the method declaration.</para>
        </formalpara>
      </listitem>

      <listitem>
        <formalpara>
          <title>A particular lock for a particular object can only be
          named once per method</title>

          <para>There is no advantage to naming a lock more than once;
          it probably represents an error on the part of the
          programmer.</para>
        </formalpara>
      </listitem>
    </itemizedlist>
  </sect2>
</sect1>
