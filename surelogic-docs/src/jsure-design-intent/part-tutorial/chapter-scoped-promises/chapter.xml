<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../../lib/docbook-xml-4.5/docbookx.dtd">

<chapter id="scoped-promises">
  <title>Scoped Promises</title>

  <para>Scoped promises are promises that act on other promises within a
  static scope of code. Two types of scoped promises are supported by
  the tool: <classname>@Promise</classname> to avoid tedious user
  annotation and <classname>@Assume</classname> to support team
  modeling.</para>

  <note>
    <para>Scoped promises are still experimental in JSure, however, it
    is possible to use <classname>@Promise</classname> in your models.
    We will not describe <classname>@Assume</classname> any further.
    </para>
  </note>

  <para>The simplest example of the use of
  <classname>@Promise</classname> is to change the default for a class.
  So instead of writing</para>

  <programlisting>
class Example {
  private int value = 0;
  
  @Borrowed("this")
  public void set(int v) { value = v; }

  @Borrowed("this")
  public int get() { return v; } 
}
  </programlisting>

  <para>you would write</para>

  <programlisting>
@Promise("@Borrowed(this)")
class Example {
  private int value = 0;
  
  public void set(int v) { value = v; }

  public int get() { return v; } 
}
  </programlisting>

  <para>Notice that the <emphasis>payload</emphasis> promise within the
  scoped promise has the same syntax as the original annotation except
  that the quotation marks are removed. So
  <code>@Borrowed("this")</code> is changed to
  <code>@Borrowed(this)</code> when used as the payload for a scoped
  promise.</para>

  <para>In the form shown in the example above
  <classname>@Promise</classname> places the payload promise on every
  declaration in the class where the payload promise makes sense. In the
  example above, this is all methods and constructors within the Example
  class. It is possible to be more specific by providing an explicit
  target.</para>

  <programlisting>
@Promises({
  @Promise("@Starts(nothing) for new(**)"),
  @Promise("@Unique(return) for new(**)"),
  @Promise("@Borrowed(this) for get*(**)"),
})
class Example2 {
  ...
}
  </programlisting>

  <para>In the example above a <classname>@Starts("nothing")</classname>
  and <code>@Unique("return")</code> annotation are placed on all the
  constructors in the <classname>Example2</classname> class using the
  explicit target <code>new(**)</code>. A <code>@Borrowed("this")</code>
  annotation is placed on all methods within the
  <classname>Example2</classname> class that have names that start with
  "get" (e.g., <function>getValue</function>) and have any number of
  parameters of any type.</para>
</chapter>
