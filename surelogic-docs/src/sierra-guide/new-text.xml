      <section id="sec-tutorial-findbugs-plugin">
	<title>Adding custom FindBugs detectors to Sierra</title>
        <para> This tutorial will demonstrate how to integrate custom
        FindBugs detectors into Sierra.  For more information on how
        to write such detectors, see the following articles:
<!-- http://javadevelopmentforthemasses.blogspot.com/2008/09/custom-findbugs-detectors-and-maven.html -->
        <orderedlist>
 	  <listitem>
            <ulink url="http://www.ibm.com/developerworks/library/j-findbug2/">
	    Writing custom detectors</ulink>
          </listitem>
 	  <listitem>
            <ulink url="http://findbugs.sourceforge.net/AddingDetectors.txt">
	    Adding detectors to FindBugs</ulink>
          </listitem>
 	  <listitem>
            An two-part article on Daniel Schneller's blog (
            <ulink url="http://dschneller.blogspot.com/2007/04/findbugs-writing-custom-detectors-part.html">
	    part 1</ulink>,
            <ulink url="http://dschneller.blogspot.com/2007/05/findbugs-writing-custom-detectors-part.html">
	    part 2</ulink>)
          </listitem>
        </orderedlist>

	For some pre-packaged FindBugs detectors, see 
        <ulink url="http://fb-contrib.sourceforge.net/">fb-contrib</ulink>
	and 
        <ulink url="http://dschneller.blogspot.com/2008/04/localegetdefault-findbugs-detector.html">
	this one written by Daniel Schneller</ulink>.
        </para>
	
        <para>Once you have your custom detectors properly packaged as
	a jar file, you simply need to copy it to the <filename>plugin</filename>
	subdirectory of your Sierra data directory, which you can find
	as follows:
        <orderedlist>
 	  <listitem> Select Window | Preferences from the top-level
 	  menu bar to bring up the Preferences dialog.
          </listitem>
 	  <listitem> Select the main Sierra preference page from the
 	  list on the left.  The location of the data directory should
 	  be listed at the top right of the page.  
          Also see <xref linkend="sec-preferences-sierra"/>
          </listitem>
        </orderedlist>

	Note that you may need to create
        the <filename>plugin</filename> subdirectory first. 
        </para>
      </section>

      <section id="sec-tutorial-pmd-plugin">
	<title>Adding custom PMD rules to Sierra</title>

        <para> This tutorial will demonstrate how to integrate custom
        PMD rules into Sierra.  For more information on how to write
        such rules, see the following articles:
        <orderedlist>
 	  <listitem>
            <ulink url="http://pmd.sourceforge.net/howtowritearule.html">
	    How to write a PMD rule</ulink>
          </listitem>
 	  <listitem>
            <ulink url="http://www.onjava.com/pub/a/onjava/2003/04/09/pmd_rules.html">
	    Custom PMD Rules</ulink>
          </listitem>
        </orderedlist>
        </para>

        <para>Sierra requires the PMD ruleset and any associated Java
        code to be packaged as a jar with
        a <filename>rulesets</filename> subdirectory containing the
        following: 
        <orderedlist>
 	  <listitem>
          One or more ruleset XML files, named to avoid conflicts with
          other rulesets
          (e.g. <filename>de.bsd.pmdrules.xml</filename>) 
          </listitem>
 	  <listitem>
          A <filename>rulesets.properties</filename> file containing a
	  <filename>rulesets.filenames</filename> property, which is a
	  comma-separated list of the paths to the various ruleset XML
	  files above, e.g.  
          <programlisting><![CDATA[rulesets.filenames=rulesets/de.bsd.pmdrules.xml]]></programlisting>
          </listitem>
        </orderedlist>
        </para>
      </section>

      <section id="sec-tutorial-sierra-plugin">
	<title>Extending Sierra with New Tools</title>

        <para> This tutorial will demonstrate how to add new tools to 
        Sierra by adding the well-known tool 
        <ulink url="http://checkstyle.sourceforge.net">CheckStyle</ulink>.
	To begin with, the general data flow for a given tool is as follows:
        <orderedlist>
 	  <listitem>At startup, Sierra scans for available tools, and
	  instantiates an IToolFactory for each one.
          </listitem>
 	  <listitem>For a given scan of a set of projects, Sierra
 	  specifies the files to be scanned, as well as other
 	  parameters, in a Config object. 
          </listitem>
 	  <listitem>Sierra uses this to create an ILazyArtifactGenerator, 
          which encapsulates the creation of the resulting scan document.
          </listitem>
          <listitem>Sierra then uses both the Config and
          ILazyArtifactGenerator to call create() on each IToolFactory
	  to create an IToolInstance specific to that Config
          </listitem>
 	  <listitem>For each IToolInstance, Sierra will call run()
	  with an ArtifactGenerator to create a scan document???
          </listitem>
        </orderedlist>
        </para>

        <para>There are two approaches to doing this:
        <orderedlist>
 	  <listitem>Loose integration, where we run the tool normally
 	  and convert the results into the appropriate format.
          </listitem>
 	  <listitem>Tight integration, where we write a custom
 	  application that effectively uses the tool as a library, and
 	  feed the results directly into the ArtifactGenerator.
          </listitem>
        </orderedlist>
        The difference is that the former can use existing
        configuration files and thus requires less development time,
        but usually takes more run time to convert the results.  The
        latter requires more 
        </para>

        <para> Either way, we can begin by using the Sierra Tool
        Plugin Project wizard to create the basic structure for our
        new tool plugin.
        <orderedlist>
 	  <listitem>New project
          </listitem>
 	  <listitem>Fill in name of the project
          </listitem>
 	  <listitem>Fill in ...
          </listitem>
        </orderedlist>
        </para>

java -jar checkstyle-all-5.0-beta2.jar -c sun_checks.xml -r /home/edwin/workspace-3.4.1/sierra-checkstyle/src -f xml


	<!--
	<para>This tutorial will demonstrate how to use the Sierra Ant
	tasks to scan the SmallWorld project and publish the resulting
	scan document to your local team server.  The Sierra Ant tasks
	are used to automate scans as part of a QA or nightly build
	process. This tutorial assumes you have run the previous
	tutorial (See <xref linkend="sec-tutorial-team-server" />; You
	can skip the previous tutorial if you create a new local team
	server and add a <userinput>zork</userinput> user with
	password <userinput>zork</userinput>).</para>

	<para>For this tutorial you will need your local team server
	running. Open the <guilabel>Local Team Server</guilabel>
	view. If the local team server is stopped press the
	<guibutton>Start Server</guibutton> to get it running
	again.</para>

	<para>The Sierra Ant tasks may be downloaded from <ulink
	url="http://surelogic.com/static/sierra/sierra-ant.zip">
	http://surelogic.com/static/sierra/sierra-ant.zip</ulink>. Unzip
	them to any location on your disk. The archive will create a
	<filename>sierra-ant</filename> directory.</para>
        -->
      </section>
